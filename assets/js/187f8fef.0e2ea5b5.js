"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7805],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>p});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),h=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=h(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=h(t),p=a,f=c["".concat(l,".").concat(p)]||c[p]||d[p]||o;return t?i.createElement(f,r(r({ref:n},m),{},{components:t})):i.createElement(f,r({ref:n},m))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var h=2;h<o;h++)r[h]=t[h];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var i=t(7462),a=(t(7294),t(3905));const o={slug:"/git-commands",sidebar_label:"\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9"},r="\u3010git\u3011\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9",s={unversionedId:"environment/git/git-common-commands",id:"environment/git/git-common-commands",title:"\u3010git\u3011\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9",description:"- git",source:"@site/notes/environment/git/git-common-commands.md",sourceDirName:"environment/git",slug:"/git-commands",permalink:"/notes/git-commands",draft:!1,editUrl:"https://github.com/NaokiKosuge/NaokiKosuge.github.io/edit/main/notes/environment/git/git-common-commands.md",tags:[],version:"current",frontMatter:{slug:"/git-commands",sidebar_label:"\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9"},sidebar:"tutorialSidebar",previous:{title:"\u30d6\u30e9\u30f3\u30c1\u6226\u7565",permalink:"/notes/git-branch-strategy"},next:{title:"Everyday Git",permalink:"/notes/git-everyday"}},l={},h=[{value:"<code>git</code>",id:"git",level:2},{value:"NAME",id:"name",level:3},{value:"SYNOPSIS",id:"synopsis",level:3},{value:"DESCRIPTION",id:"description",level:3},{value:"OPTIONS",id:"options",level:3},{value:"<code>clone</code>",id:"clone",level:2},{value:"NAME",id:"name-1",level:3},{value:"SYNOPSIS",id:"synopsis-1",level:3},{value:"DESCRIPTION",id:"description-1",level:3},{value:"OPTIONS",id:"options-1",level:3},{value:"GIT URLS",id:"git-urls",level:3},{value:"EXAMPLES",id:"examples",level:3},{value:"<code>init</code>",id:"init",level:2},{value:"NAME",id:"name-2",level:3},{value:"SYNOPSIS",id:"synopsis-2",level:3},{value:"DESCRIPTION",id:"description-2",level:3},{value:"OPTIONS",id:"options-2",level:3},{value:"TEMPLATE DIRECTORY",id:"template-directory",level:3},{value:"EXAMPLES",id:"examples-1",level:3},{value:"<code>add</code>",id:"add",level:2},{value:"NAME",id:"name-3",level:3},{value:"SYNOPSIS",id:"synopsis-3",level:3},{value:"DESCRIPTION",id:"description-3",level:3},{value:"OPTIONS",id:"options-3",level:3},{value:"EXAMPLES",id:"examples-2",level:3},{value:"INTERACTIVE MODE",id:"interactive-mode",level:3},{value:"EDITING PATCHES",id:"editing-patches",level:3},{value:"SEE ALSO",id:"see-also",level:3},{value:"<code>mv</code>",id:"mv",level:2},{value:"NAME",id:"name-4",level:3},{value:"SYNOPSIS",id:"synopsis-4",level:3},{value:"DESCRIPTION",id:"description-4",level:3},{value:"OPTIONS",id:"options-4",level:3},{value:"SUBMODULES",id:"submodules",level:3},{value:"BUGS",id:"bugs",level:3},{value:"<code>restore</code>",id:"restore",level:2},{value:"NAME",id:"name-5",level:3},{value:"SYNOPSIS",id:"synopsis-5",level:3},{value:"DESCRIPTION",id:"description-5",level:3},{value:"OPTIONS",id:"options-5",level:3},{value:"EXAMPLES",id:"examples-3",level:3},{value:"SEE ALSO",id:"see-also-1",level:3},{value:"<code>rm</code>",id:"rm",level:2},{value:"NAME",id:"name-6",level:3},{value:"SYNOPSIS",id:"synopsis-6",level:3},{value:"DESCRIPTION",id:"description-6",level:3},{value:"OPTIONS",id:"options-6",level:3},{value:"REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM",id:"removing-files-that-have-disappeared-from-the-filesystem",level:3},{value:"SUBMODULES",id:"submodules-1",level:3},{value:"EXAMPLES",id:"examples-4",level:3},{value:"BUGS",id:"bugs-1",level:3},{value:"SEE ALSO",id:"see-also-2",level:3},{value:"<code>bisect</code>",id:"bisect",level:2},{value:"NAME",id:"name-7",level:3},{value:"SYNOPSIS",id:"synopsis-7",level:3},{value:"DESCRIPTION",id:"description-7",level:3},{value:"Basic bisect commands: start, bad, good",id:"basic-bisect-commands-start-bad-good",level:4},{value:"Bisect reset",id:"bisect-reset",level:4},{value:"Alternate terms",id:"alternate-terms",level:4},{value:"Bisect visualize/view",id:"bisect-visualizeview",level:4},{value:"Bisect log and bisect replay",id:"bisect-log-and-bisect-replay",level:4},{value:"Avoiding testing a commit",id:"avoiding-testing-a-commit",level:4},{value:"Bisect skip",id:"bisect-skip",level:4},{value:"Cutting down bisection by giving more parameters to bisect start",id:"cutting-down-bisection-by-giving-more-parameters-to-bisect-start",level:4},{value:"Bisect run",id:"bisect-run",level:4},{value:"OPTIONS",id:"options-7",level:3},{value:"EXAMPLES",id:"examples-5",level:3},{value:"Getting help",id:"getting-help",level:4},{value:"SEE ALSO",id:"see-also-3",level:3},{value:"<code>diff</code>",id:"diff",level:2},{value:"NAME",id:"name-8",level:3},{value:"SYNOPSIS",id:"synopsis-8",level:3},{value:"DESCRIPTION",id:"description-8",level:3},{value:"OPTIONS",id:"options-8",level:3},{value:"<code>grep</code>",id:"grep",level:2},{value:"<code>log</code>",id:"log",level:2},{value:"<code>show</code>",id:"show",level:2},{value:"<code>status</code>",id:"status",level:2},{value:"<code>branch</code>",id:"branch",level:2},{value:"<code>commit</code>",id:"commit",level:2},{value:"<code>merge</code>",id:"merge",level:2},{value:"<code>rebase</code>",id:"rebase",level:2},{value:"<code>reset</code>",id:"reset",level:2},{value:"<code>switch</code>",id:"switch",level:2},{value:"<code>tag</code>",id:"tag",level:2},{value:"<code>fetch</code>",id:"fetch",level:2},{value:"<code>pull</code>",id:"pull",level:2}],m={toc:h};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9"},"\u3010git\u3011\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#git"},(0,a.kt)("inlineCode",{parentName:"a"},"git")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"\u4f5c\u696d\u9818\u57df\u3092\u958b\u59cb\u3059\u308b"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#clone"},(0,a.kt)("inlineCode",{parentName:"a"},"clone"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#init"},(0,a.kt)("inlineCode",{parentName:"a"},"init"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"\u73fe\u5728\u306e\u5909\u66f4\u306b\u53d6\u308a\u7d44\u3080"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#add"},(0,a.kt)("inlineCode",{parentName:"a"},"add"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#mv"},(0,a.kt)("inlineCode",{parentName:"a"},"mv"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#restore"},(0,a.kt)("inlineCode",{parentName:"a"},"restore"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#rm"},(0,a.kt)("inlineCode",{parentName:"a"},"rm"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"\u6b74\u53f2\u3068\u72b6\u614b\u3092\u8abf\u3079\u308b"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bisect"},(0,a.kt)("inlineCode",{parentName:"a"},"bisect"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#diff"},(0,a.kt)("inlineCode",{parentName:"a"},"diff"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#grep"},(0,a.kt)("inlineCode",{parentName:"a"},"grep"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#log"},(0,a.kt)("inlineCode",{parentName:"a"},"log"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#show"},(0,a.kt)("inlineCode",{parentName:"a"},"show"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#status"},(0,a.kt)("inlineCode",{parentName:"a"},"status"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"\u5171\u901a\u306e\u6b74\u53f2\u3092\u6210\u9577\u3055\u305b\u3001\u30de\u30fc\u30af\u3057\u3001\u5fae\u8abf\u6574\u3059\u308b"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#branch"},(0,a.kt)("inlineCode",{parentName:"a"},"branch"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#commit"},(0,a.kt)("inlineCode",{parentName:"a"},"commit"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#merge"},(0,a.kt)("inlineCode",{parentName:"a"},"merge"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#rebase"},(0,a.kt)("inlineCode",{parentName:"a"},"rebase"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#reset"},(0,a.kt)("inlineCode",{parentName:"a"},"reset"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#switch"},(0,a.kt)("inlineCode",{parentName:"a"},"switch"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#tag"},(0,a.kt)("inlineCode",{parentName:"a"},"tag"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"\u30b3\u30e9\u30dc\u30ec\u30fc\u30b7\u30e7\u30f3"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#fetch"},(0,a.kt)("inlineCode",{parentName:"a"},"fetch"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#pull"},(0,a.kt)("inlineCode",{parentName:"a"},"pull"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#push"},(0,a.kt)("inlineCode",{parentName:"a"},"push")))))))),(0,a.kt)("h2",{id:"git"},(0,a.kt)("inlineCode",{parentName:"h2"},"git")),(0,a.kt)("h3",{id:"name"},"NAME"),(0,a.kt)("p",null,"git \u2014 \u611a\u304b\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u30c8\u30e9\u30c3\u30ab\u30fc"),(0,a.kt)("h3",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git [--version] [--help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--super-prefix=<path>] [--config-env <name>=<envvar>]\n    <command> [<args>]\n")),(0,a.kt)("h3",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,"Git \u306f\u3001\u9ad8\u901f\u3067\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a\u5206\u6563\u578b\u30ea\u30d3\u30b8\u30e7\u30f3\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3067\u3042\u308a\u3001\u9ad8\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c\u3068\u5185\u90e8\u3078\u306e\u30d5\u30eb\u30a2\u30af\u30bb\u30b9\u306e\u4e21\u65b9\u3092\u63d0\u4f9b\u3059\u308b\u975e\u5e38\u306b\u8c4a\u5bcc\u306a\u30b3\u30de\u30f3\u30c9\u30bb\u30c3\u30c8\u3092\u5099\u3048\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u958b\u59cb\u3059\u308b\u306b\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gittutorial"},"gittutorial[7]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6b21\u306b\u3001\u4fbf\u5229\u306a\u6700\u5c0f\u9650\u306e\u30b3\u30de\u30f3\u30c9\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/giteveryday"},"giteveryday[7]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Git ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/user-manual"},"\u30e6\u30fc\u30b6\u30fc\u30ba\u30de\u30cb\u30e5\u30a2\u30eb")," \u306b\u306f\u3001\u3088\u308a\u8a73\u7d30\u306a\u7d39\u4ecb\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u57fa\u672c\u7684\u306a\u6982\u5ff5\u3092\u30de\u30b9\u30bf\u30fc\u3057\u305f\u3089\u3001\u3053\u306e\u30da\u30fc\u30b8\u306b\u623b\u3063\u3066 Git \u304c\u63d0\u4f9b\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b66\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u300cgithelpcommand\u300d\u3092\u4f7f\u7528\u3057\u3066\u3001\u500b\u3005\u306e Git \u30b3\u30de\u30f3\u30c9\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitcli"},"gitcli[7]")," \u306e\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u306b\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30b3\u30de\u30f3\u30c9\u69cb\u6587\u306e\u6982\u8981\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u6700\u65b0\u306e Git \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u3001\u30cf\u30a4\u30d1\u30fc\u30ea\u30f3\u30af\u3055\u308c\u305f\u30b3\u30d4\u30fc\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git.github.io/htmldocs/git.html"},"https://git.github.io/htmldocs/git.html")," \u307e\u305f\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs"},"https://git-scm.com/docs")," \u3067\u8868\u793a\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--version")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"git")," \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5143\u3068\u306a\u3063\u305f Git \u30b9\u30a4\u30fc\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--help")),(0,a.kt)("p",{parentName:"li"},"\u6982\u8981\u3068\u6700\u3082\u4e00\u822c\u7684\u306b\u4f7f\u7528\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30b9\u30c8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u30aa\u30d7\u30b7\u30e7\u30f3 ",(0,a.kt)("inlineCode",{parentName:"p"},"--all")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-a")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4f7f\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u30b3\u30de\u30f3\u30c9\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002Git \u30b3\u30de\u30f3\u30c9\u306b\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u305d\u306e\u30b3\u30de\u30f3\u30c9\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u306e\u8868\u793a\u65b9\u6cd5\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u3001\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git --help ...")," \u306f\u5185\u90e8\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"git help ...")," \u306b\u5909\u63db\u3055\u308c\u308b\u305f\u3081\u3001\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-help"},"git-help[1]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-C <path>")),(0,a.kt)("p",{parentName:"li"},"\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u306f\u306a\u304f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<path>")," \u3067 git \u304c\u958b\u59cb\u3055\u308c\u305f\u304b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\u8907\u6570\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"-C")," \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5f8c\u7d9a\u306e\u975e\u7d76\u5bfe ",(0,a.kt)("inlineCode",{parentName:"p"},"-C <path>")," \u306f\u3001\u5148\u884c\u3059\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"-C <path>")," \u306b\u95a2\u9023\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<path>")," \u306f\u5b58\u5728\u3059\u308b\u304c\u7a7a\u306e\u5834\u5408\u3001\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},'-C ""')," \u306e\u5834\u5408\u3001\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-c <name>=<value>")),(0,a.kt)("p",{parentName:"li"},"\u69cb\u6210\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3057\u307e\u3059\u3002\u6307\u5b9a\u3055\u308c\u305f\u5024\u306f\u3001\u69cb\u6210\u30d5\u30a1\u30a4\u30eb\u306e\u5024\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<name>")," \u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git config"),"\uff08\u30c9\u30c3\u30c8\u3067\u533a\u5207\u3089\u308c\u305f\u30b5\u30d6\u30ad\u30fc\uff09\u3067\u30ea\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git -c foo.bar ..."),"\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"=")," \u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u8a31\u53ef\u3055\u308c\u3066\u304a\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar")," \u3092\u30d6\u30fc\u30eb\u306e true \u5024\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"[foo] bar")," \u304c\u69cb\u6210\u30d5\u30a1\u30a4\u30eb\u3067\u884c\u3046\u306e\u3068\u540c\u3058\u3088\u3046\u306b\uff09\u3002\u7b49\u3057\u3044\u304c\u7a7a\u306e\u5024\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"git -c foo.bar= ...")," \u306a\u3069\uff09\u3092\u542b\u3080\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"foo.bar")," \u306f\u7a7a\u306e\u6587\u5b57\u5217\u306b\u8a2d\u5b9a\u3055\u308c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git config --type=bool")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," \u306b\u5909\u63db\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--config-env=<name>=<envvar>")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-c <name>=<value>")," \u3068\u540c\u69d8\u306b\u3001\u69cb\u6210\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"<name>")," \u306b\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<envvar>")," \u306f\u3001\u5024\u3092\u53d6\u5f97\u3059\u308b\u74b0\u5883\u5909\u6570\u306e\u540d\u524d\u3067\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"-c")," \u3068\u306f\u7570\u306a\u308a\u3001\u5024\u3092\u7a7a\u306e\u6587\u5b57\u5217\u306b\u76f4\u63a5\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001\u74b0\u5883\u5909\u6570\u81ea\u4f53\u3092\u7a7a\u306e\u6587\u5b57\u5217\u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<envvar>")," \u304c\u74b0\u5883\u306b\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3067\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<envvar>")," \u306b\u306f\u7b49\u53f7\u3092\u542b\u3081\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<name>")," \u306b\u7b49\u53f7\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u3042\u3044\u307e\u3044\u3055\u3092\u907f\u3051\u308b\u305f\u3081\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001\u4e00\u6642\u7684\u306a\u69cb\u6210\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 git \u306b\u6e21\u3057\u305f\u3044\u304c\u3001\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"/proc/self/cmdline")," \u306a\u3069\uff09\u3092\u8aad\u307f\u53d6\u308c\u308b\u304c\u74b0\u5883\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"/proc")," \u306a\u3069\uff09\u306f\u8aad\u307f\u53d6\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b OS \u3067\u305d\u3046\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"/self/environment"),"\uff09\u3002\u3053\u306e\u52d5\u4f5c\u306f Linux \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u304c\u3001\u30b7\u30b9\u30c6\u30e0\u306b\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306b\u3088\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"http.extraHeader")," \u306e\u3088\u3046\u306b\u3001\u6a5f\u5bc6\u60c5\u5831\u304c\u5024\u306e\u4e00\u90e8\u3067\u3042\u308b\u3088\u3046\u306a\u5909\u6570\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u5f37\u5316\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"url.<base>.insteadOf")," \u306e\u3088\u3046\u306b\u3001\u6a5f\u5bc6\u60c5\u5831\u304c\u30ad\u30fc\u306e\u4e00\u90e8\u3067\u3042\u308b\u3088\u3046\u306a\u5909\u6570\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306f\u5f37\u5316\u3055\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--exec-path[=<path>]")),(0,a.kt)("p",{parentName:"li"},"Git \u306e\u30b3\u30a2\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u3078\u306e\u30d1\u30b9\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_EXEC_PATH")," \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001git \u306f\u73fe\u5728\u306e\u8a2d\u5b9a\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--html-path")),(0,a.kt)("p",{parentName:"li"},"Git \u306e HTML \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d1\u30b9\u3092\u3001\u672b\u5c3e\u306e\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u9664\u3044\u3066\u8868\u793a\u3057\u3001\u7d42\u4e86\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--man-path")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Git \u306e man \u30da\u30fc\u30b8\u306e manpath\uff08man(1) \u53c2\u7167\uff09\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--info-path")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Git \u3092\u8aac\u660e\u3059\u308b Info \u30d5\u30a1\u30a4\u30eb\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u30d1\u30b9\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--paginate")),(0,a.kt)("p",{parentName:"li"},"\u6a19\u6e96\u51fa\u529b\u304c\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u51fa\u529b\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"less")," (\u307e\u305f\u306f\u3001\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070 ",(0,a.kt)("inlineCode",{parentName:"p"},"$PAGER"),") \u306b\u30d1\u30a4\u30d7\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"pager.<cmd>")," \u306e\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\uff08\u5f8c\u8ff0\u306e\u300cConfiguration Mechanism\u300d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-P"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-pager")),(0,a.kt)("p",{parentName:"li"},"Git \u306e\u51fa\u529b\u3092\u30da\u30fc\u30b8\u30e3\u30fc\u306b\u30d1\u30a4\u30d7\u3057\u306a\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--git-dir=<path>")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\uff08\u300c.git\u300d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff09\u3078\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_DIR")," \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002\u7d76\u5bfe\u30d1\u30b9\u3067\u3082\u30ab\u30ec\u30f3\u30c8\u30ef\u30fc\u30ad\u30f3\u30b0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u306e\u76f8\u5bfe\u30d1\u30b9\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u3042\u308b\u3044\u306f\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_DIR"),"\uff09\u3092\u4f7f\u3063\u3066\u300c.git\u300d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u6240\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u300c.git\u300d\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6301\u3064\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u63a2\u305d\u3046\u3068\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u767a\u898b\uff08\u30ea\u30dd\u30b8\u30c8\u30ea\u3084\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3092\u767a\u898b\u3059\u308b\u65b9\u6cd5\uff09\u304c\u30aa\u30d5\u306b\u306a\u308a\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306b\u3044\u308b\u3053\u3068\u304c Git \u306b\u4f1d\u3048\u3089\u308c\u307e\u3059\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3044\u306a\u3044\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--work-tree=<path>")," \u30aa\u30d7\u30b7\u30e7\u30f3 (\u3042\u308b\u3044\u306f\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_WORK_TREE"),") \u3092\u4f7f\u3063\u3066\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u304c\u3069\u3053\u306b\u3042\u308b\u306e\u304b\u3092 Git \u306b\u4f1d\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3042\u305f\u304b\u3082 ",(0,a.kt)("inlineCode",{parentName:"p"},"<path>")," \u3067\u8d77\u52d5\u3057\u305f\u304b\u306e\u3088\u3046\u306b git \u3092\u5b9f\u884c\u3057\u305f\u3044\u3060\u3051\u306a\u3089\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git -C <path>")," \u3092\u4f7f\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--work-tree=<path>")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u3078\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u7d76\u5bfe\u30d1\u30b9\u304b\u3001\u3042\u308b\u3044\u306f\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u306e\u76f8\u5bfe\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_WORK_TREE")," \u3084\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.worktree")," \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3082\u5236\u5fa1\u3067\u304d\u307e\u3059 (\u3088\u308a\u8a73\u3057\u3044\u8aac\u660e\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"core.worktree")," \u3092\u53c2\u7167\u304f\u3060\u3055\u3044)\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--namespace=<path>")),(0,a.kt)("p",{parentName:"li"},"Git \u306e\u540d\u524d\u7a7a\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u8a73\u3057\u304f\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitnamespaces"},"gitnamespaces[7]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_NAMESPACE")," \u3092\u8a2d\u5b9a\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--super-prefix=<path>")),(0,a.kt)("p",{parentName:"li"},"\u73fe\u5728\u306f\u5185\u90e8\u4f7f\u7528\u306e\u307f\u3067\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4e0a\u4f4d\u304b\u3089\u305d\u306e\u30eb\u30fc\u30c8\u307e\u3067\u306e\u30d1\u30b9\u3092\u4e0e\u3048\u308b\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3001\u8d77\u52d5\u3057\u305f\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--bare")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30d9\u30a2\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_DIR")," \u74b0\u5883\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-replace-objects")),(0,a.kt)("p",{parentName:"li"},"Git \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7f6e\u63db\u306b refs \u7f6e\u63db\u3092\u4f7f\u7528\u3057\u307e\u305b\u3093\u3002\u8a73\u3057\u304f\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-replace"},"git-replace[1]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--literal-pathspecs")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30b9\u6307\u5b9a\u3092\u6587\u5b57\u901a\u308a\u306b\u6271\u3044\u307e\u3059 (\u3064\u307e\u308a\u3001\u30b0\u30ed\u30d6\u3084\u30d1\u30b9\u6307\u5b9a\u306e\u30de\u30b8\u30c3\u30af\u306f\u4f7f\u7528\u3057\u307e\u305b\u3093)\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_LITERAL_PATHSPECS")," \u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--glob-pathspecs")),(0,a.kt)("p",{parentName:"li"},'\u3059\u3079\u3066\u306e pathspec \u306b "glob" \u30de\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ',(0,a.kt)("inlineCode",{parentName:"p"},"GIT_GLOB_PATHSPECS")," \u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),' \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002\u500b\u3005\u306e\u30d1\u30b9\u6307\u5b9a\u3067\u30b0\u30ed\u30d6\u3092\u7121\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30d1\u30b9\u6307\u5b9a\u30de\u30b8\u30c3\u30af ":(literal)" \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002')))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--noglob-pathspecs")),(0,a.kt)("p",{parentName:"li"},'\u3059\u3079\u3066\u306e\u30d1\u30b9\u30b9\u30da\u30c3\u30af\u306b "literal" \u30de\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ',(0,a.kt)("inlineCode",{parentName:"p"},"GIT_NOGLOB_PATHSPECS")," \u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),' \u306b\u8a2d\u5b9a\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\u500b\u3005\u306e\u30d1\u30b9\u6307\u5b9a\u3067\u30b0\u30ed\u30d6\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u30d1\u30b9\u6307\u5b9a\u30de\u30b8\u30c3\u30af ":(glob)" \u3092\u4f7f\u3044\u307e\u3059\u3002')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--icase-pathspecs")),(0,a.kt)("p",{parentName:"li"},'\u3059\u3079\u3066\u306e\u30d1\u30b9\u30da\u30c3\u30af\u306b "icase" \u30de\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u74b0\u5883\u5909\u6570 ',(0,a.kt)("inlineCode",{parentName:"p"},"GIT_ICASE_PATHSPECS")," \u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-optional-locks")),(0,a.kt)("p",{parentName:"li"},"\u30ed\u30c3\u30af\u3092\u5fc5\u8981\u3068\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u64cd\u4f5c\u3092\u884c\u308f\u306a\u3044\u3002\u3053\u308c\u306f\u74b0\u5883\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_OPTIONAL_LOCKS")," \u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--list-cmds=group[,group...]")),(0,a.kt)("p",{parentName:"li"},"\u30b0\u30eb\u30fc\u30d7\u5225\u306b\u30b3\u30de\u30f3\u30c9\u3092\u4e00\u89a7\u8868\u793a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5185\u90e8/\u5b9f\u9a13\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3042\u308a\u3001\u5c06\u6765\u7684\u306b\u5909\u66f4\u307e\u305f\u306f\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059: ",(0,a.kt)("inlineCode",{parentName:"p"},"builtins"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"parseopt"),"\uff08parse-options \u3092\u4f7f\u7528\u3059\u308b builtin \u30b3\u30de\u30f3\u30c9\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"main"),"\uff08libexec \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u3059\u3079\u3066\u306e\u30b3\u30de\u30f3\u30c9\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"others"),"\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH")," \u306b\u3042\u308b git- \u63a5\u982d\u8f9e\u3092\u6301\u3064\u305d\u306e\u4ed6\u306e\u3059\u3079\u3066\u306e\u30b3\u30de\u30f3\u30c9\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"list-<category>"),"\uff08command-list.txt \u306e\u30ab\u30c6\u30b4\u30ea\u3092\u53c2\u7167\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"nohelpers"),"\uff08\u30d8\u30eb\u30d1\u30fc\u30b3\u30de\u30f3\u30c9\u3092\u9664\u5916\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"alias")," \u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"config"),"\uff08config \u5909\u6570 completion.commands \u304b\u3089\u30b3\u30de\u30f3\u30c9\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\uff09\u3002"))),(0,a.kt)("h2",{id:"clone"},(0,a.kt)("inlineCode",{parentName:"h2"},"clone")),(0,a.kt)("h3",{id:"name-1"},"NAME"),(0,a.kt)("p",null,"git-clone \u2014 \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u8907\u88fd\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-1"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone [--template=<template_directory>]\n          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n          [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n          [--dissociate] [--separate-git-dir <git dir>]\n          [--depth <depth>] [--[no-]single-branch] [--no-tags]\n          [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]\n          [--[no-]remote-submodules] [--jobs <n>] [--sparse]\n          [--filter=<filter>] [--] <repository>\n          [<directory>]\n")),(0,a.kt)("h3",{id:"description-1"},"DESCRIPTION"),(0,a.kt)("p",null,"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u8907\u88fd\u3057\u3001\n\u8907\u88fd\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u5185\u306e\u5404\u30d6\u30e9\u30f3\u30c1\u306e\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\uff08git branch --remotes \u3092\u4f7f\u7528\u3057\u3066\u8868\u793a\uff09\u3001\n\u8907\u88fd\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u73fe\u5728\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30d5\u30a9\u30fc\u30af\u3055\u308c\u305f\u521d\u671f\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u3066\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30af\u30ed\u30fc\u30f3\u4f5c\u6210\u5f8c\u3001\u5f15\u6570\u306e\u306a\u3044\u30d7\u30ec\u30fc\u30f3\u306a git fetch \u306f\u3001\u3059\u3079\u3066\u306e\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u3092\u66f4\u65b0\u3057\u3001\n\u5f15\u6570\u306e\u306a\u3044 git pull \u306f\u3001\u30ea\u30e2\u30fc\u30c8\u30de\u30b9\u30bf\u30fc\u30d6\u30e9\u30f3\u30c1\u3092\u73fe\u5728\u306e\u30de\u30b9\u30bf\u30fc\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059\n\uff08\u300c--single-branch\u300d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u308c\u306f\u5f53\u3066\u306f\u307e\u308a\u307e\u305b\u3093\uff1b\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u69cb\u6210\u306f\u3001refs/remotes/origin \u306e\u4e0b\u306b\u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\u3078\u306e\u53c2\u7167\u3092\u4f5c\u6210\u3057\u3001\nremote.origin.url \u304a\u3088\u3073 remote.origin.fetch \u69cb\u6210\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options-1"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-l"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--local")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u4e0a\u306b\u3042\u308b\u5834\u5408\u3001\u3053\u306e\u30d5\u30e9\u30b0\u306f\u901a\u5e38\u306e\u300cGit \u3092\u610f\u8b58\u3057\u305f\u300d\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3001HEAD \u3068 objects \u304a\u3088\u3073 refs \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u3059\u3079\u3066\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210\u3057\u3066\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},".git/objects/")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u53ef\u80fd\u306a\u9650\u308a\u30b9\u30da\u30fc\u30b9\u3092\u7bc0\u7d04\u3059\u308b\u305f\u3081\u306b\u30cf\u30fc\u30c9\u30ea\u30f3\u30af\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30ed\u30fc\u30ab\u30eb\u30d1\u30b9\uff08\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"/path/to/repo"),"\uff09\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3042\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--local")," \u306f\u57fa\u672c\u7684\u306b\u4f55\u3082\u3057\u307e\u305b\u3093\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u304c URL \u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30d5\u30e9\u30b0\u306f\u7121\u8996\u3055\u308c\u307e\u3059\uff08\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u6700\u9069\u5316\u3082\u4f7f\u7528\u3057\u307e\u305b\u3093\uff09\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--no-local")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"/path/to/repo")," \u3092\u6307\u5b9a\u3057\u305f\u3068\u304d\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u4e0a\u66f8\u304d\u3057\u3001\u4ee3\u308f\u308a\u306b\u901a\u5e38\u306e Git \u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"NOTE: \u3053\u306e\u64cd\u4f5c\u306f\u3001\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u540c\u6642\u306b\u5909\u66f4\u3057\u305f\u5834\u5408\u306b\u7af6\u5408\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"src")," \u3092\u5909\u66f4\u3057\u306a\u304c\u3089 ",(0,a.kt)("inlineCode",{parentName:"p"},"cp -r src dst")," \u3092\u5b9f\u884c\u3057\u305f\u5834\u5408\u3068\u540c\u69d8\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-hardlinks")),(0,a.kt)("p",{parentName:"li"},"\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u4e0a\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u306e\u30af\u30ed\u30fc\u30f3\u4f5c\u6210\u6642\u306b\u3001\u30cf\u30fc\u30c9\u30ea\u30f3\u30af\u3092\u4f7f\u308f\u305a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},".git/objects")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u53d6\u308b\u5834\u5408\u306a\u3069\u306b\u6709\u52b9\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-s"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--shared")),(0,a.kt)("p",{parentName:"li"},"\u8907\u88fd\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u4e0a\u306b\u3042\u308b\u5834\u5408\u3001\u30cf\u30fc\u30c9\u30ea\u30f3\u30af\u3092\u4f7f\u3046\u4ee3\u308f\u308a\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},".git/objects/info/alternates")," \u3092\u81ea\u52d5\u7684\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u8907\u88fd\u5143\u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3057\u307e\u3059\u3002\u8907\u88fd\u5143\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3001\u6700\u521d\u306f\u81ea\u5206\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308a\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},"NOTE: \u3053\u308c\u306f\u5371\u967a\u306a\u64cd\u4f5c\u306a\u306e\u3067\u3001\u7406\u89e3\u3067\u304d\u306a\u3044\u3046\u3061\u306f\u4f7f\u308f\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\u3057\u305f\u5f8c\u3001\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30d6\u30e9\u30f3\u30c1\u3092\u524a\u9664\u3057\u305f\u308a\uff08\u3042\u308b\u3044\u306f\u65e2\u5b58\u306e\u30b3\u30df\u30c3\u30c8\u3092\u53c2\u7167\u3057\u306a\u304f\u306a\u308b\u3088\u3046\u306a Git \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u305f\u308a\uff09\u3059\u308b\u3068\u3001\u3044\u304f\u3064\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u53c2\u7167\u3055\u308c\u306a\u304f\u306a\u308b\uff08\u3042\u308b\u3044\u306f\u3076\u3089\u4e0b\u304c\u308b\uff09\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git maintenance run --auto")," \u3092\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3059\u901a\u5e38\u306e Git \u64cd\u4f5c (",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," \u306a\u3069) \u3067\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-maintenance"},"git-maintenance[1]")," \u3092\u53c2\u7167)\u3002\u3053\u308c\u3089\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u524a\u9664\u3055\u308c\u305f\u5f8c\u306b\u30af\u30ed\u30fc\u30f3\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u53c2\u7167\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u30af\u30ed\u30fc\u30f3\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u58ca\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u306a\u304a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--shared")," \u3067\u30af\u30ed\u30fc\u30f3\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"--local")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u305b\u305a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git repack")," \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30af\u30ed\u30fc\u30f3\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30c3\u30af\u306b\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3057\u307e\u3044\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"clone --shared")," \u3067\u5f97\u3089\u308c\u308b\u30c7\u30a3\u30b9\u30af\u30b9\u30da\u30fc\u30b9\u306e\u7bc0\u7d04\u52b9\u679c\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001git gc \u3092\u5b9f\u884c\u3059\u308c\u3070\u5b89\u5168\u3067\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git gc")," \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"--local")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--shared")," \u3067\u30af\u30ed\u30fc\u30f3\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u3078\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u65ad\u3061\u5207\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u5358\u7d14\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git repack -a")," \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30af\u30ed\u30fc\u30f3\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30c3\u30af\u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--reference[-if-able] <repository>")),(0,a.kt)("p",{parentName:"li"},"\u53c2\u7167\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u306b\u3042\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},".git/objects/info/alternates")," \u3092\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3057\u3066\u3001\u53c2\u7167\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u65e2\u5b58\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4ee3\u66ff\u54c1\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u3001\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30b3\u30d4\u30fc\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6570\u304c\u5c11\u306a\u304f\u306a\u308a\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30ed\u30fc\u30ab\u30eb\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30b3\u30b9\u30c8\u3092\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--reference-if-able")," \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u5b58\u5728\u3057\u306a\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u30af\u30ed\u30fc\u30f3\u3092\u4e2d\u6b62\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u8b66\u544a\u3092\u8868\u793a\u3057\u3066\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"NOTE: ",(0,a.kt)("inlineCode",{parentName:"p"},"--shared")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e NOTE\u3001\u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"--dissociate")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e NOTE \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--dissociate")),(0,a.kt)("p",{parentName:"li"},"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8ee2\u9001\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"--reference")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3055\u308c\u305f\u53c2\u7167\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u306e\u307f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u501f\u308a\u3001\u501f\u308a\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5fc5\u8981\u306a\u30ed\u30fc\u30ab\u30eb\u30b3\u30d4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30af\u30ed\u30fc\u30f3\u4f5c\u6210\u5f8c\u306b\u501f\u308a\u5165\u308c\u3092\u505c\u6b62\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u3059\u3067\u306b\u4ed6\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u501f\u7528\u3057\u3066\u3044\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30ed\u30fc\u30ab\u30eb\u306b\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306b\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u540c\u3058\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u501f\u7528\u3057\u307e\u3059\u304c\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u501f\u7528\u3092\u505c\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")),(0,a.kt)("p",{parentName:"li"},"\u9759\u304b\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\u9032\u6357\u72b6\u6cc1\u304c\u6a19\u6e96\u30a8\u30e9\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5831\u544a\u3055\u308c\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-v"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose")),(0,a.kt)("p",{parentName:"li"},"\u5197\u9577\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\u6a19\u6e96\u30a8\u30e9\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u3078\u306e\u9032\u6357\u72b6\u6cc1\u306e\u5831\u544a\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--progress")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u9032\u6357\u72b6\u6cc1\u304c\u5831\u544a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306f\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u5411\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3067\u3082\u3001\u30d7\u30ed\u30b0\u30ec\u30b9\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u5f37\u5236\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--server-option=<option>")),(0,a.kt)("p",{parentName:"li"},"\u30d7\u30ed\u30c8\u30b3\u30eb \u30d0\u30fc\u30b8\u30e7\u30f3 2 \u3067\u901a\u4fe1\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u6307\u5b9a\u3057\u305f\u6587\u5b57\u5217\u3092\u30b5\u30fc\u30d0\u306b\u9001\u4fe1\u3057\u307e\u3059\u3002\u6307\u5b9a\u3059\u308b\u6587\u5b57\u5217\u306b\u306f\u3001NUL\u307e\u305f\u306fLF\u3092\u542b\u3081\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u672a\u77e5\u306e\u3082\u306e\u3082\u542b\u3081\u3066\u3001\u30b5\u30fc\u30d0\u30fc\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6271\u3044\u306f\u30b5\u30fc\u30d0\u30fc\u3054\u3068\u306b\u7570\u306a\u308a\u307e\u3059\u3002\u8907\u6570\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--server-option=<option>")," \u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u9806\u306b\u3001\u3059\u3079\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u76f8\u624b\u5074\u306b\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-checkout")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u304c\u5b8c\u4e86\u3057\u3066\u3082\u3001HEAD \u306e\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3092\u884c\u3044\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--[no-]reject-shallow")),(0,a.kt)("p",{parentName:"li"},"\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u30b7\u30e3\u30ed\u30fc\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5834\u5408\u306b\u5931\u6557\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"clone.rejectShallow")," \u8a2d\u5b9a\u5909\u6570\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--bare")),(0,a.kt)("p",{parentName:"li"},"\u30d9\u30a2 Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<directory>")," \u3092\u4f5c\u6210\u3057\u3066\u7ba1\u7406\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"<directory>/.git")," \u306b\u7f6e\u304f\u306e\u3067\u306f\u306a\u304f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<directory>")," \u81ea\u4f53\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR")," \u306b\u3059\u308b\u306e\u3067\u3059\u3002\u3053\u308c\u306f\u660e\u3089\u304b\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-checkout")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3059\u308b\u5834\u6240\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u307e\u305f\u3001\u30ea\u30e2\u30fc\u30c8\u306e\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"refs/remotes/origin/")," \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001\u5bfe\u5fdc\u3059\u308b\u30ed\u30fc\u30ab\u30eb\u306e\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\u306b\u76f4\u63a5\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u3082\u95a2\u9023\u3059\u308b\u8a2d\u5b9a\u5909\u6570\u3082\u4f5c\u6210\u3055\u308c\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--sparse")),(0,a.kt)("p",{parentName:"li"},"sparse-checkout \u30d5\u30a1\u30a4\u30eb\u3092\u521d\u671f\u5316\u3057\u3066\u3001\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30eb\u30fc\u30c8\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u59cb\u307e\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002sparse-checkout \u30d5\u30a1\u30a4\u30eb\u306f\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5897\u3084\u3059\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--filter=<filter-spec>")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30fc\u30b7\u30e3\u30eb\u30af\u30ed\u30fc\u30f3\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a3\u30eb\u30bf\u306b\u5f93\u3063\u3066\u3001\u5230\u9054\u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u9001\u4fe1\u3059\u308b\u3088\u3046\u306b\u30b5\u30fc\u30d0\u306b\u8981\u6c42\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--filter")," \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6307\u5b9a\u3055\u308c\u305f",(0,a.kt)("inlineCode",{parentName:"p"},"<filter-spec>")," \u304c\u30d1\u30fc\u30b7\u30e3\u30eb \u30af\u30ed\u30fc\u30f3\u30d5\u30a3\u30eb\u30bf\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--filter=blob:none")," \u306f\u3001Git \u304c\u5fc5\u8981\u3068\u3059\u308b\u307e\u3067\u3001\u3059\u3079\u3066\u306e\u30d6\u30ed\u30d6\uff08\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff09\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\u307e\u305f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--filter=blob:limit=<size>")," \u3068\u3059\u308b\u3068\u3001\u5c11\u306a\u304f\u3068\u3082 ",(0,a.kt)("inlineCode",{parentName:"p"},"<size>")," \u4ee5\u4e0a\u306e\u30b5\u30a4\u30ba\u306e\u30d6\u30ed\u30d6\u3092\u3059\u3079\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u306e\u4ed5\u69d8\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-rev-list"},"git-rev-list[1]")," \u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--filter")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--mirror")),(0,a.kt)("p",{parentName:"li"},"\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30df\u30e9\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--bare")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--bare")," \u3068\u6bd4\u3079\u3066 ",(0,a.kt)("inlineCode",{parentName:"p"},"--mirror")," \u306f\u3001\u30bd\u30fc\u30b9\u306e\u30ed\u30fc\u30ab\u30eb\u30d6\u30e9\u30f3\u30c1\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30ed\u30fc\u30ab\u30eb\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30c3\u30d7\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u3059\u3079\u3066\u306e refs (\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u3084\u30ce\u30fc\u30c8\u306a\u3069\u3092\u542b\u3080) \u3092\u30de\u30c3\u30d7\u3057\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"git remote update"),"\u306b\u3088\u3063\u3066\u3053\u308c\u3089\u306e refs \u304c\u3059\u3079\u3066\u4e0a\u66f8\u304d\u3055\u308c\u308b\u3088\u3046\u306b refspec \u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-o <name>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--origin <name>")),(0,a.kt)("p",{parentName:"li"},"\u4e0a\u6d41\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u8ffd\u8de1\u3059\u308b\u305f\u3081\u306b\u30ea\u30e2\u30fc\u30c8\u540d ",(0,a.kt)("inlineCode",{parentName:"p"},"origin")," \u3092\u4f7f\u3046\u4ee3\u308f\u308a\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<name>")," \u3092\u4f7f\u3044\u307e\u3059\u3002\u8a2d\u5b9a\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"clone.defaultRemoteName")," \u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-b <name>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--branch <name>")),(0,a.kt)("p",{parentName:"li"},"\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u305f HEAD \u3092\u3001\u30af\u30ed\u30fc\u30f3\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e HEAD \u304c\u6307\u3059\u30d6\u30e9\u30f3\u30c1\u306b\u5411\u3051\u308b\u306e\u3067\u306f\u306a\u304f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<name>")," \u30d6\u30e9\u30f3\u30c1\u306b\u5411\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30d9\u30a2\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u306a\u3044\u5834\u5408\u3001\u3053\u308c\u304c\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3055\u308c\u308b\u30d6\u30e9\u30f3\u30c1\u306b\u306a\u308a\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--branch")," \u306f\u30bf\u30b0\u3092\u53d6\u308a\u3001\u7d50\u679c\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u305d\u306e\u30b3\u30df\u30c3\u30c8\u3067 HEAD \u3092\u30c7\u30bf\u30c3\u30c1\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-u <upload-pack>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--upload-pack <upload-pack>")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306bssh\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u3001\u76f8\u624b\u5074\u3067\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u4ee5\u5916\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--template=<template_directory>")),(0,a.kt)("p",{parentName:"li"},"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3057\u307e\u3059 (",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-init"},"git-init[1]"),' \u306e "TEMPLATE DIRECTORY" \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167)\u3002')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-c <key>=<value>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--config <key>=<value>")),(0,a.kt)("p",{parentName:"li"},"\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u8a2d\u5b9a\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u521d\u671f\u5316\u3055\u308c\u305f\u76f4\u5f8c\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30ea\u30e2\u30fc\u30c8\u306e\u5c65\u6b74\u304c\u53d6\u5f97\u3055\u308c\u305f\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3055\u308c\u305f\u308a\u3059\u308b\u524d\u306b\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\u30ad\u30fc\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-init"},"git-config[1]")," \u3067\u671f\u5f85\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u5f62\u5f0f\u3067\u3059 (\u4f8b: ",(0,a.kt)("inlineCode",{parentName:"p"},"core.eol=true"),")\u3002\u540c\u3058\u30ad\u30fc\u306b\u8907\u6570\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u5024\u304c\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305f\u3068\u3048\u3070\u30aa\u30ea\u30b8\u30f3\u306e\u30ea\u30e2\u30fc\u30c8\u306b\u8ffd\u52a0\u306e\u30d5\u30a7\u30c3\u30c1 refspec \u3092\u8ffd\u52a0\u3057\u3066\u3082\u5b89\u5168\u306b\u306a\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u73fe\u5728\u306e\u5b9f\u88c5\u306e\u5236\u9650\u306b\u3088\u308a\u3001\u4e00\u90e8\u306e\u8a2d\u5b9a\u5909\u6570\u306f\u6700\u521d\u306e\u30d5\u30a7\u30c3\u30c1\u3068\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u304c\u7d42\u308f\u308b\u307e\u3067\u6709\u52b9\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u53cd\u6620\u3055\u308c\u306a\u3044\u8a2d\u5b9a\u5909\u6570\u3068\u3057\u3066\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"remote.<name>.mirror")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"remote.<name>.tagOpt")," \u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b\u3001\u5bfe\u5fdc\u3059\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"--mirror")," \u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-tags")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--depth <depth>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30b3\u30df\u30c3\u30c8\u306b\u5207\u308a\u8a70\u3081\u3089\u308c\u305f\u5c65\u6b74\u3092\u6301\u3064\u3001\u6d45\u3044\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--no-single-branch")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--single-branch")," \u3092\u6697\u793a\u3057\u3001\u3059\u3079\u3066\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u4ed8\u8fd1\u306e\u5c65\u6b74\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6d45\u304f\u30af\u30ed\u30fc\u30f3\u3057\u305f\u3044\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--shallow-submodules")," \u3082\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--shallow-since=<date>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u4ee5\u964d\u306e\u5c65\u6b74\u3092\u6301\u3064\u6d45\u3044\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--shallow-exclude=<revision>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u3084\u30bf\u30b0\u304b\u3089\u5230\u9054\u53ef\u80fd\u306a\u30b3\u30df\u30c3\u30c8\u3092\u9664\u3044\u305f\u5c65\u6b74\u3092\u6301\u3064\u30b7\u30e3\u30ed\u30fc\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--[no-]single-branch")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--branch")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u3001\u307e\u305f\u306f\u30ea\u30e2\u30fc\u30c8\u306e HEAD \u304c\u6307\u3057\u3066\u3044\u308b\u30d7\u30e9\u30a4\u30de\u30ea\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u306b\u81f3\u308b\u307e\u3067\u306e\u5c65\u6b74\u306e\u307f\u3092\u30af\u30ed\u30fc\u30f3\u3057\u307e\u3059\u3002\u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u3055\u3089\u306b\u30d5\u30a7\u30c3\u30c1\u3059\u308b\u3068\u3001\u6700\u521d\u306e\u30af\u30ed\u30fc\u30f3\u4f5c\u6210\u6642\u306b\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f7f\u7528\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u306e\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u306e\u307f\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--single-branch")," \u30af\u30ed\u30fc\u30f3\u304c\u4f5c\u6210\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u30ea\u30e2\u30fc\u30c8\u306e HEAD \u304c\u3069\u306e\u30d6\u30e9\u30f3\u30c1\u3082\u6307\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u306f\u4f5c\u6210\u3055\u308c\u307e\u305b\u3093\u3002"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-tags")),(0,a.kt)("p",{parentName:"li"},"\u30bf\u30b0\u306e\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u305b\u305a\u3001\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"remote.<remote>.tagOpt=--no-tags")," \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u4eca\u5f8c\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"git fetch")," \u306e\u64cd\u4f5c\u3067\u30bf\u30b0\u3092\u8ffd\u3044\u304b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u660e\u793a\u7684\u306b\u30bf\u30b0\u3092\u53d6\u5f97\u3057\u3066\u3082\u52d5\u4f5c\u3057\u307e\u3059 (",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-fetch"},"git-fetch[1]")," \u3092\u53c2\u7167\u304f\u3060\u3055\u3044)\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--single-branch")," \u3068\u4e00\u7dd2\u306b\u4f7f\u3046\u3068\u3001\u30af\u30ed\u30fc\u30f3\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u4ee5\u5916\u306e\u53c2\u7167\u3092\u6301\u305f\u306a\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4f8b\u3048\u3070\u3042\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30d6\u30e9\u30f3\u30c1\u306e\u6700\u5c0f\u9650\u306e\u30af\u30ed\u30fc\u30f3\u3092\u7dad\u6301\u3057\u3066\u691c\u7d22\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306a\u3069\u306b\u4fbf\u5229\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--recurse-submodules[=<pathspec>]")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u304c\u4f5c\u6210\u3055\u308c\u305f\u5f8c\u3001\u63d0\u4f9b\u3055\u308c\u305f pathspec \u306b\u57fa\u3065\u3044\u3066\u3001\u305d\u306e\u4e2d\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u521d\u671f\u5316\u3057\u3001\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002pathspec \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u521d\u671f\u5316\u3055\u308c\u3001\u30af\u30ed\u30fc\u30f3\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u8907\u6570\u306e\u30a8\u30f3\u30c8\u30ea\u304b\u3089\u306a\u308b pathspec \u306b\u5bfe\u3057\u3066\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u8907\u88fd\u3055\u308c\u305f\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"submodule.active"),' \u306b\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d1\u30b9\u6307\u5b9a\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u304c\u3001"." (\u3059\u3079\u3066\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u610f\u5473\u3059\u308b) \u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002'),(0,a.kt)("p",{parentName:"li"},"\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u521d\u671f\u5316\u3055\u308c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067\u30af\u30ed\u30fc\u30f3\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30af\u30ed\u30fc\u30f3\u304c\u7d42\u4e86\u3057\u305f\u76f4\u5f8c\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git submodule update --init --recursive <pathspec>")," \u3092\u5b9f\u884c\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30af\u30ed\u30fc\u30f3\u3055\u308c\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u306b worktree/checkout \u304c\u306a\u3044\u5834\u5408 (\u3064\u307e\u308a ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-checkout"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--bare"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--mirror")," \u306e\u3044\u305a\u308c\u304b\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408) \u306b\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--[no-]shallow-submodules")),(0,a.kt)("p",{parentName:"li"},"\u8907\u88fd\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u6df1\u3055\u304c1\u306e\u6d45\u3044\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--[no-]remote-submodules")),(0,a.kt)("p",{parentName:"li"},"\u8907\u88fd\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b SHA-1 \u3067\u306f\u306a\u304f\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u306e\u72b6\u614b\u3092\u4f7f\u3063\u3066\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git submodule update")," \u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"--remote")," \u3092\u6e21\u3059\u306e\u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--separate-git-dir=<git dir>")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u672c\u6765\u3042\u308b\u3079\u304d\u5834\u6240\u306b\u7f6e\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u30af\u30ed\u30fc\u30f3\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u304d\u3001\u305d\u3053\u306b\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u4f9d\u5b58\u3057\u306a\u3044Git\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u5207\u308a\u96e2\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-j <n>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--jobs <n>")),(0,a.kt)("p",{parentName:"li"},"\u4e00\u5ea6\u306b\u53d6\u5f97\u3059\u308b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"submodule.fetchJobs")," \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<repository>")),(0,a.kt)("p",{parentName:"li"},"\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u30ea\u30dd\u30b8\u30c8\u30ea(\u30ea\u30e2\u30fc\u30c8\u306e\u5834\u5408\u3082\u3042\u308a\u307e\u3059)\u3067\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6307\u5b9a\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3001\u4e0b\u8a18\u306e ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-clone#URLS"},"GIT URLS")," \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<directory>")),(0,a.kt)("p",{parentName:"li"},'\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3059\u308b\u65b0\u3057\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u540d\u524d\u3067\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u660e\u793a\u7684\u306b\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u30bd\u30fc\u30b9\u30ea\u30dd\u30b8\u30c8\u30ea\u306e "humanish" \u90e8\u5206\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059 (',(0,a.kt)("inlineCode",{parentName:"p"},"repo")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"/path/to/repo.git"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"host.xz:foo/.git"),")\u3002\u65e2\u5b58\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u306e\u30af\u30ed\u30fc\u30f3\u4f5c\u6210\u306f\u3001\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7a7a\u306e\u5834\u5408\u306e\u307f\u53ef\u80fd\u3067\u3059\u3002"))),(0,a.kt)("h3",{id:"git-urls"},"GIT URLS"),(0,a.kt)("p",null,"\u4e00\u822c\u306b\u3001URL \u306b\u306f\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30ea\u30e2\u30fc\u30c8\u30b5\u30fc\u30d0\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3001\u305d\u3057\u3066\u30ea\u30dd\u30b8\u30c8\u30ea\u3078\u306e\u30d1\u30b9\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u30fb\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u3088\u3063\u3066\u306f\u3001\u3053\u308c\u3089\u306e\u60c5\u5831\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,"Git \u306f\u3001ssh\u3001git\u3001http\u3001https \u306e\u5404\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059 (\u3055\u3089\u306b\u3001ftp \u3084 ftps \u3082\u30d5\u30a7\u30c3\u30c1\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u975e\u52b9\u7387\u3067\u975e\u63a8\u5968\u3067\u3059\u3002\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044)\u3002"),(0,a.kt)("p",null,"\u30cd\u30a4\u30c6\u30a3\u30d6\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8 (\u3064\u307e\u308a git:// URL) \u306f\u8a8d\u8a3c\u3092\u884c\u308f\u306a\u3044\u306e\u3067\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u78ba\u4fdd\u3055\u308c\u3066\u3044\u306a\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306e\u4f7f\u7528\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002"),(0,a.kt)("p",null,"\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6587\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ssh://[user@]host.xz[:port]/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git://host.xz[:port]/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"http[s]://host.xz[:port]/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ftp[s]://host.xz[:port]/path/to/repo.git/")))),(0,a.kt)("p",null,"scp \u306b\u4f3c\u305f\u5225\u306e\u69cb\u6587\u3092 ssh \u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[user@]host.xz:path/to/repo.git/"))),(0,a.kt)("p",null,"\u3053\u306e\u69cb\u6587\u306f\u3001\u6700\u521d\u306e\u30b3\u30ed\u30f3\u306e\u524d\u306b\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u306a\u3044\u5834\u5408\u306b\u306e\u307f\u8a8d\u8b58\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30b3\u30ed\u30f3\u3092\u542b\u3093\u3060\u30ed\u30fc\u30ab\u30eb\u30d1\u30b9\u3092\u533a\u5225\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u30ed\u30fc\u30ab\u30eb\u30d1\u30b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"foo:bar")," \u3092\u7d76\u5bfe\u30d1\u30b9\u3067\u6307\u5b9a\u3057\u305f\u308a ",(0,a.kt)("inlineCode",{parentName:"p"},"./foo:bar")," \u3068\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3067\u3001ssh \u306e url \u3068\u8aa4\u89e3\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"ssh \u304a\u3088\u3073 git \u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u3001\u3055\u3089\u306b ~username \u306e\u5c55\u958b\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git://host.xz[:port]/~[user]/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"[user@]host.xz:/~[user]/path/to/repo.git/")))),(0,a.kt)("p",null,"\u307e\u305f\u3001Git \u304c\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u6587\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"/path/to/repo.git/"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"file:///path/to/repo.git/")))),(0,a.kt)("p",null,"\u3053\u306e\u3075\u305f\u3064\u306e\u69cb\u6587\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u524d\u8005\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--local")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git push")," \u3067\u306f\u306a\u304f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git clone"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git fetch"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git pull")," \u3067\u3082\u9069\u5207\u306a\u30d0\u30f3\u30c9\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-bundle"},"git-bundle[1]"),"\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",null,"Git \u304c\u7279\u5b9a\u306e\u30c8\u30e9\u30f3\u30b9\u30dd\u30fc\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u6271\u3044\u65b9\u3092\u77e5\u3089\u306a\u3044\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"remote<transport>")," \u3068\u3044\u3046\u30ea\u30e2\u30fc\u30c8\u30d8\u30eb\u30d1\u30fc\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u4f7f\u304a\u3046\u3068\u3057\u307e\u3059\u3002\u30ea\u30e2\u30fc\u30c8\u30d8\u30eb\u30d1\u30fc\u3092\u660e\u793a\u7684\u306b\u8981\u6c42\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u69cb\u6587\u3092\u4f7f\u3044\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<transport>::<address>"))),(0,a.kt)("p",null,"\u3053\u3053\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"<address>")," \u306b\u306f\u3001\u30d1\u30b9\u3001\u30b5\u30fc\u30d0\u30fc\u3068\u30d1\u30b9\u3001\u3042\u308b\u3044\u306f\u7279\u5b9a\u306e\u30ea\u30e2\u30fc\u30c8\u30d8\u30eb\u30d1\u30fc\u304c\u8a8d\u8b58\u3059\u308b\u4efb\u610f\u306e URL \u306e\u3088\u3046\u306a\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u8a73\u7d30\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitremote-helpers"},"gitremote-helpers[7]")," \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",null,"\u4f3c\u305f\u3088\u3046\u306a\u540d\u524d\u306e\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u5927\u91cf\u306b\u3042\u3063\u3066\u3001\u305d\u308c\u3089\u306b\u5bfe\u3057\u3066\u5225\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u4f7f\u3044\u305f\u3044 (\u4f7f\u7528\u3059\u308b URL \u3092\u52d5\u4f5c\u3059\u308b URL \u306b\u66f8\u304d\u63db\u3048\u308b\u3088\u3046\u306a) \u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306e\u8a2d\u5b9a\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[url "<actual url base>"]\n        insteadOf = <other url base>\n')),(0,a.kt)("p",null,"\u305f\u3068\u3048\u3070\u3001\u3053\u308c\u3067\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[url "git://git.host.xz/"]\n        insteadOf = host.xz:/path/to/\n        insteadOf = work:\n')),(0,a.kt)("p",null,'"work:repo.git" \u3084 "host.xz:/path/to/repo.git" \u306e\u3088\u3046\u306aURL\u306f\u3001"git://git.host.xz/repo.git" \u3068\u3044\u3046 URL \u3092\u53d7\u3051\u53d6\u308b\u3059\u3079\u3066\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u66f8\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002'),(0,a.kt)("p",null,"\u30d7\u30c3\u30b7\u30e5\u6642\u306e\u307f\u306bURL\u3092\u66f8\u304d\u63db\u3048\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u5f0f\u306e\u8a2d\u5b9a\u90e8\u5206\u3092\u4f5c\u308a\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[url "<actual url base>"]\n        pushInsteadOf = <other url base>\n')),(0,a.kt)("p",null,"\u4f8b\u3048\u3070\u3001\u3053\u308c\u3067\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[url "ssh://example.org/"]\n        pushInsteadOf = git://example.org/\n')),(0,a.kt)("p",null,'\u306e\u3088\u3046\u306aURL\u306f\u3001\u30d7\u30c3\u30b7\u30e5\u6642\u306b\u306f "git://example.org/path/to/repo.git "\u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u30d7\u30eb\u6642\u306b\u306f\u5143\u306e URL \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002'),(0,a.kt)("h3",{id:"examples"},"EXAMPLES"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4e0a\u6d41\u304b\u3089\u306e\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n$ cd my-linux\n$ make\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u3001\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u305b\u305a\u306b\u501f\u308a\u3066\u304f\u308b\u30ed\u30fc\u30ab\u30eb\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u308a\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ git clone -l -s -n . ../copy\n$ cd ../copy\n$ git show-branch\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65e2\u5b58\u306e\u30ed\u30fc\u30ab\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u501f\u7528\u3057\u306a\u304c\u3089\u3001\u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ git clone --reference /git/linux.git \\\n        git://git.kernel.org/pub/scm/.../linux.git \\\n        my-linux\n$ cd my-linux\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u3092\u516c\u958b\u3059\u308b\u305f\u3081\u306e\u30d9\u30a2\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"$ git clone --bare -l /home/proj/.git /pub/scm/proj.git\n")))),(0,a.kt)("h2",{id:"init"},(0,a.kt)("inlineCode",{parentName:"h2"},"init")),(0,a.kt)("h3",{id:"name-2"},"NAME"),(0,a.kt)("p",null,"git-init \u2014 \u7a7a\u306e Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u304b\u3001\u65e2\u5b58\u306e Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u518d\u521d\u671f\u5316\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-2"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git init [-q | --quiet] [--bare] [--template=<template_directory>]\n          [--separate-git-dir <git dir>] [--object-format=<format>]\n          [-b <branch-name> | --initial-branch=<branch-name>]\n          [--shared[=<permissions>]] [directory]\n")),(0,a.kt)("h3",{id:"description-2"},"DESCRIPTION"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u7a7a\u306e Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u57fa\u672c\u7684\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"object"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"refs/heads"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"refs/tags"),"\u3001\u304a\u3088\u3073\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u542b\u3080 ",(0,a.kt)("inlineCode",{parentName:"p"},".git")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3059\u3002\u30b3\u30df\u30c3\u30c8\u306e\u306a\u3044\u521d\u671f\u30d6\u30e9\u30f3\u30c1\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff08\u540d\u524d\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--initial-branch")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR")," \u74b0\u5883\u5909\u6570\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d9\u30fc\u30b9\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"./.git")," \u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3059\u308b\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_OBJECT_DIRECTORY")," \u74b0\u5883\u5909\u6570\u3092\u4ecb\u3057\u3066\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001sha1 \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u305d\u306e\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR/objects")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u65e2\u5b58\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"git init")," \u3092\u5b9f\u884c\u3057\u3066\u3082\u5b89\u5168\u3067\u3059\u3002\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git init")," \u3092\u518d\u5b9f\u884c\u3059\u308b\u4e3b\u306a\u7406\u7531\u306f\u3001\u65b0\u3057\u304f\u8ffd\u52a0\u3055\u308c\u305f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\uff08\u307e\u305f\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--separate-git-dir")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5225\u306e\u5834\u6240\u306b\u79fb\u52d5\u3057\u307e\u3059\uff09\u3002"),(0,a.kt)("h3",{id:"options-2"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")),(0,a.kt)("p",{parentName:"li"},"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u307f\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u4ed6\u306e\u3059\u3079\u3066\u306e\u51fa\u529b\u306f\u6291\u5236\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--bare")),(0,a.kt)("p",{parentName:"li"},"\u30d9\u30a2\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"GIT_DIR")," \u74b0\u5883\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u73fe\u5728\u306e\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--object-format=<format>")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\uff08\u30cf\u30c3\u30b7\u30e5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u6709\u52b9\u306a\u5024\u306f ",(0,a.kt)("em",{parentName:"p"},"sha1")," \u3068\uff08\u6709\u52b9\u306a\u5834\u5408\uff09",(0,a.kt)("em",{parentName:"p"},"sha256")," \u3067\u3059\u3002",(0,a.kt)("em",{parentName:"p"},"sha1")," \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5b9f\u9a13\u7684\u306a\u3082\u306e\u3067\u3059\uff01SHA-256 \u306e\u30b5\u30dd\u30fc\u30c8\u306f\u5b9f\u9a13\u7684\u306a\u3082\u306e\u3067\u3001\u307e\u3060\u521d\u671f\u6bb5\u968e\u306b\u3042\u308a\u307e\u3059\u3002SHA-256 \u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3001\u4e00\u822c\u306b\u3001\u300c\u901a\u5e38\u306e\u300dSHA-1 \u30ea\u30dd\u30b8\u30c8\u30ea\u3068\u4f5c\u696d\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305f\u3068\u3048\u3070\u3001SHA-256 \u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u95a2\u9023\u3059\u308b Git \u5185\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u3001\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u306a\u3044\u65b9\u6cd5\u3067\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--object-format=sha256")," \u306f\u30c6\u30b9\u30c8\u76ee\u7684\u3067\u306e\u307f\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--template=<template_directory>")),(0,a.kt)("p",{parentName:"li"},"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u5f8c\u8ff0\u306e\u300cTEMPLATE DIRECTORY\u300d\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--separate-git-dir=<git dir>")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"./.git/")," \u306e\u3044\u305a\u308c\u304b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3057\u3066\u521d\u671f\u5316\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u5b9f\u969b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3078\u306e\u30d1\u30b9\u3092\u542b\u3080\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u305d\u3053\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u4f9d\u5b58\u3057\u306a\u3044 Git \u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-b <branch-name>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--initial-branch=<branch-name>")),(0,a.kt)("p",{parentName:"li"},"\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6700\u521d\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u540d\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3057\u307e\u3059\uff08\u73fe\u5728\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," \u3067\u3059\u304c\u3001\u5c06\u6765\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u540d\u524d\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"init.defaultBranch")," \u69cb\u6210\u5909\u6570\u3092\u4f7f\u7528\u3057\u3066\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--shared[=(false|true|umask|group|all|world|everybody|0xxx)]")),(0,a.kt)("p",{parentName:"li"},"Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u3067\u5171\u6709\u3059\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u305d\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u6307\u5b9a\u3059\u308b\u3068\u3001\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.sharedRepository")," \u304c\u8a2d\u5b9a\u3055\u308c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR")," \u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u8981\u6c42\u3055\u308c\u305f\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3067\u4f5c\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001Git \u306f umask(2) \u306b\u3088\u3063\u3066\u5831\u544a\u3055\u308c\u305f\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u5024\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"group")," \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u306a\u308a\u307e\u3059\u3002"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"umask"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"false")),(0,a.kt)("p",{parentName:"li"},"umask(2) \u306b\u3088\u3063\u3066\u5831\u544a\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--shared")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"group"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"true")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30b0\u30eb\u30fc\u30d7\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306b\u3057\u307e\u3059 (git \u30b0\u30eb\u30fc\u30d7\u304c\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30b0\u30eb\u30fc\u30d7\u3067\u306f\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001g+sx \u3082)\u3002\u3053\u308c\u306f\u3001\u5b89\u5168\u306a umask(2) \u306e\u5024\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u7de9\u3081\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001umask \u306f\u4ed6\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30d3\u30c3\u30c8\u306b\u3082\u9069\u7528\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046 (\u305f\u3068\u3048\u3070 ",(0,a.kt)("inlineCode",{parentName:"p"},"umask")," \u304c ",(0,a.kt)("inlineCode",{parentName:"p"},"0022")," \u306e\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"group")," \u3092\u4f7f\u3063\u3066\u3082\u4ed6\u306e (group \u3067\u306f\u306a\u3044) \u30e6\u30fc\u30b6\u30fc\u304b\u3089\u8aad\u307f\u53d6\u308a\u6a29\u9650\u3092\u596a\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093)\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u6b63\u78ba\u306b\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u30010xxx \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"all"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"world"),"|",(0,a.kt)("inlineCode",{parentName:"p"},"everybody")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"group")," \u3068\u540c\u3058\u3067\u3059\u304c\u3001\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u8aad\u307f\u53d6\u308a\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"0xxx")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"0xxx")," \u306f 8\u9032\u6570\u3067\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30e2\u30fc\u30c9\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"0xxx")," \u306b\u306a\u308a\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"0xxx")," \u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306e umask(2) \u306e\u5024\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"group")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," \u306e\u3088\u3046\u306b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u7de9\u304f\u306a\u308b\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"0640")," \u306f\u3001\u30b0\u30eb\u30fc\u30d7\u8aad\u307f\u53d6\u308a\u53ef\u80fd\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u304c\u3001\u30b0\u30eb\u30fc\u30d7\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u4eba\u304c\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u308f\u3051\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"0660")," \u306f\u3001\u73fe\u5728\u306e\u30e6\u30fc\u30b6\u30fc\u3068\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3057\u3066\u306f\u8aad\u307f\u53d6\u308a\u3068\u66f8\u304d\u8fbc\u307f\u304c\u53ef\u80fd\u3067\u3059\u304c\u3001\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"))),(0,a.kt)("p",{parentName:"li"},"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u5171\u6709\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"receive.denyNonFastForwards")," \u3068\u3044\u3046\u8a2d\u5b9a\u30d5\u30e9\u30b0\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u9ad8\u901f\u8ee2\u9001\u3067\u306f\u306a\u3044\u30d7\u30c3\u30b7\u30e5\u3092\u5f37\u5236\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"directory")," \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30b3\u30de\u30f3\u30c9\u306f\u305d\u306e\u4e2d\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002"))),(0,a.kt)("h3",{id:"template-directory"},"TEMPLATE DIRECTORY"),(0,a.kt)("p",null,"\u540d\u524d\u304c\u30c9\u30c3\u30c8\u3067\u59cb\u307e\u3089\u306a\u3044\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u4f5c\u6210\u5f8c\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR")," \u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u6b21\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\uff08\u9806\u756a\u306b\uff09\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--template")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f15\u6570\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$GIT_TEMPLATE_DIR")," \u74b0\u5883\u5909\u6570\u306e\u5185\u5bb9\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"init.templateDir")," \u69cb\u6210\u5909\u6570\u3002\u307e\u305f\u3001"),(0,a.kt)("li",{parentName:"ul"},"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"/usr/share/git-core/templates"),"\u3002")),(0,a.kt)("p",null,"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3001\u63a8\u5968\u3055\u308c\u308b\u300c\u9664\u5916\u30d1\u30bf\u30fc\u30f3\u300d\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitignore"},"gitignore[5]")," \u3092\u53c2\u7167\uff09\u3001\u304a\u3088\u3073\u30b5\u30f3\u30d7\u30eb\u30d5\u30c3\u30af\u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30b5\u30f3\u30d7\u30eb\u30d5\u30c3\u30af\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3079\u3066\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d5\u30c3\u30af\u306e1\u3064\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},".sample")," \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u524a\u9664\u3057\u3066\u540d\u524d\u3092\u5909\u66f4\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30d5\u30c3\u30af\u306e\u5b9f\u884c\u306b\u95a2\u3059\u308b\u3088\u308a\u4e00\u822c\u7684\u306a\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/githooks"},"githooks[5]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("h3",{id:"examples-1"},"EXAMPLES"),(0,a.kt)("p",null,"\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u65b0\u3057\u3044Git\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u958b\u59cb\u3057\u307e\u3059"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd /path/to/my/codebase\n$ git init      (1)\n$ git add .     (2)\n$ git commit    (3)\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"/path/to/my/codebase/.git")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u65e2\u5b58\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002"),(0,a.kt)("li",{parentName:"ol"},"\u5c65\u6b74\u306e\u6700\u521d\u306e\u30b3\u30df\u30c3\u30c8\u3068\u3057\u3066\u3001\u5143\u306e\u72b6\u614b\u3092\u8a18\u9332\u3057\u307e\u3059\u3002")),(0,a.kt)("h2",{id:"add"},(0,a.kt)("inlineCode",{parentName:"h2"},"add")),(0,a.kt)("h3",{id:"name-3"},"NAME"),(0,a.kt)("p",null,"git-add \u2014 \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-3"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n          [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n          [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n          [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n          [--] [<pathspec>...]\n")),(0,a.kt)("h3",{id:"description-3"},"DESCRIPTION"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u898b\u3064\u304b\u3063\u305f\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3057\u3001\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306e\u305f\u3081\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\u901a\u5e38\u3001\u65e2\u5b58\u306e\u30d1\u30b9\u306e\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5168\u4f53\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u304c\u3001\u4e00\u90e8\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u306b\u52a0\u3048\u3089\u308c\u305f\u5909\u66f4\u306e\u4e00\u90e8\u306e\u307f\u3092\u9069\u7528\u3057\u3066\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5b58\u5728\u3057\u306a\u3044\u30d1\u30b9\u3092\u524a\u9664\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u300cindex\u300d\u306f\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u4fdd\u6301\u3057\u3001\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3068\u3057\u3066\u53d6\u5f97\u3055\u308c\u308b\u306e\u306f\u3053\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3067\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5909\u66f4\u3092\u52a0\u3048\u305f\u5f8c\u3001commit \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"add")," \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u30b3\u30df\u30c3\u30c8\u3059\u308b\u524d\u306b\u8907\u6570\u56de\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002add \u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c\u6642\u306b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u307f\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306b\u5f8c\u7d9a\u306e\u5909\u66f4\u3092\u542b\u3081\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," \u3092\u518d\u5ea6\u5b9f\u884c\u3057\u3066\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git status")," \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306e\u305f\u3081\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u308b\u5909\u66f4\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u6982\u8981\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git add")," \u30b3\u30de\u30f3\u30c9\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u305b\u3093\u3002\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u660e\u793a\u7684\u306b\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3001gitadd \u306f\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u3068\u3068\u3082\u306b\u5931\u6557\u3057\u307e\u3059\u3002Git \u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u305f\u518d\u5e30\u7684\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u307e\u305f\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u30b0\u30ed\u30d6\u306b\u3088\u3063\u3066\u5230\u9054\u3057\u305f\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u6697\u9ed9\u7684\u306b\u7121\u8996\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-f"),"\uff08force\uff09\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30b3\u30df\u30c3\u30c8\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3059\u308b\u5225\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-commit"},"git-commit[1]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("h3",{id:"options-3"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>...")),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u30b0\u30ed\u30fc\u30d6\uff08\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"*.c"),"\uff09\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30de\u30c3\u30c1\u3059\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u5148\u982d\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff08\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"dir")," \u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file1")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file2")," \u3092\u8ffd\u52a0\uff09\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5168\u4f53\u306e\u73fe\u5728\u306e\u72b6\u614b\u306b\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"dir")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file1"),"\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u8ffd\u52a0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file2")," \u3060\u3051\u3067\u306a\u304f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file3")," \u3082\u8a18\u9332\u3055\u308c\u307e\u3059\uff09\u3002\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Git \u3067\u306f\u3001\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7121\u8996\u3057\u3066\u3044\u305f\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3084\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u3001\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7121\u8996\u3057\u305f\u3044\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--no-all")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u69cb\u6587\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitglossary"},"gitglossary[7]")," \u306e pathspec \u30a8\u30f3\u30c8\u30ea\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")),(0,a.kt)("p",{parentName:"li"},"\u5b9f\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3001\u3042\u308b\u3044\u306f\u7121\u8996\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-v"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose")),(0,a.kt)("p",{parentName:"li"},"\u5197\u9577\u306b\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-f"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--force")),(0,a.kt)("p",{parentName:"li"},"\u7121\u8996\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-i"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--interactive")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u5909\u66f4\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30d1\u30b9\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u64cd\u4f5c\u3092\u9650\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f\u3001\u300cInteractive mode\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")),(0,a.kt)("p",{parentName:"li"},"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u9593\u306b\u3042\u308b\u30d1\u30c3\u30c1\u306e\u584a\u3092\u5bfe\u8a71\u7684\u306b\u9078\u3073\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5909\u66f4\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u524d\u306b\u3001\u30e6\u30fc\u30b6\u304c\u5dee\u5206\u3092\u78ba\u8a8d\u3059\u308b\u6a5f\u4f1a\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u52b9\u679c\u7684\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"add --interactive")," \u3092\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001\u6700\u521d\u306e\u30b3\u30de\u30f3\u30c9\u30e1\u30cb\u30e5\u30fc\u3092\u30d0\u30a4\u30d1\u30b9\u3057\u3066 ",(0,a.kt)("inlineCode",{parentName:"p"},"patch")," \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u76f4\u63a5\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\u8a73\u7d30\u306f\u300cnteractive mode\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-e"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--edit")),(0,a.kt)("p",{parentName:"li"},"diff \u5bfe index \u3092\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304d\u3001\u30e6\u30fc\u30b6\u306b\u7de8\u96c6\u3055\u305b\u307e\u3059\u3002\u30a8\u30c7\u30a3\u30bf\u3092\u9589\u3058\u305f\u5f8c\u3001\u30cf\u30f3\u30af\u30d8\u30c3\u30c0\u3092\u8abf\u6574\u3057\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u610f\u56f3\u306f\u3001\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3059\u308b\u884c\u3092\u9078\u3093\u3060\u308a\u3001\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\u884c\u306e\u5185\u5bb9\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306f\u3001\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30cf\u30f3\u30af\u30bb\u30ec\u30af\u30bf\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3088\u308a\u3082\u65e9\u304f\u3001\u67d4\u8edf\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u81ea\u5206\u81ea\u8eab\u3092\u6df7\u4e71\u3055\u305b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u9069\u7528\u3055\u308c\u306a\u3044\u30d1\u30c3\u30c1\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u7c21\u5358\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u300cEDITING PATCHES\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-u"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--update")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u306b\u30de\u30c3\u30c1\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u3059\u3067\u306b\u3042\u308b\u5834\u5408\u306b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5408\u308f\u305b\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30fb\u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664\u3057\u305f\u308a\u5909\u66f4\u3057\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u306f\u8ffd\u52a0\u3057\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-u")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u6642\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u5168\u4f53\u306e\u3059\u3079\u3066\u306e\u8ffd\u8de1\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\uff08Git \u306e\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u66f4\u65b0\u306e\u5bfe\u8c61\u3092\u73fe\u5728\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u9650\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-A"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--all"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-ignore-removal")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u5834\u5408\u3060\u3051\u3067\u306a\u304f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3059\u3067\u306b\u30a8\u30f3\u30c8\u30ea\u304c\u3042\u308b\u5834\u5408\u306b\u3082\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5408\u308f\u305b\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u8ffd\u52a0\u3001\u4fee\u6b63\u3001\u524a\u9664\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-A")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u5168\u4f53\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\uff08Git \u306e\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u66f4\u65b0\u5bfe\u8c61\u3092\u73fe\u5728\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u9650\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-all"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-removal")),(0,a.kt)("p",{parentName:"li"},"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u77e5\u3089\u308c\u3066\u3044\u306a\u3044\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3084\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3057\u307e\u3059\u304c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u7121\u8996\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u304c\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u306f\u3001no-op\u3068\u306a\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4e3b\u306b\u3001\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Git \u306b\u6163\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u52a9\u3051\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git add <pathspec>..."),"\u300d\u306f\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git add --no-all <pathspec>..."),"\u300d\u3068\u540c\u7fa9\u8a9e\u3067\u3001\u3064\u307e\u308a\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u7121\u8996\u3057\u3066\u3044\u307e\u3057\u305f\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-N"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--intent-to-add")),(0,a.kt)("p",{parentName:"li"},"\u305d\u306e\u30d1\u30b9\u304c\u5f8c\u3067\u8ffd\u52a0\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u5b9f\u3060\u3051\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\u305d\u306e\u30d1\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u3001\u4f55\u3082\u66f8\u304b\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044\u5185\u5bb9\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff")," \u3067\u8868\u793a\u3057\u305f\u308a ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit -a")," \u3067\u30b3\u30df\u30c3\u30c8\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306a\u3069\u306b\u4fbf\u5229\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--refresh")),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u305b\u305a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e stat() \u60c5\u5831\u3060\u3051\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-errors")),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u3066\u8ffd\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u64cd\u4f5c\u3092\u4e2d\u65ad\u305b\u305a\u306b\u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\u3092\u7d9a\u884c\u3057\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3067\u3082\u3001\u30b3\u30de\u30f3\u30c9\u306f\u975e\u30bc\u30ed\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u7d42\u4e86\u3059\u308b\u3002\u69cb\u6210\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"add.ignoreErrors")," \u3092 true \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u3053\u306e\u52d5\u4f5c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-missing")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")," \u3068\u4e00\u7dd2\u306b\u306e\u307f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u3059\u3067\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u7121\u8996\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-warn-embedded-repo")),(0,a.kt)("p",{parentName:"li"},"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," \u306f\u57cb\u3081\u8fbc\u307f\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u969b\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git submodule add")," \u3092\u4f7f\u308f\u305a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},".gitmodules")," \u306b\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3068\u8b66\u544a\u3092\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u3053\u306e\u8b66\u544a\u3092\u6291\u5236\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 (\u4f8b: \u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u3092\u624b\u52d5\u3067\u884c\u3063\u3066\u3044\u308b\u5834\u5408)\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--renormalize")),(0,a.kt)("p",{parentName:"li"},"\u8ffd\u8de1\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u300cclean\u300d\u30d7\u30ed\u30bb\u30b9\u3092\u65b0\u305f\u306b\u9069\u7528\u3057\u3001\u305d\u308c\u3089\u3092\u5f37\u5236\u7684\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u518d\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"core.autocrlf")," \u306e\u8a2d\u5b9a\u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"text")," \u5c5e\u6027\u3092\u5909\u66f4\u3057\u305f\u5f8c\u306b\u3001\u9593\u9055\u3063\u305f CRLF/LF \u306e\u6539\u884c\u30b3\u30fc\u30c9\u3067\u8ffd\u52a0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-u")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--chmod=(+|-)x")),(0,a.kt)("p",{parentName:"li"},"\u8ffd\u52a0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u884c\u53ef\u80fd\u30d3\u30c3\u30c8\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\u5b9f\u884c\u53ef\u80fd\u30d3\u30c3\u30c8\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u306e\u307f\u5909\u66f4\u3055\u308c\u3001\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file=<file>")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30b9\u30b9\u30da\u30c3\u30af\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u5f15\u6570\u3067\u306f\u306a\u304f ",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u3067\u6e21\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u304c\u6b63\u78ba\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u3067\u3042\u308c\u3070\u3001\u6a19\u6e96\u5165\u529b\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Pathspec \u306e\u8981\u7d20\u306f\u3001LF \u307e\u305f\u306f CR/LF \u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.quotePath"),"\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u53c2\u7167\uff09\u306e\u8aac\u660e\u306b\u5f93\u3063\u3066\u3001pathspec \u306e\u8981\u7d20\u3092\u5f15\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")," \u304a\u3088\u3073\u30b0\u30ed\u30fc\u30d0\u30eb\u306a ",(0,a.kt)("inlineCode",{parentName:"p"},"--literal-pathspecs")," \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file")," \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u306e\u307f\u610f\u5473\u3092\u6301\u3061\u307e\u3059\u3002Pathspec \u306e\u8981\u7d20\u306f NUL \u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u3001\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u3059\u3079\u3066\u6587\u5b57\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\uff08\u6539\u884c\u3084\u5f15\u7528\u7b26\u3082\u542b\u3080\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u5206\u96e2\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u9593\u9055\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\uff09\u3002"))),(0,a.kt)("h3",{id:"examples-2"},"EXAMPLES"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"Documentation")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u306b\u3042\u308b\u3059\u3079\u3066\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"* .txt")," \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git add Documentation/\\*.txt\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30b9\u30bf\u30ea\u30b9\u30af ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," \u304c\u30b7\u30a7\u30eb\u304b\u3089\u5f15\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30b3\u30de\u30f3\u30c9\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"Documentation/")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u3059\u3079\u3066\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"git-*.sh")," \u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3092\u691c\u8a0e\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git add git-*.sh\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b7\u30a7\u30eb\u304c\u30a2\u30b9\u30bf\u30ea\u30b9\u30af\u3092\u5c55\u958b\u3067\u304d\u308b\u305f\u3081\uff08\u3064\u307e\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30ea\u30b9\u30c8\u3057\u3066\u3044\u308b\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"subdir/git-foo.sh")," \u306f\u8003\u616e\u3055\u308c\u307e\u305b\u3093\u3002"))),(0,a.kt)("h3",{id:"interactive-mode"},"INTERACTIVE MODE"),(0,a.kt)("p",null,"\u30b3\u30de\u30f3\u30c9\u304c\u5bfe\u8a71\u578b\u30e2\u30fc\u30c9\u306b\u5165\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"status")," \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u3001\u5bfe\u8a71\u578b\u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u306b\u5165\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u306f\u3001\u4f7f\u7528\u53ef\u80fd\u306a\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30b9\u30c8\u3092\u8868\u793a\u3057\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"Whatnow>"),"\u300d\u3068\u3044\u3046\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u4e00\u822c\u306b\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u5358\u4e00\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},">")," \u3067\u7d42\u4e86\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u3001\u6307\u5b9a\u3055\u308c\u305f\u9078\u629e\u80a2\u306e1\u3064\u3060\u3051\u3092\u9078\u629e\u3057\u3001",(0,a.kt)("em",{parentName:"p"},"return")," \u3068\u5165\u529b\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*** Commands ***\n  1: status       2: update       3: revert       4: add untracked\n  5: patch        6: diff         7: quit         8: help\nWhat now> 1\n")),(0,a.kt)("p",null,"\u9078\u629e\u304c\u4e00\u610f\u3067\u3042\u308b\u9650\u308a\u3001\u4e0a\u8a18\u306e",(0,a.kt)("inlineCode",{parentName:"p"},"s"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"sta"),"\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," \u3068\u8a00\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30e1\u30a4\u30f3\u306e\u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u306b\u306f6\u3064\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"help")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"quit")," \u306b\u52a0\u3048\u3066\uff09\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"status")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30d1\u30b9\u306b\u3064\u3044\u3066\u3001HEAD \u3068 index (\u3064\u307e\u308a ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," \u3057\u305f\u5834\u5408\u306b\u30b3\u30df\u30c3\u30c8\u3055\u308c\u308b\u3082\u306e)\u3001index \u3068 working tree \u30d5\u30a1\u30a4\u30eb (\u3064\u307e\u308a ",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," \u3057\u3066 ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit")," \u3059\u308b\u524d\u306b\u3055\u3089\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3067\u304d\u308b\u3082\u306e) \u306e\u9593\u306e\u5909\u5316\u3092\u793a\u3057\u307e\u3059\u3002\u51fa\u529b\u4f8b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"         staged     unstaged path\n1:       binary      nothing foo.png\n2:     +403/-35        +1/-1 git-add--interactive.perl\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u3092\u898b\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"foo.png")," \u306b\u306f HEAD \u3068\u306e\u9055\u3044\u304c\u3042\u308a (\u305f\u3060\u3057\u30d0\u30a4\u30ca\u30ea\u306a\u306e\u3067\u884c\u6570\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093)\u3001\u7d22\u5f15\u4ed8\u304d\u306e\u30b3\u30d4\u30fc\u3068\u4f5c\u696d\u7528\u30c4\u30ea\u30fc\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u9055\u3044\u304c\u3042\u308a\u307e\u305b\u3093 (\u4f5c\u696d\u7528\u30c4\u30ea\u30fc\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3082\u9055\u3044\u304c\u3042\u308c\u3070\u3001\u4f55\u3082\u8868\u793a\u3055\u308c\u306a\u3044\u4ee3\u308f\u308a\u306b\u30d0\u30a4\u30ca\u30ea\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059)\u3002\u3082\u3046\u3072\u3068\u3064\u306e\u30d5\u30a1\u30a4\u30eb ",(0,a.kt)("inlineCode",{parentName:"p"},"git-add--interactive.perl")," \u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3042\u308b\u3082\u306e\u3092\u30b3\u30df\u30c3\u30c8\u3059\u308b\u3068 403\u884c\u304c\u8ffd\u52a0\u3055\u308c35\u884c\u304c\u524a\u9664\u3055\u308c\u307e\u3059\u304c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u3055\u3089\u306b\u4fee\u6b63\u304c\u52a0\u3048\u3089\u308c\u3066\u3044\u307e\u3059 (\u8ffd\u52a0\u304c1\u3064\u3001\u524a\u9664\u304c1\u3064)\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"update")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306b\u3088\u308a\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"Update>>"),"\u300d\u3068\u3044\u3046\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u4e8c\u91cd\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},">>")," \u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u8907\u6570\u306e\u9078\u629e\u304c\u53ef\u80fd\u3067\u3001\u7a7a\u767d\u3084\u30ab\u30f3\u30de\u3067\u9023\u7d50\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f8b\uff1a\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"2-5 7,9"),"\u300d\u3067 2,3,4,5,7,9 \u3092\u30ea\u30b9\u30c8\u304b\u3089\u9078\u629e\u3057\u307e\u3059\u3002\u7bc4\u56f2\u5185\u306e2\u756a\u76ee\u306e\u6570\u5b57\u304c\u7701\u7565\u3055\u308c\u305f\u5834\u5408\u3001\u6b8b\u308a\u306e\u3059\u3079\u3066\u306e\u30d1\u30c3\u30c1\u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002\u4f8b\uff1a\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"7-"),"\u300d\u3067 7,8,9 \u3092\u30ea\u30b9\u30c8\u304b\u3089\u9078\u3076\u3002\u3059\u3079\u3066\u3092\u9078\u629e\u3059\u308b\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"*")," \u3068\u8a00\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u9078\u3093\u3060\u3082\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," \u3067\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"           staged     unstaged path\n  1:       binary      nothing foo.png\n* 2:     +403/-35        +1/-1 git-add--interactive.perl\n")),(0,a.kt)("p",{parentName:"li"},"\u9078\u629e\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u306e\u524d\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u3092\u4ed8\u3051\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"Update>> -2\n")),(0,a.kt)("p",{parentName:"li"},"\u9078\u629e\u3092\u884c\u3063\u305f\u5f8c\u3001\u7a7a\u306e\u884c\u3067\u5fdc\u7b54\u3057\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u9078\u629e\u3055\u308c\u305f\u30d1\u30b9\u306e\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"revert")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," \u3068\u3088\u304f\u4f3c\u305f UI \u3067\u3001\u9078\u629e\u3055\u308c\u305f\u30d1\u30b9\u306e staged \u60c5\u5831\u304c HEAD \u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u3082\u306e\u306b\u623b\u3055\u308c\u307e\u3059\u3002\u65b0\u3057\u3044\u30d1\u30b9\u3092\u5143\u306b\u623b\u3059\u3068\u3001\u305d\u306e\u30d1\u30b9\u306f\u30c8\u30e9\u30c3\u30af\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"add untracked")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"update")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"revert")," \u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u305f UI \u3092\u6301\u3061\u3001\u8ffd\u8de1\u3055\u308c\u3066\u3044\u306a\u3044\u30d1\u30b9\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"patch")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306b\u3088\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"status")," \u306e\u3088\u3046\u306a\u9078\u629e\u306e\u4e2d\u304b\u3089\u4e00\u3064\u306e\u30d1\u30b9\u3092\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d1\u30b9\u3092\u9078\u629e\u3057\u305f\u5f8c\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u306e\u5dee\u5206\u3092\u63d0\u793a\u3057\u3001\u5404\u30cf\u30f3\u30af\u306e\u5909\u66f4\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3044\u305a\u308c\u304b\u3092\u9078\u629e\u3057\u3001",(0,a.kt)("em",{parentName:"p"},"return")," \u3068\u5165\u529b\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"y - \u3053\u306e\u30cf\u30f3\u30af\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\nn - \u3053\u306e\u30cf\u30f3\u30af\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u306a\u3044\nq - quit; \u3053\u306e\u30cf\u30f3\u30af\u3084\u6b8b\u308a\u306e\u30cf\u30f3\u30af\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u306a\u3044\na - \u3053\u306e\u30cf\u30f3\u30af\u3068\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u3059\u3079\u3066\u306e\u5f8c\u7d9a\u30cf\u30f3\u30af\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\nd - \u3053\u306e\u30cf\u30f3\u30af\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u305b\u305a\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u5f8c\u7d9a\u306e\u30cf\u30f3\u30af\u3082\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u306a\u3044\ng - \u79fb\u52d5\u3059\u308b\u30cf\u30f3\u30af\u3092\u9078\u629e\u3059\u308b\n/ - \u6307\u5b9a\u3055\u308c\u305f\u6b63\u898f\u8868\u73fe\u306b\u4e00\u81f4\u3059\u308b\u30cf\u30f3\u30af\u3092\u691c\u7d22\u3059\u308b\nj - \u3053\u306e\u30cf\u30f3\u30af\u3092\u672a\u6c7a\u5b9a\u306b\u3057\u3066\u3001\u6b21\u306e\u672a\u6c7a\u5b9a\u30cf\u30f3\u30af\u3092\u53c2\u7167\u3059\u308b\nJ - \u3053\u306e\u30cf\u30f3\u30af\u3092\u672a\u6c7a\u5b9a\u306b\u3057\u3066\u3001\u6b21\u306e\u30cf\u30f3\u30af\u3092\u53c2\u7167\u3059\u308b\nk - \u3053\u306e\u30cf\u30f3\u30af\u3092\u672a\u6c7a\u5b9a\u306b\u3057\u3066\u3001\u524d\u306e\u672a\u6c7a\u5b9a\u306e\u30cf\u30f3\u30af\u3092\u898b\u308b\nK - \u3053\u306e\u30cf\u30f3\u30af\u3092\u672a\u6c7a\u5b9a\u306e\u307e\u307e\u306b\u3057\u3066\u3001\u524d\u306e\u30cf\u30f3\u30af\u3092\u53c2\u7167\u3059\u308b\ns - \u73fe\u5728\u306e\u30cf\u30f3\u30af\u3092\u3088\u308a\u5c0f\u3055\u306a\u30cf\u30f3\u30af\u306b\u5206\u5272\u3059\u308b\ne - \u73fe\u5728\u306e\u30cf\u30f3\u30af\u3092\u624b\u52d5\u3067\u7de8\u96c6\n? - \u30d8\u30eb\u30d7\u3092\u8868\u793a\u3059\u308b\n")),(0,a.kt)("p",{parentName:"li"},"\u3059\u3079\u3066\u306e\u30cf\u30f3\u30af\u306e\u904b\u547d\u3092\u6c7a\u5b9a\u3057\u305f\u5f8c\u3001\u3082\u3057\u9078\u629e\u3055\u308c\u305f\u30cf\u30f3\u30af\u304c\u3042\u308c\u3070\u3001\u9078\u629e\u3055\u308c\u305f\u30cf\u30f3\u30af\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"interactive.singleKey")," \u3092 true \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u3053\u3067 ",(0,a.kt)("em",{parentName:"p"},"return")," \u3092\u5165\u529b\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"diff")),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30df\u30c3\u30c8\u3055\u308c\u308b\u5185\u5bb9 (\u3064\u307e\u308a HEAD \u3068 index \u306e\u9593\u306e\u5185\u5bb9) \u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"))),(0,a.kt)("h3",{id:"editing-patches"},"EDITING PATCHES"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git add -e")," \u3092\u5b9f\u884c\u3057\u305f\u308a\u5bfe\u8a71\u578b\u306e hunk \u30bb\u30ec\u30af\u30bf\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"e")," \u3092\u9078\u629e\u3057\u305f\u308a\u3059\u308b\u3068\u3001\u30d1\u30c3\u30c1\u304c\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u304b\u308c\u3001\u30a8\u30c7\u30a3\u30bf\u304c\u7d42\u4e86\u3059\u308b\u3068\u305d\u306e\u7d50\u679c\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u30d1\u30c3\u30c1\u306b\u306f\u81ea\u7531\u306b\u5909\u66f4\u3092\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u4e2d\u306b\u306f\u6df7\u4e71\u3092\u62db\u304f\u3088\u3046\u306a\u5909\u66f4\u304c\u3042\u3063\u305f\u308a\u3001\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3067\u304d\u306a\u3044\u7d50\u679c\u306b\u306a\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u3082\u3057\u3001\u3053\u306e\u64cd\u4f5c\u3092\u5b8c\u5168\u306b\u4e2d\u6b62\u3057\u305f\u3044\uff08\u3064\u307e\u308a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u4f55\u3082\u65b0\u3057\u3044\u3082\u306e\u3092\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\uff09\u5834\u5408\u306b\u306f\u3001\u5358\u7d14\u306b\u30d1\u30c3\u30c1\u306e\u3059\u3079\u3066\u306e\u884c\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4ee5\u4e0b\u306e\u30ea\u30b9\u30c8\u306f\u3001\u30d1\u30c3\u30c1\u306e\u4e2d\u3067\u3088\u304f\u898b\u3089\u308c\u308b\u3082\u306e\u3068\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u7de8\u96c6\u64cd\u4f5c\u304c\u610f\u5473\u3092\u6301\u3064\u304b\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u8ffd\u52a0\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4"),(0,a.kt)("p",{parentName:"li"},"\u8ffd\u52a0\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u3067\u59cb\u307e\u308b\u884c\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u8ffd\u52a0\u884c\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001\u8ffd\u52a0\u884c\u306e\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u524a\u9664\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4"),(0,a.kt)("p",{parentName:"li"},"\u524a\u9664\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u3067\u59cb\u307e\u308b\u884c\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u3092\u300c",(0,a.kt)("inlineCode",{parentName:"p"}," "),"\u300d\uff08\u30b9\u30da\u30fc\u30b9\uff09\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u524a\u9664\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u6f14\u51fa\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4fee\u6b63\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4"),(0,a.kt)("p",{parentName:"li"},"\u4fee\u6b63\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u3067\u59cb\u307e\u308b\u884c\uff08\u53e4\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u524a\u9664\uff09\u3068\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u3067\u59cb\u307e\u308b\u884c\uff08\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u8ffd\u52a0\uff09\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u884c\u3092\u300c",(0,a.kt)("inlineCode",{parentName:"p"}," "),"\u300d\u306b\u5909\u63db\u3057\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u884c\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3001\u4fee\u6b63\u5185\u5bb9\u306e\u6f14\u51fa\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30da\u30a2\u306e\u534a\u5206\u3060\u3051\u3092\u4fee\u6b63\u3059\u308b\u3068\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u7d1b\u3089\u308f\u3057\u3044\u5909\u5316\u304c\u751f\u3058\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002"))),(0,a.kt)("p",null,"\u307e\u305f\u3001\u3088\u308a\u8907\u96d1\u306a\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30d1\u30c3\u30c1\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306e\u307f\u9069\u7528\u3055\u308c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u306f\u9069\u7528\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5909\u66f4\u3092\u300cundo\u300d\u3057\u305f\u3088\u3046\u306b\u898b\u3048\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3068\u3048\u3070\u3001HEAD \u306b\u3082\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u3082\u306a\u3044\u65b0\u3057\u3044\u884c\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5c0e\u5165\u3059\u308b\u3068\u3001\u30b3\u30df\u30c3\u30c8\u306e\u305f\u3081\u306b\u65b0\u3057\u3044\u884c\u304c\u30b9\u30c6\u30fc\u30b8\u3055\u308c\u307e\u3059\u304c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u306f\u305d\u306e\u884c\u306f\u5143\u306b\u623b\u3055\u308c\u305f\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u304b\u3001\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u624b\u3064\u304b\u305a\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u524a\u9664"),(0,a.kt)("p",{parentName:"li"},"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u9593\u306b\u9055\u3044\u306e\u306a\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"}," "),"\u300d\uff08\u30b9\u30da\u30fc\u30b9\uff09\u3067\u59cb\u307e\u308b\u30b3\u30f3\u30c6\u30af\u30b9\u30c8\u30e9\u30a4\u30f3\u306b\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b9\u30da\u30fc\u30b9\u3092\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30f3\u30c6\u30af\u30b9\u30c8\u30e9\u30a4\u30f3\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u3066\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u518d\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65e2\u5b58\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u4fee\u6b63"),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e9\u30a4\u30f3\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u3066\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"p"}," "),"\u300d\u3092\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u300d\u306b\u5909\u63db\u3057\u3066\uff09\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u542b\u3080\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u30e9\u30a4\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30e9\u30a4\u30f3\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u540c\u69d8\u306b\u3001\u65e2\u5b58\u306e\u8ffd\u52a0\u3084\u4fee\u6b63\u306e\u305f\u3081\u306b\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u884c\u3092\u4fee\u6b63\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3044\u305a\u308c\u306e\u5834\u5408\u3082\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u306f\u65b0\u3057\u3044\u4fee\u6b63\u304c\u5143\u306b\u623b\u3055\u308c\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u65b0\u898f\u30b3\u30f3\u30c6\u30f3\u30c4"),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30c3\u30c1\u5185\u306b\u5b58\u5728\u3057\u306a\u3044\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u5358\u7d14\u306b\u3001\u305d\u308c\u305e\u308c\u304c\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u300d\u3067\u59cb\u307e\u308b\u65b0\u3057\u3044\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8ffd\u52a0\u3055\u308c\u305f\u5185\u5bb9\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u306f\u5143\u306b\u623b\u3055\u308c\u305f\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002"))),(0,a.kt)("p",null,"\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3067\u304d\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u5b8c\u5168\u306b\u56de\u907f\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u64cd\u4f5c\u3082\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"li"}," "),"\u300d\uff09\u307e\u305f\u306f\u524a\u9664\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"li"},"-"),"\u300d\uff09\u884c\u306e\u8ffd\u52a0\u3059\u308b"),(0,a.kt)("li",{parentName:"ul"},"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u307e\u305f\u306f\u524a\u9664\u884c\u306e\u524a\u9664\u3059\u308b"),(0,a.kt)("li",{parentName:"ul"},"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u307e\u305f\u306f\u524a\u9664\u884c\u306e\u5185\u5bb9\u3092\u5909\u66f4\u3059\u308b")),(0,a.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-status"},"git-status[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-rm"},"git-rm[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-reset"},"git-reset[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-mv"},"git-mv[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-commit"},"git-commit[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-update-index"},"git-update-index[1]")),(0,a.kt)("h2",{id:"mv"},(0,a.kt)("inlineCode",{parentName:"h2"},"mv")),(0,a.kt)("h3",{id:"name-4"},"NAME"),(0,a.kt)("p",null,"git-mv \u2014 \u30d5\u30a1\u30a4\u30eb\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3001\u307e\u305f\u306f\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u79fb\u52d5\u307e\u305f\u306f\u540d\u524d\u5909\u66f4\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-4"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git mv <options>... <args>...\n")),(0,a.kt)("h3",{id:"description-4"},"DESCRIPTION"),(0,a.kt)("p",null,"\u30d5\u30a1\u30a4\u30eb\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3001\u307e\u305f\u306f\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u79fb\u52d5\u307e\u305f\u306f\u540d\u524d\u5909\u66f4\u3057\u307e\u3059\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git mv [-v] [-f] [-n] [-k] <source> <destination>\ngit mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n")),(0,a.kt)("p",null,"\u6700\u521d\u306e\u5f62\u5f0f\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3001\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3001\u307e\u305f\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"<source>")," \u306e\u540d\u524d\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"<destination>")," \u306b\u5909\u66f4\u3057\u307e\u3059\u30022\u756a\u76ee\u306e\u5f62\u5f0f\u3067\u306f\u3001\u6700\u5f8c\u306e\u5f15\u6570\u306f\u65e2\u5b58\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6307\u5b9a\u3055\u308c\u305f\u30bd\u30fc\u30b9\u306f\u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u6b63\u5e38\u306b\u5b8c\u4e86\u3059\u308b\u3068\u66f4\u65b0\u3055\u308c\u307e\u3059\u304c\u3001\u5909\u66f4\u306f\u30b3\u30df\u30c3\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options-4"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-f"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--force")),(0,a.kt)("p",{parentName:"li"},"\u30bf\u30fc\u30b2\u30c3\u30c8\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3067\u3082\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u5909\u66f4\u307e\u305f\u306f\u79fb\u52d5\u3092\u5f37\u5236\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-k")),(0,a.kt)("p",{parentName:"li"},"\u30a8\u30e9\u30fc\u72b6\u614b\u306b\u3064\u306a\u304c\u308b\u79fb\u52d5\u307e\u305f\u306f\u540d\u524d\u5909\u66f4\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002\u30bd\u30fc\u30b9\u304c\u5b58\u5728\u305b\u305a\u3001Git \u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-f")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001\u30bd\u30fc\u30b9\u304c\u65e2\u5b58\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0a\u66f8\u304d\u3059\u308b\u5834\u5408\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")),(0,a.kt)("p",{parentName:"li"},"\u4f55\u3082\u3057\u307e\u305b\u3093\uff1b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u793a\u3059\u3060\u3051\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-v"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u5831\u544a\u3057\u307e\u3059\u3002"))),(0,a.kt)("h3",{id:"submodules"},"SUBMODULES"),(0,a.kt)("p",null,"gitfile \u3092\u4f7f\u7528\u3057\u3066\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u79fb\u52d5\u3059\u308b\u3068\uff08\u3064\u307e\u308a\u3001Git\u30d0\u30fc\u30b8\u30e7\u30f31.7.8\u4ee5\u964d\u3067\u8907\u88fd\u3055\u308c\u305f\uff09\u3001gitfile \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.worktree")," \u306e\u8a2d\u5b9a\u304c\u66f4\u65b0\u3055\u308c\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u65b0\u3057\u3044\u5834\u6240\u3067\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitmodules"},"gitmodules[5]")," \u30d5\u30a1\u30a4\u30eb\u306e submodule\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<name>.path")," \u8a2d\u5b9a\u3092\u66f4\u65b0\u3057\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3057\u3088\u3046\u3068\u3057\u307e\u3059\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"-n")," \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3092\u9664\u304f\uff09\u3002"),(0,a.kt)("h3",{id:"bugs"},"BUGS"),(0,a.kt)("p",null,"\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u306b\u3088\u308a\u3001\u5165\u529b\u3055\u308c\u305f\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u79fb\u52d5\u3055\u308c\u308b\u305f\u3073\u306b\uff08\u305f\u3068\u3048\u3070\u3001\u79fb\u52d5\u306e\u524d\u5f8c\u3067\u30b3\u30df\u30c3\u30c8\u3092\u5207\u308a\u66ff\u3048\u308b\u5834\u5408\uff09\u3001\u53e4\u3044\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u306f\u53e4\u3044\u5834\u6240\u306b\u6b8b\u308a\u3001\u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u65b0\u3057\u3044\u5834\u6240\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u65b0\u3057\u3044\u5834\u6240\u306b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u518d\u5ea6\u5165\u529b\u3059\u308b\u306b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u5f8c\u3067\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git submodule update"),"\u300d\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u53e4\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u524a\u9664\u306f\u3001gitfile \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u5b89\u5168\u3067\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5c65\u6b74\u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\u518d\u5e30\u7684\u306a\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u66f4\u65b0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u4e21\u65b9\u306e\u624b\u9806\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("h2",{id:"restore"},(0,a.kt)("inlineCode",{parentName:"h2"},"restore")),(0,a.kt)("h3",{id:"name-5"},"NAME"),(0,a.kt)("p",null,"git-restore \u2014 \u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-5"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git restore [<options>] [--source=<tree>] [--staged] [--worktree] [--] <pathspec>...\ngit restore [<options>] [--source=<tree>] [--staged] [--worktree] --pathspec-from-file=<file> [--pathspec-file-nul]\ngit restore (-p|--patch) [<options>] [--source=<tree>] [--staged] [--worktree] [--] [<pathspec>...]\n")),(0,a.kt)("h3",{id:"description-5"},"DESCRIPTION"),(0,a.kt)("p",null,"\u5fa9\u5143\u30bd\u30fc\u30b9\u304b\u3089\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u4f7f\u7528\u3057\u3066\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u5185\u306e\u6307\u5b9a\u3055\u308c\u305f\u30d1\u30b9\u3092\u5fa9\u5143\u3057\u307e\u3059\u3002\u30d1\u30b9\u304c\u8ffd\u8de1\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u5fa9\u5143\u30bd\u30fc\u30b9\u306b\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30bd\u30fc\u30b9\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u524a\u9664\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")," \u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5fa9\u5143\u3057\u305f\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--staged--worktree")," \u3092\u4f7f\u7528\u3057\u3066\u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u4e21\u65b9\u3092\u5fa9\u5143\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u306f HEAD \u304b\u3089\u5fa9\u5143\u3055\u308c\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u5fa9\u5143\u3055\u308c\u307e\u3059\u3002\u5225\u306e\u30b3\u30df\u30c3\u30c8\u304b\u3089\u5fa9\u5143\u3059\u308b\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--source")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"3\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git"},"git[1]")," \u306e\u300cReset, restore and revert\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u9a13\u7684\u306a\u3082\u306e\u3067\u3059\u3002 \u52d5\u4f5c\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options-5"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-s <tree>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--source=<tree>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u30c4\u30ea\u30fc\u306e\u5185\u5bb9\u3067\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3057\u307e\u3059\u3002\u30bd\u30fc\u30b9 \u30c4\u30ea\u30fc\u3092\u6307\u5b9a\u3059\u308b\u306b\u306f\u3001\u305d\u306e\u30c4\u30ea\u30fc\u306b\u95a2\u9023\u3059\u308b\u30b3\u30df\u30c3\u30c8\u3001\u30d6\u30e9\u30f3\u30c1\u3001\u30bf\u30b0\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070 ",(0,a.kt)("inlineCode",{parentName:"p"},"HEAD")," \u304b\u3089\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u5fa9\u5143\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3068\u3057\u3066\u3001\u30de\u30fc\u30b8\u30d9\u30fc\u30b9\u304c1\u3064\u3060\u3051\u306e\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"A")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"B")," \u306e\u30de\u30fc\u30b8\u30d9\u30fc\u30b9\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3068\u3057\u3066\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"A...B"),"\u300d\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"A")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"B")," \u306e\u3046\u3061\u3001\u6700\u5927\u3067\u30821\u3064\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u306e\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"HEAD")," \u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30b9\u30c8\u30a2\u5143\u3068\u30ea\u30b9\u30c8\u30a2\u5148\u306e\u5dee\u5206\u306e\u30cf\u30f3\u30af\u3092\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u9078\u629e\u3057\u307e\u3059\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-add"},"git-add[1]")," \u306e\u300cInteractive Mode\u300d\u306e\u9805\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")," \u30e2\u30fc\u30c9\u306e\u64cd\u4f5c\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u306a\u304a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")," \u306f pathspec \u3092\u53d7\u3051\u4ed8\u3051\u305a\u3001\u5909\u66f4\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d1\u30b9\u3092\u30ea\u30b9\u30c8\u30a2\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5c0b\u306d\u3066\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-W"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--worktree"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-S"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30b9\u30c8\u30a2\u3059\u308b\u5834\u6240\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f5c\u696d\u30c4\u30ea\u30fc\u304c\u30ea\u30b9\u30c8\u30a2\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u307f\u304c\u30ea\u30b9\u30c8\u30a2\u3055\u308c\u307e\u3059\u3002both\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u4e21\u65b9\u304c\u30ea\u30b9\u30c8\u30a2\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")),(0,a.kt)("p",{parentName:"li"},"\u9759\u304b\u3067\u3001\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6291\u5236\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--no-progress")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--progress"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-progress")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u9032\u884c\u72b6\u6cc1\u304c\u6a19\u6e96\u30a8\u30e9\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5831\u544a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")," \u306e\u6307\u5b9a\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u7aef\u672b\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3067\u3082\u9032\u884c\u72b6\u6cc1\u306e\u5831\u544a\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ours"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--theirs")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u5fa9\u5143\u3059\u308b\u969b\u306b\u3001\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30d1\u30b9\u306b\u5bfe\u3057\u3066\u30b9\u30c6\u30fc\u30b8 #2 (ours) \u3042\u308b\u3044\u306f #3 (theirs) \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u305f\u3060\u3057\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git rebase")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull --rebase")," \u306e\u969b\u306b\u306f ",(0,a.kt)("em",{parentName:"p"},"ours")," \u3068 ",(0,a.kt)("em",{parentName:"p"},"theirs")," \u304c\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u7d30\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-checkout"},"git-checkout[1]")," \u306e\u540c\u3058\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8aac\u660e\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-m"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--merge")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u5fa9\u5143\u3059\u308b\u5834\u5408\u306f\u3001\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30d1\u30b9\u3067\u7af6\u5408\u3059\u308b\u30de\u30fc\u30b8\u3092\u518d\u4f5c\u6210\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--conflict=<style>")),(0,a.kt)("p",{parentName:"li"},"\u4e0a\u8a18\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--merge")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3059\u308b\u30cf\u30f3\u30af\u306e\u8868\u793a\u65b9\u6cd5\u3092\u5909\u66f4\u3057\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"merge.conflictStyle")," \u69cb\u6210\u5909\u6570\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"merge"),"\u300d\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\u3068\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"diff3"),"\u300d\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"merge"),"\u300d\u30b9\u30bf\u30a4\u30eb\u3067\u8868\u793a\u3055\u308c\u308b\u5185\u5bb9\u306b\u52a0\u3048\u3066\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u5185\u5bb9\u3082\u8868\u793a\uff09\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-unmerged")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u30ea\u30b9\u30c8\u30a2\u3059\u308b\u969b\u306b\u3001\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u304c\u3042\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--ours"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--theirs"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--merge"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--conflict")," \u306e\u3044\u305a\u308c\u3082\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u64cd\u4f5c\u3092\u4e2d\u65ad\u3057\u307e\u305b\u3093\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u4e0a\u306e\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30d1\u30b9\u306f\u305d\u306e\u307e\u307e\u6b8b\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-skip-worktree-bits")),(0,a.kt)("p",{parentName:"li"},"\u30b9\u30d1\u30fc\u30b9\u30fb\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u30fb\u30e2\u30fc\u30c9\u3067\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"$GIT_DIR/info/sparse-checkout")," \u306e\u30b9\u30d1\u30fc\u30b9\u30fb\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u306e\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30b9\u30d1\u30fc\u30b9\u30fb\u30d1\u30bf\u30fc\u30f3\u3092\u7121\u8996\u3057\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u306b\u3042\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7121\u6761\u4ef6\u306b\u30ea\u30b9\u30c8\u30a2\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--recurse-submodules"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-recurse-submodules")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>")," \u306b\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u524d\u304c\u3042\u308a\u3001\u5fa9\u5143\u5834\u6240\u306b\u4f5c\u696d\u30c4\u30ea\u30fc\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u306e\u307f\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306f\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8a18\u9332\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u306b\u5fa9\u5143\u3055\u308c\u3001\u30ed\u30fc\u30ab\u30eb\u306e\u5909\u66f4\u306f\u3059\u3079\u3066\u4e0a\u66f8\u304d\u3055\u308c\u307e\u3059\u3002\u4f55\u3082\u3057\u306a\u3044 (\u3042\u308b\u3044\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-recurse-submodules"),") \u306e\u5834\u5408\u306f\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f5c\u696d\u30c4\u30ea\u30fc\u306f\u66f4\u65b0\u3055\u308c\u307e\u305b\u3093\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-checkout"},"git-checkout[1]")," \u3068\u540c\u69d8\u306b\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"HEAD")," \u3092\u5207\u308a\u96e2\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--overlay"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-overlay")),(0,a.kt)("p",{parentName:"li"},"\u30aa\u30fc\u30d0\u30fc\u30ec\u30a4\u30e2\u30fc\u30c9\u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306f\u5fa9\u5143\u306e\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u307e\u305b\u3093\u3002no-overlay \u30e2\u30fc\u30c9\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--source")," \u30c4\u30ea\u30fc\u306b\u73fe\u308c\u3066\u3044\u306a\u3044\u8ffd\u8de1\u30d5\u30a1\u30a4\u30eb\u304c\u524a\u9664\u3055\u308c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<tree>")," \u3068\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f no-overlay \u30e2\u30fc\u30c9\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file=<file>")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30b9\u30b9\u30da\u30c3\u30af\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u5f15\u6570\u306e\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u3067\u6e21\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u304c\u6b63\u78ba\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u3067\u3042\u308c\u3070\u3001\u6a19\u6e96\u5165\u529b\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Pathspec \u306e\u8981\u7d20\u306f LF \u307e\u305f\u306f CR/LF \u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.quotePath"),"\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u53c2\u7167\uff09\u306e\u8aac\u660e\u306b\u5f93\u3063\u3066\u3001pathspec \u306e\u8981\u7d20\u3092\u5f15\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")," \u304a\u3088\u3073\u30b0\u30ed\u30fc\u30d0\u30eb\u306a ",(0,a.kt)("inlineCode",{parentName:"p"},"--literal-pathspecs")," \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file")," \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u306e\u307f\u610f\u5473\u3092\u6301\u3061\u307e\u3059\u3002Pathspec \u306e\u8981\u7d20\u306f NUL \u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u3001\u305d\u306e\u4ed6\u306e\u6587\u5b57\u306f\u3059\u3079\u3066\u6587\u5b57\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\uff08\u6539\u884c\u3084\u5f15\u7528\u7b26\u3082\u542b\u3080\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u4ee5\u4e0a\u306e\u5f15\u6570\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u89e3\u91c8\u3057\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>...")),(0,a.kt)("p",{parentName:"li"},"\u64cd\u4f5c\u306e\u5f71\u97ff\u3092\u53d7\u3051\u308b\u30d1\u30b9\u3092\u5236\u9650\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitglossary"},"gitglossary[7]")," \u306e pathspec \u30a8\u30f3\u30c8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"))),(0,a.kt)("h3",{id:"examples-3"},"EXAMPLES"),(0,a.kt)("p",null,"\u6b21\u306e\u624b\u9806\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"master")," \u30d6\u30e9\u30f3\u30c1\u306b\u5207\u308a\u66ff\u3048\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile")," \u30922\u3064\u524d\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u623b\u3057\u3001\u8aa4\u3063\u3066 hello.c \u3092\u524a\u9664\u3057\u3001\u305d\u308c\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u53d6\u308a\u623b\u3057\u307e\u3059\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git switch main\n$ git restore --source main~2 Makefile  (1)\n$ rm -f hello.c\n$ git restore hello.c                   (2)\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"take a file out of another commit"),(0,a.kt)("li",{parentName:"ol"},"restore hello.c from the index")),(0,a.kt)("p",null,"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u3059\u3079\u3066\u306e C \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u8a00\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore '*.c'\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"*.c")," \u306e\u524d\u5f8c\u306e\u5f15\u7528\u7b26\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a1\u30a4\u30eb ",(0,a.kt)("inlineCode",{parentName:"p"},"hello.c")," \u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5b58\u5728\u3057\u306a\u304f\u306a\u3063\u305f\u5834\u5408\u3067\u3082\u5fa9\u5143\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30b0\u30ed\u30d6\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u7167\u5408\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u305f\u3081\u3067\u3059\uff08\u30b7\u30a7\u30eb\u306b\u3088\u308b\u4f5c\u696d\u30c4\u30ea\u30fc\u5185\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002"),(0,a.kt)("p",null,"\u73fe\u5728\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b\u306b\u306f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore .\n")),(0,a.kt)("p",null,"\u307e\u305f\u306f\u3001",(0,a.kt)("em",{parentName:"p"},"\u6700\u4e0a\u4f4d"),"\u306e pathspec \u30de\u30b8\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u3059\u3079\u3066\u306e\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3057\u307e\u3059\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitglossary"},"gitglossary [7]")," \u3092\u53c2\u7167\uff09\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore :/\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HEAD")," \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5fa9\u5143\u3059\u308b\u306b\u306f\uff08\u3053\u308c\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-reset"},"git-reset[1]")," \u3092\u4f7f\u7528\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\uff09"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore --staged hello.c\n")),(0,a.kt)("p",null,"\u307e\u305f\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u4e21\u65b9\u3092\u5fa9\u5143\u3067\u304d\u307e\u3059\uff08\u3053\u308c\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-checkout"},"git-checkout [1]")," \u3092\u4f7f\u7528\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\uff09"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore --source=HEAD --staged --worktree hello.c\n")),(0,a.kt)("p",null,"\u307e\u305f\u306f\u3001\u3088\u308a\u5b9f\u7528\u7684\u3067\u8aad\u307f\u306b\u304f\u3044\u77ed\u3044\u5f62\u5f0f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git restore -s@ -SW hello.c\n")),(0,a.kt)("h3",{id:"see-also-1"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-checkout"},"git-checkout[1]"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-reset"},"git-reset[1]")),(0,a.kt)("h2",{id:"rm"},(0,a.kt)("inlineCode",{parentName:"h2"},"rm")),(0,a.kt)("h3",{id:"name-6"},"NAME"),(0,a.kt)("p",null,"git-rm \u2014 \u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-6"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch]\n          [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n          [--] [<pathspec>...]\n")),(0,a.kt)("h3",{id:"description-6"},"DESCRIPTION"),(0,a.kt)("p",null,"pathspec \u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u3001\u3042\u308b\u3044\u306f\u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002(\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u306e\u307f\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306f\u6b8b\u3059\u3068\u3044\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3046\u3057\u305f\u3044\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"/bin/rm")," \u3092\u4f7f\u3044\u307e\u3059)\u3002\u524a\u9664\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u3068\u540c\u4e00\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u306e\u5185\u5bb9\u306e\u66f4\u65b0\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-f")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--cached")," \u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3001\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u304b\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u3069\u3061\u3089\u304b\u3068\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3060\u3051\u304b\u3089\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002sparse-checkout \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408 (",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-sparse-checkout"},"git-sparse-checkout[1]")," \u3092\u53c2\u7167)\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git rm")," \u306f sparse-checkout \u30d1\u30bf\u30fc\u30f3\u5185\u306e\u30d1\u30b9\u306e\u307f\u3092\u524a\u9664\u3057\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options-6"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<pathspec>...")),(0,a.kt)("p",{parentName:"li"},"\u524a\u9664\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002\u5148\u982d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\uff08\u4f8b\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"dir")," \u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file1")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"dir/file2")," \u3092\u524a\u9664\uff09\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3001\u3059\u3079\u3066\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u518d\u5e30\u7684\u306b\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u306e\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-r")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001Git \u306b\u77e5\u3089\u308c\u3066\u3044\u308b\u30d1\u30b9\u306e\u307f\u3092\u524a\u9664\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u30fb\u30b0\u30ed\u30d6\u306f\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5883\u754c\u3092\u8d8a\u3048\u3066\u30de\u30c3\u30c1\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u30012\u3064\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea ",(0,a.kt)("inlineCode",{parentName:"p"},"d")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"d2")," \u304c\u3042\u3063\u305f\u3068\u304d\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git rm 'd*'")," \u3092\u4f7f\u3046\u306e\u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"git rm 'd/*'")," \u3092\u4f7f\u3046\u306e\u3068\u3067\u306f\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u8a73\u7d30\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitglossary"},"gitglossary[7]")," \u306e ",(0,a.kt)("em",{parentName:"p"},"pathspec")," \u30a8\u30f3\u30c8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-f"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--force")),(0,a.kt)("p",{parentName:"li"},"\u6700\u65b0\u306e\u30c1\u30a7\u30c3\u30af\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--dry-run")),(0,a.kt)("p",{parentName:"li"},"\u5b9f\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u4ee3\u308f\u308a\u306b\u3001\u305d\u308c\u3089\u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8868\u793a\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u524a\u9664\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-r")),(0,a.kt)("p",{parentName:"li"},"\u5148\u982d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u518d\u5e30\u7684\u306a\u524a\u9664\u3092\u8a31\u53ef\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u304b\u3089\u5206\u96e2\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u9593\u9055\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--cached")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d1\u30b9\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u89e3\u9664\u3057\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u306e\u307f\u524a\u9664\u3057\u307e\u3059\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306b\u95a2\u4fc2\u306a\u304f\u3001\u305d\u306e\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-unmatch")),(0,a.kt)("p",{parentName:"li"},"\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u30bc\u30ed\u3067\u7d42\u4e86\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git rm")," \u306f\u901a\u5e38\u3001\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b1\u884c\uff08 ",(0,a.kt)("inlineCode",{parentName:"p"},"rm")," \u30b3\u30de\u30f3\u30c9\u306e\u5f62\u5f0f\u3067\uff09\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u305d\u306e\u51fa\u529b\u3092\u6291\u5236\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file=<file>")),(0,a.kt)("p",{parentName:"li"},"Pathspec \u306f\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u5f15\u6570\u306e\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u3067\u6e21\u3055\u308c\u307e\u3059\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u304c\u6b63\u78ba\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u306e\u5834\u5408\u3001\u6a19\u6e96\u5165\u529b\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Pathspec \u306e\u8981\u7d20\u306f LF \u307e\u305f\u306f CR/LF \u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u8a2d\u5b9a\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.quotePath"),"\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u53c2\u7167\uff09\u306e\u8aac\u660e\u306b\u5f93\u3063\u3066\u3001pathspec \u306e\u8981\u7d20\u3092\u5f15\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")," \u3084\u30b0\u30ed\u30fc\u30d0\u30eb\u306a ",(0,a.kt)("inlineCode",{parentName:"p"},"--literal-pathspecs")," \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-file-nul")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pathspec-from-file")," \u3067\u306e\u307f\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002 Pathspec \u8981\u7d20\u306f NUL \u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u3001\u4ed6\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u306f\u6587\u5b57\u901a\u308a\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\uff08\u6539\u884c\u3068\u5f15\u7528\u7b26\u3092\u542b\u3080\uff09\u3002"))),(0,a.kt)("h3",{id:"removing-files-that-have-disappeared-from-the-filesystem"},"REMOVING FILES THAT HAVE DISAPPEARED FROM THE FILESYSTEM"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git rm")," \u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u6d88\u3048\u3066\u3057\u307e\u3063\u305f\u30d1\u30b9\u3060\u3051\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u524a\u9664\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u5fdc\u3058\u3066\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git commit-a"),"\u300d\u306e\u4f7f\u7528"),(0,a.kt)("p",{parentName:"li"},"\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u3067\u3001\u8ffd\u8de1\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3059\u3079\u3066\u306e\u5909\u66f4\u3092\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u8a18\u9332\u3057\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u3059\u3079\u3066\u306e\u524a\u9664\u3092\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"git rm")," \u3067\u306f\u306a\u304f\uff09",(0,a.kt)("inlineCode",{parentName:"p"},"rm")," \u3067\u8a18\u9332\u3059\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git commit -a")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u524a\u9664\u306b\u81ea\u52d5\u7684\u306b\u6c17\u3065\u304d\u3001\u8a18\u9332\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git add -u")," \u3092\u4f7f\u7528\u3057\u3066\u3001\u30b3\u30df\u30c3\u30c8\u305b\u305a\u306b\u540c\u69d8\u306e\u52b9\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git add -A"),"\u300d\u306e\u4f7f\u7528"),(0,a.kt)("p",{parentName:"li"},"\u30d9\u30f3\u30c0\u30fc\u30d6\u30e9\u30f3\u30c1\u306e\u65b0\u3057\u3044\u30b3\u30fc\u30c9\u30c9\u30ed\u30c3\u30d7\u3092\u53d7\u3051\u5165\u308c\u308b\u3068\u304d\u306f\u3001\u30d1\u30b9\u306e\u524a\u9664\u3068\u65b0\u3057\u3044\u30d1\u30b9\u306e\u8ffd\u52a0\u3001\u304a\u3088\u3073\u65e2\u5b58\u306e\u30d1\u30b9\u306e\u5909\u66f4\u306e\u4e21\u65b9\u3092\u8a18\u9332\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u901a\u5e38\u3001\u6700\u521d\u306b\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u8ffd\u8de1\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git ls-files -z | xargs -0 rm -f\n")),(0,a.kt)("p",{parentName:"li"},"\u6b21\u306b\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u3067\u65b0\u3057\u3044\u30b3\u30fc\u30c9\u3092\u89e3\u51cd\u3057\u307e\u3059\u3002\u307e\u305f\u306f\u3001\u5909\u66f4\u3092\u4f5c\u696d\u30c4\u30ea\u30fc\u306b ",(0,a.kt)("em",{parentName:"p"},"rsync")," \u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u305d\u306e\u5f8c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u5185\u306e\u3059\u3079\u3066\u306e\u524a\u9664\u3001\u8ffd\u52a0\u3001\u304a\u3088\u3073\u5909\u66f4\u3092\u8a18\u9332\u3059\u308b\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git add -A\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-add"},"git-add[1]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4ed6\u306e\u65b9\u6cd5"),(0,a.kt)("p",{parentName:"li"},"\u672c\u5f53\u306b\u5b9f\u884c\u3057\u305f\u3044\u306e\u304c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5b58\u5728\u3057\u306a\u304f\u306a\u3063\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u524a\u9664\u3059\u308b\u3053\u3068\u3060\u3051\u3067\u3042\u308b\u5834\u5408\uff08\u304a\u305d\u3089\u304f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304c\u30c0\u30fc\u30c6\u30a3\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit -a")," \u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\uff09\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached\n")))),(0,a.kt)("h3",{id:"submodules-1"},"SUBMODULES"),(0,a.kt)("p",null,"gitfile \u3092\u4f7f\u3063\u3066\u3044\u308b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb (\u3064\u307e\u308a\u3001Git \u30d0\u30fc\u30b8\u30e7\u30f3 1.7.8 \u4ee5\u964d\u3067\u30af\u30ed\u30fc\u30f3\u3055\u308c\u305f\u3082\u306e) \u3060\u3051\u304c\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},".git")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3042\u308b\u304b\u3089\u3067\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb (\u3042\u308b\u3044\u306f\u305d\u306e\u4e2d\u306b\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e) \u304c\u307e\u3060 ",(0,a.kt)("inlineCode",{parentName:"p"},".git")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git rm")," \u3067\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e git \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e git \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3055\u305b\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6b74\u53f2\u3092\u4fdd\u8b77\u3057\u307e\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitmodules"},"gitmodules[5]")," \u30d5\u30a1\u30a4\u30eb\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"submodule.<name>")," \u30bb\u30af\u30b7\u30e7\u30f3\u3082\u524a\u9664\u3055\u308c\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u307e\u3059 (",(0,a.kt)("inlineCode",{parentName:"p"},"--cached")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"-n")," \u304c\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u5834\u5408)\u3002"),(0,a.kt)("p",null,"\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001HEAD \u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u540c\u3058\u3067\u3001\u8ffd\u8de1\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u5909\u66f4\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u7121\u8996\u3055\u308c\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u5b58\u5728\u3057\u3066\u3044\u306a\u3044\u3068\u304d\u306b\u3001\u6700\u65b0\u306e\u72b6\u614b\u3067\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002\u7121\u8996\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u6d88\u8017\u54c1\u3068\u307f\u306a\u3055\u308c\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ef\u30fc\u30af\u30c4\u30ea\u30fc\u304c\u524a\u9664\u3055\u308c\u308b\u306e\u3092\u6b62\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002"),(0,a.kt)("p",null,"\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ed\u30fc\u30ab\u30eb\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3092\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3057\u305f\u3044\u3060\u3051\u3067\u3001\u524a\u9664\u3092\u30b3\u30df\u30c3\u30c8\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001\u4ee3\u308f\u308a\u306b ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-submodule"},"git-submodule[1]")," ",(0,a.kt)("inlineCode",{parentName:"p"},"deinit")," \u3092\u4f7f\u3044\u307e\u3059\u3002\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u524a\u9664\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitsubmodules"},"gitsubmodules[7]")," \u3082\u53c2\u7167\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("h3",{id:"examples-4"},"EXAMPLES"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git rm Documentation/\\*.txt")),(0,a.kt)("p",{parentName:"li"},"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u306b\u3042\u308b\u3059\u3079\u3066\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"*.txt")," \u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30b9\u30bf\u30ea\u30b9\u30af*\u304c\u30b7\u30a7\u30eb\u304b\u3089\u5f15\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u30b7\u30a7\u30eb\u3067\u306f\u306a\u304f Git \u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"Documentation/")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3084\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u540d\u3092\u5c55\u958b\u3055\u305b\u308b\u305f\u3081\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git rm -f git-*.sh")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u4f8b\u3067\u306f\u30b7\u30a7\u30eb\u304c\u30a2\u30b9\u30bf\u30ea\u30b9\u30af\u3092\u5c55\u958b\u3059\u308b\u305f\u3081\uff08\u3064\u307e\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u660e\u793a\u7684\u306b\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b\uff09\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"subdir/git-foo.sh")," \u306f\u524a\u9664\u3055\u308c\u307e\u305b\u3093\u3002"))),(0,a.kt)("h3",{id:"bugs-1"},"BUGS"),(0,a.kt)("p",null,"\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0\u3067\u4eba\u53e3\u306e\u591a\u3044\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u524a\u9664\u3055\u308c\u308b\u305f\u3073\u306b (\u524a\u9664\u306e\u524d\u5f8c\u3067\u30b3\u30df\u30c3\u30c8\u3092\u5207\u308a\u66ff\u3048\u305f\u3068\u304d\u306a\u3069)\u3001\u53e4\u3044\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u304c\u53e4\u3044\u5834\u6240\u306b\u6b8b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u53e4\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u524a\u9664\u3057\u3066\u3082\u5b89\u5168\u306a\u306e\u306f gitfile \u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3060\u3051\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5c65\u6b74\u3082\u524a\u9664\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u624b\u9806\u306f\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u518d\u5e30\u7684\u306a\u66f4\u65b0\u304c\u5b9f\u88c5\u3055\u308c\u305f\u6642\u70b9\u3067\u5ec3\u6b62\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"see-also-2"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-add"},"git-add[1]")),(0,a.kt)("h2",{id:"bisect"},(0,a.kt)("inlineCode",{parentName:"h2"},"bisect")),(0,a.kt)("h3",{id:"name-7"},"NAME"),(0,a.kt)("p",null,"git-bisect \u2014 \u30d0\u30a4\u30ca\u30ea\u691c\u7d22\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d0\u30b0\u3092\u5f15\u304d\u8d77\u3053\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u898b\u3064\u3051\u308b"),(0,a.kt)("h3",{id:"synopsis-7"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git bisect <subcommand> <options>\n")),(0,a.kt)("h3",{id:"description-7"},"DESCRIPTION"),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u5fdc\u3058\u3066\u7570\u306a\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53d6\u308a\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git bisect start [--term-{new,bad}=<term> --term-{old,good}=<term>]\n          [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]\ngit bisect (bad|new|<term-new>) [<rev>]\ngit bisect (good|old|<term-old>) [<rev>...]\ngit bisect terms [--term-good | --term-bad]\ngit bisect skip [(<rev>|<range>)...]\ngit bisect reset [<commit>]\ngit bisect (visualize|view)\ngit bisect replay <logfile>\ngit bisect log\ngit bisect run <cmd>...\ngit bisect help\n")),(0,a.kt)("p",null,"\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u691c\u7d22\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u5c65\u6b74\u3067\u30d0\u30b0\u304c\u767a\u751f\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u6700\u521d\u306b\u3001\u30d0\u30b0\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u300cbad\u300d\u30b3\u30df\u30c3\u30c8\u3068\u3001\u30d0\u30b0\u304c\u767a\u751f\u3059\u308b\u524d\u306b\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u300cgood\u300d\u30b3\u30df\u30c3\u30c8\u3092\u4f1d\u3048\u308b\u3053\u3068\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\u6b21\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u306f\u3001\u3053\u308c\u30892\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u9593\u306e\u30b3\u30df\u30c3\u30c8\u3092\u9078\u629e\u3057\u3001\u9078\u629e\u3057\u305f\u30b3\u30df\u30c3\u30c8\u304c\u300cgood\u300d\u304b\u300cbad\u300d\u304b\u3092\u5c0b\u306d\u307e\u3059\u3002\u5909\u66f4\u3092\u5c0e\u5165\u3057\u305f\u6b63\u78ba\u306a\u30b3\u30df\u30c3\u30c8\u304c\u898b\u3064\u304b\u308b\u307e\u3067\u3001\u7bc4\u56f2\u3092\u7d5e\u308a\u8fbc\u307f\u7d9a\u3051\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u5b9f\u969b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u3092\u4f7f\u7528\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u66f4\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1b\u4f8b\uff1a\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3001\u307e\u305f\u306f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u305f\u30b3\u30df\u30c3\u30c8\u3002\u3053\u306e\u3088\u308a\u4e00\u822c\u7684\u306a\u4f7f\u7528\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u300cgood\u300d\u3068\u300cbad\u300d\u306e\u4ee3\u308f\u308a\u306b\u300c\u53e4\u3044\u300d\u3068\u300cnew\u300d\u3068\u3044\u3046\u7528\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3001\u72ec\u81ea\u306e\u7528\u8a9e\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u300cAlternate terms\u300d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("h4",{id:"basic-bisect-commands-start-bad-good"},"Basic bisect commands: start, bad, good"),(0,a.kt)("p",null,"\u4f8b\u3068\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3 ",(0,a.kt)("inlineCode",{parentName:"p"},"v2.6.13-rc2")," \u3067\u6a5f\u80fd\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u6a5f\u80fd\u3092\u58ca\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u898b\u3064\u3051\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u30d0\u30a4\u30bb\u30af\u30c8\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start\n$ git bisect bad                 # Current version is bad\n$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good\n")),(0,a.kt)("p",null,"\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u60aa\u3044\u30b3\u30df\u30c3\u30c8\u30681\u3064\u306e\u826f\u3044\u30b3\u30df\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u306f\u305d\u306e\u5c65\u6b74\u7bc4\u56f2\u306e\u4e2d\u592e\u3067\u30b3\u30df\u30c3\u30c8\u3092\u9078\u629e\u3057\u3001\u305d\u308c\u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u51fa\u529b\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Bisecting: 675 revisions left to test after this (roughly 10 steps)\n")),(0,a.kt)("p",null,"\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u6b63\u3057\u304f\u6a5f\u80fd\u3059\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u3057\u307e\u3059"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect good\n")),(0,a.kt)("p",null,"\u305d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u58ca\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u3057\u307e\u3059"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect bad\n")),(0,a.kt)("p",null,"\u6b21\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u306f\u6b21\u306e\u3088\u3046\u306b\u5fdc\u7b54\u3057\u307e\u3059"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Bisecting: 337 revisions left to test after this (roughly 9 steps)\n")),(0,a.kt)("p",null,"\u30d7\u30ed\u30bb\u30b9\u3092\u7e70\u308a\u8fd4\u3057\u7d9a\u3051\u307e\u3059\u3002\u30c4\u30ea\u30fc\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3001\u305d\u308c\u304c\u826f\u3044\u304b\u60aa\u3044\u304b\u306b\u5fdc\u3058\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect good")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect bad")," \u3092\u5b9f\u884c\u3057\u3066\u3001\u30c6\u30b9\u30c8\u304c\u5fc5\u8981\u306a\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u3092\u8981\u6c42\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u6700\u7d42\u7684\u306b\u306f\u3001\u691c\u67fb\u3059\u308b\u30ea\u30d3\u30b8\u30e7\u30f3\u304c\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u30b3\u30de\u30f3\u30c9\u306f\u6700\u521d\u306e\u4e0d\u6b63\u306a\u30b3\u30df\u30c3\u30c8\u306e\u8aac\u660e\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u53c2\u7167 ",(0,a.kt)("inlineCode",{parentName:"p"},"refs/bisect/bad")," \u306f\u3001\u305d\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30dd\u30a4\u30f3\u30c8\u3057\u305f\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002"),(0,a.kt)("h4",{id:"bisect-reset"},"Bisect reset"),(0,a.kt)("p",null,"\u4e8c\u7b49\u5206\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u5f8c\u3001\u4e8c\u7b49\u5206\u72b6\u614b\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3057\u3066\u5143\u306e HEAD \u306b\u623b\u3059\u306b\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect reset\n")),(0,a.kt)("p",null,"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u3053\u308c\u306b\u3088\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u304c\u958b\u59cb\u3059\u308b\u524d\u306b\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u306b\u30c4\u30ea\u30fc\u304c\u623b\u308a\u307e\u3059\u3002\uff08\u65b0\u3057\u3044",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect start")," \u3082\u3001\u53e4\u3044\u4e8c\u5206\u72b6\u614b\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u305f\u3081\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff09"),(0,a.kt)("p",null,"\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5f15\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u4ee3\u308f\u308a\u306b\u5225\u306e\u30b3\u30df\u30c3\u30c8\u306b\u623b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect reset <commit>\n")),(0,a.kt)("p",null,"\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect reset bisect/bad")," \u306f\u6700\u521d\u306e\u4e0d\u826f\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u307e\u3059\u304c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect reset HEAD")," \u306f\u73fe\u5728\u306e\u4e8c\u7b49\u5206\u30b3\u30df\u30c3\u30c8\u306e\u307e\u307e\u306b\u3057\u3001\u30b3\u30df\u30c3\u30c8\u306e\u5207\u308a\u66ff\u3048\u3092\u307e\u3063\u305f\u304f\u56de\u907f\u3057\u307e\u3059\u3002"),(0,a.kt)("h4",{id:"alternate-terms"},"Alternate terms"),(0,a.kt)("p",null,"\u6642\u306b\u306f\u3001\u7834\u640d\u3092\u3082\u305f\u3089\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u300c\u53e4\u3044\u300d\u72b6\u614b\u3068\u300cnew\u300d\u72b6\u614b\u306e\u9593\u306b\u5909\u5316\u3092\u3082\u305f\u3089\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3059\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u7279\u5b9a\u306e\u4fee\u6b63\u3092\u5c0e\u5165\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u308b\u3044\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6700\u7d42\u7684\u306b\u3042\u306a\u305f\u306e\u4f1a\u793e\u306e\u547d\u540d\u57fa\u6e96\u306b\u5408\u308f\u305b\u3066\u5909\u63db\u3055\u308c\u305f\u6700\u521d\u306e\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3057\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u306a\u3069\u306a\u3069\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u3001\u300c\u5909\u66f4\u524d\u306e\u72b6\u614b\u300d\u3068\u300c\u5909\u66f4\u5f8c\u306e\u72b6\u614b\u300d\u3092\u8868\u3059\u306e\u306b\u300cgood\u300d\u3068\u300cbad\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u4f7f\u3046\u306e\u306f\u975e\u5e38\u306b\u6df7\u4e71\u3092\u62db\u304f\u6050\u308c\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u300cgood\u300d\u3068\u300cbad\u300d\u306e\u4ee3\u308f\u308a\u306b\u3001\u305d\u308c\u305e\u308c\u300cold\u300d\u3068\u300cnew\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(\u305f\u3060\u3057\u3001\u300cgood\u300d\u3068\u300cbad\u300d\u3068\u300cold\u300d\u3068\u300cnew\u300d\u3092\u6df7\u305c\u3066\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3001\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\uff09\u3002)"),(0,a.kt)("p",null,"\u3088\u308a\u4e00\u822c\u7684\u306a\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f\u3001\u3042\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u300cnew\u300d\u30b3\u30df\u30c3\u30c8\u3068\u3001\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u305f\u306a\u3044\u300c\u53e4\u3044\u300d\u30b3\u30df\u30c3\u30c8\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u306b\u6e21\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u304c\u3042\u308b\u30b3\u30df\u30c3\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3059\u308b\u305f\u3073\u306b\u3001\u305d\u306e\u30b3\u30df\u30c3\u30c8\u304c\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u3082\u3057\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u30b3\u30df\u30c3\u30c8\u3092\u300cnew\u300d\u3068\u30de\u30fc\u30af\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u300cold\u300d\u3068\u30de\u30fc\u30af\u3057\u307e\u3059\u3002\u30d0\u30a4\u30bb\u30af\u30b7\u30e7 \u30f3\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u306f\u3069\u306e\u30b3\u30df\u30c3\u30c8\u304c\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5c0e\u5165\u3057\u305f\u306e\u304b\u3092\u5831\u544a\u3057\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u300cgood\u300d\u3068\u300cbad\u300d\u306e\u4ee3\u308f\u308a\u306b\u300cold\u300d\u3068\u300cnew\u300d\u3092\u4f7f\u3046\u306b\u306f\u3001\u5f15\u6570\u3068\u3057\u3066\u30b3\u30df\u30c3\u30c8\u3092\u6307\u5b9a\u305b\u305a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect start")," \u3092\u5b9f\u884c\u3057\u3001\u305d\u306e\u5f8c\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u30b3\u30df\u30c3\u30c8\u3092\u8ffd\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect old [<rev>]\n")),(0,a.kt)("p",null,"\u30b3\u30df\u30c3\u30c8\u304c\u6c42\u3081\u3089\u308c\u305f\u5909\u66f4\u306e\u524d\u3067\u3042\u3063\u305f\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u3001\u307e\u305f\u306f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect new [<rev>...]\n")),(0,a.kt)("p",null,"\u305d\u308c\u304c\u5f8c\u3060\u3063\u305f\u3053\u3068\u3092\u793a\u3059\u305f\u3081\u306b\u3002"),(0,a.kt)("p",null,"\u73fe\u5728\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u7528\u8a9e\u3092\u601d\u3044\u51fa\u3055\u305b\u308b\u306b\u306f\u3001"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect terms\n")),(0,a.kt)("p",null,"\u53e4\u3044\uff08\u305d\u308c\u305e\u308c\u65b0\u3057\u3044\uff09\u7528\u8a9e\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect terms --term-old")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect terms --term-good")," \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u300cbad\u300d/\u300cgood\u300d\u307e\u305f\u306f\u300cnew\u300d/\u300cold\u300d\u306e\u4ee3\u308f\u308a\u306b\u72ec\u81ea\u306e\u7528\u8a9e\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"reset"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"start"),"\u3001\u2026\u306a\u3069\u306e\u65e2\u5b58\u306e\u4e8c\u7b49\u5206\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u9664\u304f\uff09\u3092\u958b\u59cb\u3057\u3066\u4efb\u610f\u306e\u540d\u524d\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u4e8c\u7b49\u5206\u7dda\u3092\u4f7f\u7528\u3057\u3066"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect start --term-old <term-old> --term-new <term-new>\n")),(0,a.kt)("p",null,"\u305f\u3068\u3048\u3070\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u4f4e\u4e0b\u3092\u3082\u305f\u3089\u3059\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u6b21\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect start --term-old fast --term-new slow\n")),(0,a.kt)("p",null,"\u307e\u305f\u306f\u3001\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\u63a2\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git bisect start --term-new fixed --term-old broken\n")),(0,a.kt)("p",null,"\u6b21\u306b\u3001\u30b3\u30df\u30c3\u30c8\u3092\u30de\u30fc\u30af\u3059\u308b\u305f\u3081\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect good")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect bad")," \u306e\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect <term-old>")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect <term-new>")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("h4",{id:"bisect-visualizeview"},"Bisect visualize/view"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"gitk")," \u306b\u73fe\u5728\u6b8b\u3063\u3066\u3044\u308b\u5bb9\u7591\u8005\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001\u4e8c\u7b49\u5206\u30d7\u30ed\u30bb\u30b9\u4e2d\u306b\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u307e\u3059\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"visualize")," \u306e\u4ee3\u308f\u308a\u306b\u30b5\u30d6\u30b3\u30de\u30f3\u30c9 ",(0,a.kt)("inlineCode",{parentName:"p"},"view")," \u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff09\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect visualize\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DISPLAY")," \u74b0\u5883\u5909\u6570\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git log")," \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"-p")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat")," \u306a\u3069\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect visualize --stat\n")),(0,a.kt)("h4",{id:"bisect-log-and-bisect-replay"},"Bisect log and bisect replay"),(0,a.kt)("p",null,"\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u826f\u597d\u307e\u305f\u306f\u4e0d\u826f\u3068\u3057\u3066\u30de\u30fc\u30af\u3057\u305f\u5f8c\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u3066\u3001\u3053\u308c\u307e\u3067\u306b\u884c\u308f\u308c\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect log\n")),(0,a.kt)("p",null,"\u30ea\u30d3\u30b8\u30e7\u30f3\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u6307\u5b9a\u3092\u9593\u9055\u3048\u305f\u5834\u5408\u306f\u3001\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3001\u7de8\u96c6\u3057\u3066\u8aa4\u3063\u305f\u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664\u3057\u3066\u304b\u3089\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u3066\u4fee\u6b63\u3055\u308c\u305f\u72b6\u614b\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect reset\n$ git bisect replay that-file\n")),(0,a.kt)("h4",{id:"avoiding-testing-a-commit"},"Avoiding testing a commit"),(0,a.kt)("p",null,"\u30d0\u30a4\u30bb\u30af\u30c8\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u9014\u4e2d\u3067\u3001\u63d0\u6848\u3055\u308c\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u304c\u30c6\u30b9\u30c8\u306b\u9069\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\uff08\u305f\u3068\u3048\u3070\u3001\u30d3\u30eb\u30c9\u306b\u5931\u6557\u3057\u3001\u5931\u6557\u304c\u8ffd\u8de1\u3057\u3066\u3044\u308b\u30d0\u30b0\u3068\u306f\u4f55\u306e\u95a2\u4fc2\u3082\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\uff09\u3001\u8fd1\u304f\u306e\u30b3\u30df\u30c3\u30c8\u3092\u624b\u52d5\u3067\u9078\u629e\u3057\u3001\u4ee3\u308f\u308a\u306b\u305d\u308c\u3092\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u4f8b\u3048\u3070\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect good/bad                   # previous round was good or bad.\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n$ git bisect visualize                  # oops, that is uninteresting.\n$ git reset --hard HEAD~3               # try 3 revisions before what\n                                        # was suggested\n")),(0,a.kt)("p",null,"\u6b21\u306b\u3001\u9078\u629e\u3057\u305f\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3001\u305d\u306e\u5f8c\u3001\u901a\u5e38\u306e\u65b9\u6cd5\u3067\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u826f\u597d\u307e\u305f\u306f\u4e0d\u826f\u3068\u3057\u3066\u30de\u30fc\u30af\u3057\u307e\u3059\u3002"),(0,a.kt)("h4",{id:"bisect-skip"},"Bisect skip"),(0,a.kt)("p",null,"\u81ea\u5206\u3067\u8fd1\u304f\u306e\u30b3\u30df\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u3066\u3001Git \u306b\u305d\u308c\u3092\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u4f9d\u983c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect skip                 # Current version cannot be tested\n")),(0,a.kt)("p",null,"\u305f\u3060\u3057\u3001\u63a2\u3057\u3066\u3044\u308b\u30b3\u30df\u30c3\u30c8\u306b\u96a3\u63a5\u3059\u308b\u30b3\u30df\u30c3\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3068\u3001Git \u306f\u305d\u308c\u3089\u306e\u30b3\u30df\u30c3\u30c8\u306e\u3069\u308c\u304c\u6700\u521d\u306e\u60aa\u3044\u30b3\u30df\u30c3\u30c8\u3067\u3042\u3063\u305f\u304b\u3092\u6b63\u78ba\u306b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u7bc4\u56f2\u8868\u8a18\u3092\u4f7f\u7528\u3057\u3066\u30011\u3064\u306e\u30b3\u30df\u30c3\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u7bc4\u56f2\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect skip v2.5..v2.6\n")),(0,a.kt)("p",null,"\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"v2.5")," \u4ee5\u964d\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"v2.6")," \u307e\u3067\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30c6\u30b9\u30c8\u3057\u3066\u306f\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u4e8c\u5206\u6cd5\u30d7\u30ed\u30bb\u30b9\u306b\u4f1d\u3048\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u7bc4\u56f2\u306e\u6700\u521d\u306e\u30b3\u30df\u30c3\u30c8\u3082\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect skip v2.5 v2.5..v2.6\n")),(0,a.kt)("p",null,"\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"v2.5")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"v2.6"),"\uff08\u4e21\u7aef\u3092\u542b\u3080\uff09\u306e\u9593\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u30d0\u30a4\u30bb\u30af\u30c8\u30d7\u30ed\u30bb\u30b9\u306b\u901a\u77e5\u3057\u307e\u3059\u3002"),(0,a.kt)("h4",{id:"cutting-down-bisection-by-giving-more-parameters-to-bisect-start"},"Cutting down bisection by giving more parameters to bisect start"),(0,a.kt)("p",null,"\u8ffd\u8de1\u3057\u3066\u3044\u308b\u554f\u984c\u306b\u30c4\u30ea\u30fc\u306e\u3069\u306e\u90e8\u5206\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u304b\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"bisect start")," \u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3059\u308b\u3068\u304d\u306b\u30d1\u30b9\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8a66\u884c\u56de\u6570\u3092\u3055\u3089\u306b\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start -- arch/i386 include/asm-i386\n")),(0,a.kt)("p",null,"\u4e8b\u524d\u306b\u8907\u6570\u306e\u9069\u5207\u306a\u30b3\u30df\u30c3\u30c8\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001bisect start\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3059\u308b\u3068\u304d\u306b\u3001\u4e0d\u6b63\u306a\u30b3\u30df\u30c3\u30c8\u306e\u76f4\u5f8c\u306b\u3059\u3079\u3066\u306e\u9069\u5207\u306a\u30b3\u30df\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30012\u7b49\u5206\u30b9\u30da\u30fc\u30b9\u3092\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n                   # v2.6.20-rc6 is bad\n                   # v2.6.20-rc4 and v2.6.20-rc1 are good\n")),(0,a.kt)("h4",{id:"bisect-run"},"Bisect run"),(0,a.kt)("p",null,"\u73fe\u5728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u826f\u3044\u304b\u60aa\u3044\u304b\u3092\u5224\u65ad\u3067\u304d\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u3066\u4e8c\u5206\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect run my_script arguments\n")),(0,a.kt)("p",null,"\u30b9\u30af\u30ea\u30d7\u30c8\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"my_script"),"\uff09\u306f\u3001\u73fe\u5728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u826f\u3044/\u53e4\u3044\u5834\u5408\u306f\u30b3\u30fc\u30c90\u3067\u7d42\u4e86\u3057\u3001\u73fe\u5728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u60aa\u3044/\u65b0\u3057\u3044\u5834\u5408\u306f125\u3092\u9664\u304f1\u301c127\uff08\u542b\u3080\uff09\u306e\u30b3\u30fc\u30c9\u3067\u7d42\u4e86\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",null,"\u305d\u306e\u4ed6\u306e\u7d42\u4e86\u30b3\u30fc\u30c9\u306f\u3001\u4e8c\u5206\u6cd5\u30d7\u30ed\u30bb\u30b9\u3092\u4e2d\u6b62\u3057\u307e\u3059\u3002 exit(-1) \u3092\u4ecb\u3057\u3066\u7d42\u4e86\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001$? = 255 \u304c\u6b8b\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08exit(3) \u306e\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u3092\u53c2\u7167\uff09\u3001\u5024\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"\uff06 0377")," \u3067\u5207\u308a\u523b\u307e\u308c\u307e\u3059\u3002"),(0,a.kt)("p",null,"\u7279\u5225\u306a\u7d42\u4e86\u30b3\u30fc\u30c9 125 \u306f\u3001\u73fe\u5728\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u7d42\u4e86\u3059\u308b\u3068\u3001\u73fe\u5728\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u307e\u3059 (\u4e0a\u8a18\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect skip")," \u3092\u53c2\u7167)\u3002125 \u306f\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u4f7f\u3046\u6700\u3082\u59a5\u5f53\u306a\u5024\u3068\u3057\u3066\u9078\u3070\u308c\u307e\u3057\u305f\u3002\u306a\u305c\u306a\u3089\u3001126 \u3068 127 \u306f POSIX \u30b7\u30a7\u30eb\u3067\u7279\u5b9a\u306e\u30a8\u30e9\u30fc\u72b6\u614b\u3092\u77e5\u3089\u305b\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059 (127 \u306f\u300c\u30b3\u30de\u30f3\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u300d\u3001126 \u306f\u300c\u30b3\u30de\u30f3\u30c9\u306f\u898b\u3064\u304b\u3063\u305f\u304c\u5b9f\u884c\u3067\u304d\u306a\u3044\u300d\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u304c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"bisect run")," \u306b\u3068\u3063\u3066\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u901a\u5e38\u306e\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u8a73\u7d30\u306f\u91cd\u8981\u3067\u306f\u3042\u308a\u307e\u305b\u3093)\u3002"),(0,a.kt)("p",null,"\u30d0\u30a4\u30bb\u30af\u30c8\u30bb\u30c3\u30b7\u30e7\u30f3\u4e2d\u306b\u3001\u4e00\u6642\u7684\u306a\u4fee\u6b63\uff08\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"s/#define DEBUG 0/#define DEBUG 1/")," \u3084\u3001\u300c\u3053\u306e\u30b3\u30df\u30c3\u30c8\u3092\u6301\u305f\u306a\u3044\u30ea\u30d3\u30b8\u30e7\u30f3\u3067\u306f\u3001\u3053\u306e\u30d0\u30a4\u30bb\u30af\u30c8\u304c\u95a2\u5fc3\u3092\u6301\u305f\u306a\u3044\u5225\u306e\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u300d\u306a\u3069\uff09\u3092\u30c6\u30b9\u30c8\u4e2d\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u9069\u7528\u3057\u305f\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308b\u3067\u3057\u3087\u3046\u3002"),(0,a.kt)("p",null,"\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u306b\u3001\u5185\u90e8\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u304c\u30c6\u30b9\u30c8\u3059\u308b\u6b21\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u898b\u3064\u3051\u305f\u5f8c\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306b\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3057\u3001\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3001\u305d\u306e\u5f8c\u305d\u306e\u30ea\u30d3\u30b8\u30e7\u30f3 (\u304a\u305d\u3089\u304f\u5fc5\u8981\u306a\u30d1\u30c3\u30c1\u3092\u9069\u7528\u3057\u305f\u3082\u306e) \u304c\u30c6\u30b9\u30c8\u306b\u5408\u683c\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3001\u30c4\u30ea\u30fc\u3092\u5143\u306e\u72b6\u614b\u306b\u5dfb\u304d\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u306e\u7d50\u679c\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\u3057\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect run")," \u30b3\u30de\u30f3\u30c9\u30eb\u30fc\u30d7\u304c bisect \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"options-7"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-checkout")),(0,a.kt)("p",{parentName:"li"},"\u30d0\u30a4\u30bb\u30af\u30b7\u30e7\u30f3\u30d7\u30ed\u30bb\u30b9\u306e\u5404\u53cd\u5fa9\u306b\u304a\u3044\u3066\u3001\u65b0\u3057\u3044\u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"BISECT_HEAD")," \u3068\u3044\u3046\u7279\u5225\u306a\u53c2\u7167\u3092\u66f4\u65b0\u3057\u3066\u3001\u30c6\u30b9\u30c8\u3059\u3079\u304d\u30b3\u30df\u30c3\u30c8\u3092\u6307\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u5b9f\u884c\u3059\u308b\u30c6\u30b9\u30c8\u304c\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u305f\u30c4\u30ea\u30fc\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30ea\u30dd\u30b8\u30c8\u30ea\u304c\u88f8\u306e\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--no-checkout")," \u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--first-parent")),(0,a.kt)("p",{parentName:"li"},"\u30de\u30fc\u30b8\u30b3\u30df\u30c3\u30c8\u3092\u898b\u305f\u3068\u304d\u306b\u3001\u6700\u521d\u306e\u89aa\u30b3\u30df\u30c3\u30c8\u3060\u3051\u3092\u30d5\u30a9\u30ed\u30fc\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30d6\u30e9\u30f3\u30c1\u306e\u30de\u30fc\u30b8\u306b\u3088\u3063\u3066\u767a\u751f\u3057\u305f\u30ea\u30b0\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u691c\u51fa\u3059\u308b\u969b\u306b\u3001\u30de\u30fc\u30b8\u30b3\u30df\u30c3\u30c8\u304c\u30d0\u30b0\u306e\u767a\u751f\u6e90\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u3001\u305d\u306e\u5148\u7956\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30de\u30fc\u30b8\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u306b\u58ca\u308c\u305f\u30b3\u30df\u30c3\u30c8\u3084\u30d3\u30eb\u30c9\u3067\u304d\u306a\u3044\u30b3\u30df\u30c3\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u304c\u3001\u30de\u30fc\u30b8\u81ea\u4f53\u306b\u306f\u554f\u984c\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u3001\u8aa4\u691c\u51fa\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u7279\u306b\u6709\u52b9\u3067\u3059\u3002"))),(0,a.kt)("h3",{id:"examples-5"},"EXAMPLES"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"v1.2 \u3068 HEAD \u306e\u9593\u3067\u58ca\u308c\u305f\u30d3\u30eb\u30c9\u3092\u81ea\u52d5\u7684\u306b\u4e8c\u5206\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n$ git bisect run make                # "make" builds the app\n$ git bisect reset                   # quit the bisect session\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"origin \u3068 HEAD \u306e\u9593\u306e\u30c6\u30b9\u30c8\u306e\u5931\u6557\u3092\u81ea\u52d5\u7684\u306b\u4e8c\u5206\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ git bisect start HEAD origin --    # HEAD is bad, origin is good\n$ git bisect run make test           # "make test" builds and tests\n$ git bisect reset                   # quit the bisect session\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u58ca\u308c\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u81ea\u52d5\u7684\u306b\u4e8c\u5206\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat ~/test.sh\n#!/bin/sh\nmake || exit 125                     # this skips broken builds\n~/check_test_case.sh                 # does the test case pass?\n$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run ~/test.sh\n$ git bisect reset                   # quit the bisect session\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u3053\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"test.sh")," \u3068\u3044\u3046\u30ab\u30b9\u30bf\u30e0\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"make")," \u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u73fe\u5728\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"check_test_case.sh")," \u306f\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"exit 0")," \u3092\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"exit 1")," \u3067\u7d42\u4e86\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"bisect\u3001make\u3001test \u306e\u5404\u30d7\u30ed\u30bb\u30b9\u3068\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u9632\u3050\u305f\u3081\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"test.sh")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"check_test_case.sh")," \u306e\u4e21\u65b9\u304c\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5916\u306b\u3042\u308b\u65b9\u304c\u5b89\u5168\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u4e00\u6642\u7684\u306a\u5909\u66f4\u3067\u81ea\u52d5\u7684\u306b\u4e8c\u5206\u3057\u307e\u3059\uff08\u30db\u30c3\u30c8\u30d5\u30a3\u30c3\u30af\u30b9\uff09\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat ~/test.sh\n#!/bin/sh\n\n# tweak the working tree by merging the hot-fix branch\n# and then attempt a build\nif      git merge --no-commit --no-ff hot-fix &&\n        make\nthen\n        # run project specific test and report its status\n        ~/check_test_case.sh\n        status=$?\nelse\n        # tell the caller this is untestable\n        status=125\nfi\n\n# undo the tweak to allow clean flipping to the next commit\ngit reset --hard\n\n# return control\nexit $status\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u3053\u308c\u306b\u3088\u308a\u3001\u5404\u30c6\u30b9\u30c8\u5b9f\u884c\u306e\u524d\u306b\u30db\u30c3\u30c8\u30d5\u30a3\u30c3\u30af\u30b9\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u306e\u5909\u66f4\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u30d3\u30eb\u30c9\u307e\u305f\u306f\u30c6\u30b9\u30c8\u74b0\u5883\u304c\u5909\u66f4\u3055\u308c\u305f\u305f\u3081\u306b\u3001\u53e4\u3044\u30ea\u30d3\u30b8\u30e7\u30f3\u3067\u65b0\u3057\u3044\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u3059\u3067\u306b\u4fee\u6b63\u304c\u5fc5\u8981\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \uff08\u30db\u30c3\u30c8\u30d5\u30a3\u30c3\u30af\u30b9\u30d6\u30e9\u30f3\u30c1\u304c\u3001\u4e8c\u7b49\u5206\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b3\u30df\u30c3\u30c8\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u30de\u30fc\u30b8\u304c\u3042\u307e\u308a\u5f15\u304d\u8fbc\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u304b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git merge")," \u306e\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git cherry-pick")," \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u58ca\u308c\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u81ea\u52d5\u7684\u306b\u4e8c\u5206\u3057\u307e\u3059\uff1a"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run sh -c "make || exit 125; ~/check_test_case.sh"\n$ git bisect reset                   # quit the bisect session\n')),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001\u30c6\u30b9\u30c8\u30921\u884c\u3067\u8a18\u8ff0\u3057\u305f\u5834\u5408\u3001\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\u306a\u3057\u3067\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7834\u640d\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b0\u30e9\u30d5\u306e\u9069\u5207\u306a\u9818\u57df\u3092\u898b\u3064\u3051\u307e\u3059"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start HEAD <known-good-commit> [ <boundary-commit> ... ] --no-checkout\n$ git bisect run sh -c '\n        GOOD=$(git for-each-ref \"--format=%(objectname)\" refs/bisect/good-*) &&\n        git rev-list --objects BISECT_HEAD --not $GOOD >tmp.$$ &&\n        git pack-objects --stdout >/dev/null <tmp.$$\n        rc=$?\n        rm -f tmp.$$\n        test $rc = 0'\n\n$ git bisect reset                   # quit the bisect session\n")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect run")," \u304c\u7d42\u4e86\u3059\u308b\u3068\u3001bisect/bad \u306f\u3001\u5230\u9054\u53ef\u80fd\u306a\u30b0\u30e9\u30d5\u304c ",(0,a.kt)("em",{parentName:"p"},"git pack objects")," \u306b\u5fc5\u8981\u306a\u610f\u5473\u3067\u5b8c\u5168\u306b\u30c8\u30e9\u30d0\u30fc\u30b9\u53ef\u80fd\u306a\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u89aa\u3092\u6301\u3064\u30b3\u30df\u30c3\u30c8\u3092\u53c2\u7167\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u30b3\u30fc\u30c9\u306e\u30ea\u30b0\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u4fee\u6b63\u3092\u63a2\u3057\u307e\u3059"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start\n$ git bisect new HEAD    # current commit is marked as new\n$ git bisect old HEAD~10 # the tenth commit from now is marked as old\n")),(0,a.kt)("p",{parentName:"li"},"\u307e\u305f\u306f\uff1a"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git bisect start --term-old broken --term-new fixed\n$ git bisect fixed\n$ git bisect broken HEAD~10\n")),(0,a.kt)("h4",{id:"getting-help"},"Getting help"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"git bisect")," \u3092\u4f7f\u7528\u3057\u3066\u77ed\u3044\u4f7f\u7528\u6cd5\u306e\u8aac\u660e\u3092\u53d6\u5f97\u3057\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git bisect help")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"gitcbisect -h")," \u3092\u4f7f\u7528\u3057\u3066\u9577\u3044\u4f7f\u7528\u6cd5\u306e\u8aac\u660e\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002"),(0,a.kt)("h3",{id:"see-also-3"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-bisect-lk2009"},"Fighting regressions with git bisect"),", ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-blame"},"git-blame[1]")),(0,a.kt)("h2",{id:"diff"},(0,a.kt)("inlineCode",{parentName:"h2"},"diff")),(0,a.kt)("h3",{id:"name-8"},"NAME"),(0,a.kt)("p",null,"git-diff \u2014 \u30b3\u30df\u30c3\u30c8\u3001\u30b3\u30df\u30c3\u30c8\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u306a\u3069\u306e\u9593\u306e\u5909\u66f4\u3092\u8868\u793a\u3059\u308b"),(0,a.kt)("h3",{id:"synopsis-8"},"SYNOPSIS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git diff [<options>] [<commit>] [--] [<path>...]\ngit diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]\ngit diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]\ngit diff [<options>] <commit>...<commit> [--] [<path>...]\ngit diff [<options>] <blob> <blob>\ngit diff [<options>] --no-index [--] <path> <path>\n")),(0,a.kt)("h3",{id:"description-8"},"DESCRIPTION"),(0,a.kt)("p",null,"\u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u307e\u305f\u306f\u30c4\u30ea\u30fc\u9593\u306e\u5909\u66f4\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30c4\u30ea\u30fc\u9593\u306e\u5909\u66f4\u30012\u3064\u306e\u30c4\u30ea\u30fc\u9593\u306e\u5909\u66f4\u3001\u30de\u30fc\u30b8\u306b\u3088\u308b\u5909\u66f4\u30012\u3064\u306e\u30d6\u30ed\u30d6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u5909\u66f4\u3001\u307e\u305f\u306f\u30c7\u30a3\u30b9\u30af\u4e0a\u306e2\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u9593\u306e\u5909\u66f4\u3092\u8868\u793a\u3057\u307e\u3059\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30d5\u30a9\u30fc\u30e0\u306f\u3001\u3042\u306a\u305f\u304c\u884c\u3063\u305f\u5909\u66f4\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 (\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306e\u305f\u3081\u306e\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u30a8\u30ea\u30a2) \u306b\u5bfe\u3057\u3066\u76f8\u5bfe\u7684\u306b\u8868\u793a\u3057\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308c\u3070\u3001\u9055\u3044\u306f Git \u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u3055\u3089\u306b\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306b\u6307\u793a\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u304c\u3001\u307e\u3060\u8ffd\u52a0\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u3089\u306e\u5909\u66f4\u3092\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3059\u308b\u306b\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-add"},"git-add[1]")," \u3092\u4f7f\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] --no-index [--] <path> <path>")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u5f62\u5f0f\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u4e0a\u306e\u4e0e\u3048\u3089\u308c\u305f\u4e8c\u3064\u306e\u30d1\u30b9\u3092\u6bd4\u8f03\u3059\u308b\u3082\u306e\u3067\u3059\u3002Git \u304c\u7ba1\u7406\u3057\u3066\u3044\u308b\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u4e2d\u3067\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u3066\u3001\u5c11\u306a\u304f\u3068\u3082\u3069\u3061\u3089\u304b\u306e\u30d1\u30b9\u304c\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u5916\u3092\u6307\u3057\u3066\u3044\u308b\u5834\u5408\u3084\u3001Git \u304c\u7ba1\u7406\u3057\u3066\u3044\u308b\u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u5916\u3067\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-index")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5f62\u5f0f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--exit-code")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30d5\u30a9\u30fc\u30e0\u306f\u3001\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u306e\u305f\u3081\u306b\u30b9\u30c6\u30fc\u30b8\u3057\u305f\u5909\u66f4\u70b9\u3092\u3001\u6307\u5b9a\u3057\u305f ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u3068\u306e\u76f8\u5bfe\u7684\u306a\u95a2\u4fc2\u3067\u8868\u793a\u3057\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u306f\u3001\u6700\u65b0\u306e\u30b3\u30df\u30c3\u30c8\u3068\u306e\u6bd4\u8f03\u304c\u5fc5\u8981\u3068\u306a\u308b\u305f\u3081\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HEAD \u3068\u306a\u308a\u307e\u3059\u3002HEAD \u304c\u5b58\u5728\u305b\u305a(\u4f8b\uff1a\u751f\u307e\u308c\u3066\u3044\u306a\u3044\u30d6\u30e9\u30f3\u30c1)\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u30b9\u30c6\u30fc\u30b8\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u5909\u66f4\u3092\u8868\u793a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--staged")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--cached")," \u306e\u540c\u7fa9\u8a9e\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff --cached --merge-base A")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff --cached $(git merge-base A HEAD)")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] <commit> [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u5f62\u5f0f\u306f\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u3042\u308b\u5909\u66f4\u70b9\u306e\u3046\u3061\u3001\u6307\u5b9a\u3057\u305f ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306b\u5bfe\u3059\u308b\u76f8\u5bfe\u7684\u306a\u3082\u306e\u3092\u8868\u793a\u3057\u307e\u3059\u3002HEAD \u3092\u4f7f\u3063\u3066\u6700\u65b0\u306e\u30b3\u30df\u30c3\u30c8\u3068\u6bd4\u8f03\u3057\u305f\u308a\u3001\u30d6\u30e9\u30f3\u30c1\u540d\u3092\u4f7f\u3063\u3066\u5225\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u3068\u6bd4\u8f03\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--merge-base")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u3092\u4f7f\u3046\u4ee3\u308f\u308a\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u3068 HEAD \u306e\u30de\u30fc\u30b8\u30d9\u30fc\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff --merge-base A")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff $(git merge-base A HEAD)")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] [--merge-base] <commit> <commit> [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u4efb\u610f\u306e\u4e8c\u3064\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u9593\u306e\u5909\u66f4\u70b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff --merge-base A B")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff $(git merge-base A B) B")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] <commit> <commit>... <commit> [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u30de\u30fc\u30b8\u30b3\u30df\u30c3\u30c8\u306e\u7d50\u679c\u3092\u898b\u308b\u305f\u3081\u306e\u5f62\u5f0f\u3067\u3059\u3002\u6700\u521d\u306b\u8868\u793a\u3055\u308c\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306f\u30de\u30fc\u30b8\u305d\u306e\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u6b8b\u308a\u306e2\u3064\u4ee5\u4e0a\u306e\u30b3\u30df\u30c3\u30c8\u306f\u305d\u306e\u89aa\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u76ee\u7684\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u7fa4\u3092\u751f\u6210\u3059\u308b\u4fbf\u5229\u306a\u65b9\u6cd5\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"^@")," \u3068\u3044\u3046\u63a5\u5c3e\u8f9e\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"master")," \u304c\u30de\u30fc\u30b8\u30b3\u30df\u30c3\u30c8\u306e\u540d\u524d\u3067\u3042\u3063\u305f\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git diff master master^@")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git show master")," \u3068\u540c\u3058\u8907\u5408\u7684\u306a diff \u3092\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] <commit>..<commit> [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001\u4efb\u610f\u306e2\u3064\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u9593\u306e\u5909\u66f4\u70b9\u3092\u8868\u793a\u3059\u308b\u4ee5\u524d\u306e\u5f62\u5f0f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"..")," \u3092\u9664\u3044\u305f\u3082\u306e\uff09\u3068\u540c\u7fa9\u3067\u3059\u3002\u7247\u65b9\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u304c\u7701\u7565\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u4ee3\u308f\u308a\u306b HEAD \u3092\u4f7f\u3063\u305f\u306e\u3068\u540c\u3058\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] <commit>...<commit> [--] [<path>...]")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u5f62\u5f0f\u3067\u306f\u3001\u4e21\u65b9\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306e\u5171\u901a\u306e\u7956\u5148\u3092\u8d77\u70b9\u3068\u3057\u3066\u3001\u305d\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u542b\u30802\u756a\u76ee\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u307e\u3067\u306e\u5909\u66f4\u70b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"git diff A...B")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git diff $(git merge-base A B) B")," \u3068\u540c\u3058\u3067\u3059\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306e\u3044\u305a\u308c\u304b\u3092\u7701\u7565\u3059\u308b\u3068\u3001\u4ee3\u308f\u308a\u306b HEAD \u3092\u4f7f\u3063\u305f\u306e\u3068\u540c\u3058\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002"))),(0,a.kt)("p",null,"\u5ff5\u306e\u305f\u3081\u306b\u8a00\u3063\u3066\u304a\u304f\u3068\u3001\u4e0a\u306e\u8aac\u660e\u306b\u51fa\u3066\u304f\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--merge-base")," \u306e\u5834\u5408\u3068\u6700\u5f8c\u306e2\u3064\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"..")," \u8868\u8a18\u3092\u4f7f\u3063\u305f\u5f62\u5f0f\u3092\u9664\u3044\u3066\u3001\u3069\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<tree>")," \u3067\u3082\u69cb\u308f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"<commit>")," \u306e\u7db4\u308a\u306e\u3088\u308a\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitrevisions"},"gitrevisions[7]")," \u306e\u300cSPECIFYING REVISIONS\u300d\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u304b\u3057\u3001\u300cdiff\u300d\u306f2\u3064\u306e\u7d42\u70b9\u3092\u6bd4\u8f03\u3059\u308b\u3082\u306e\u3067\u3042\u3063\u3066\u7bc4\u56f2\u3092\u6bd4\u8f03\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7bc4\u56f2\u3092\u8868\u3059\u8868\u8a18\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>...<commit>")," \u3084 ",(0,a.kt)("inlineCode",{parentName:"p"},"<commit>...<commit>"),"\uff09\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitrevisions"},"gitrevisions[7]")," \u306e\u300cSPECIFYING RANGES\u300d\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u7bc4\u56f2\u3092\u610f\u5473\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"git diff [<options>] <blob> <blob>")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30d5\u30a9\u30fc\u30e0\u306f\u30012\u3064\u306e\u30d6\u30ed\u30d6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u9055\u3044\u3092\u898b\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002"))),(0,a.kt)("h3",{id:"options-8"},"OPTIONS"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-u"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30c3\u30c1\u3092\u751f\u6210\u3057\u307e\u3059\uff08\u30d1\u30c3\u30c1\u306e\u751f\u6210\u306b\u95a2\u3059\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\uff09\u3002\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-s"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-patch")),(0,a.kt)("p",{parentName:"li"},"\u5dee\u5206\u51fa\u529b\u3092\u6291\u5236\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30d1\u30c3\u30c1\u3092\u8868\u793a\u3059\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"git show")," \u306e\u3088\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")," \u306e\u52b9\u679c\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-U<n>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--unified=<n>")),(0,a.kt)("p",{parentName:"li"},"\u901a\u5e38\u306e3\u884c\u3067\u306f\u306a\u304f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<n>")," \u884c\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u5dee\u5206\u3092\u751f\u6210\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--output=<file>")),(0,a.kt)("p",{parentName:"li"},"stdout \u3067\u306f\u306a\u304f\u7279\u5b9a\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--output-indicator-new=<char>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--output-indicator-old=<char>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--output-indicator-context=<char>")),(0,a.kt)("p",{parentName:"li"},"\u751f\u6210\u3055\u308c\u305f\u30d1\u30c3\u30c1\u306e\u65b0\u3057\u3044\u884c\u3001\u53e4\u3044\u884c\u3001\u307e\u305f\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u884c\u3092\u793a\u3059\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u6587\u5b57\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u901a\u5e38\u3001\u305d\u308c\u3089\u306f\u305d\u308c\u305e\u308c ",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-"),"\u3001\u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"''")," \u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--raw")),(0,a.kt)("p",{parentName:"li"},"\u751f\u306e\u5f62\u5f0f\u3067\u5dee\u5206\u3092\u751f\u6210\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--patch-with-raw")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p --raw")," \u306e\u540c\u7fa9\u8a9e\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--indent-heuristic")),(0,a.kt)("p",{parentName:"li"},"\u5dee\u5206\u30cf\u30f3\u30af\u306e\u5883\u754c\u3092\u30b7\u30d5\u30c8\u3059\u308b\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u6709\u52b9\u306b\u3057\u3066\u3001\u30d1\u30c3\u30c1\u3092\u8aad\u307f\u3084\u3059\u304f\u3057\u307e\u3059\u3002\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-indent-heuristic")),(0,a.kt)("p",{parentName:"li"},"\u30a4\u30f3\u30c7\u30f3\u30c8\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--minimal")),(0,a.kt)("p",{parentName:"li"},"\u53ef\u80fd\u306a\u9650\u308a\u6700\u5c0f\u306e\u5dee\u5206\u304c\u751f\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u3001\u4f59\u5206\u306a\u6642\u9593\u3092\u8cbb\u3084\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--patience")),(0,a.kt)("p",{parentName:"li"},"\u300cpatiencediff\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066 diff \u3092\u751f\u6210\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--histogram")),(0,a.kt)("p",{parentName:"li"},"\u300chistogram diff\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066 diff \u3092\u751f\u6210\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--anchored=<text>")),(0,a.kt)("p",{parentName:"li"},"\u300canchored diff\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066diff\u3092\u751f\u6210\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u884c\u304c\u30bd\u30fc\u30b9\u3068\u5b9b\u5148\u306e\u4e21\u65b9\u306b\u5b58\u5728\u3057\u30011\u56de\u3060\u3051\u5b58\u5728\u3057\u3001\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u59cb\u307e\u308b\u5834\u5408\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u305d\u306e\u884c\u304c\u51fa\u529b\u306b\u524a\u9664\u307e\u305f\u306f\u8ffd\u52a0\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u5185\u90e8\u3067\u300cpatience diff\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--diff-algorithm={patience|minimal|histogram|myers}")),(0,a.kt)("p",{parentName:"li"},"\u5dee\u5206\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u30d0\u30ea\u30a2\u30f3\u30c8\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"myers")),(0,a.kt)("p",{parentName:"li"},"\u57fa\u672c\u7684\u306a\u8caa\u6b32\u306a\u5dee\u5206\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u73fe\u5728\u3001\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"minimal")),(0,a.kt)("p",{parentName:"li"},"\u53ef\u80fd\u306a\u9650\u308a\u6700\u5c0f\u306e\u5dee\u5206\u304c\u751f\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u3001\u4f59\u5206\u306a\u6642\u9593\u3092\u8cbb\u3084\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"patience")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30c3\u30c1\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u300cpatience diff\u300d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"histogram")),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u5fcd\u8010\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u62e1\u5f35\u3057\u3066\u3001\u300c\u767a\u751f\u7387\u306e\u4f4e\u3044\u5171\u901a\u8981\u7d20\u3092\u30b5\u30dd\u30fc\u30c8\u300d\u3057\u307e\u3059\u3002"))),(0,a.kt)("p",{parentName:"li"},"\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.algorithm")," \u5909\u6570\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u4ee5\u5916\u306e\u5024\u306b\u69cb\u6210\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-diff-algorithm=default")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--stat[=<width>[,<name-width>[,<count>]]]")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"diffstat")," \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u90e8\u5206\u306b\u5fc5\u8981\u306a\u3060\u3051\u306e\u30b9\u30da\u30fc\u30b9\u304c\u4f7f\u308f\u308c\u3001\u6b8b\u308a\u306f\u30b0\u30e9\u30d5\u306e\u90e8\u5206\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\u6700\u5927\u5e45\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u7aef\u672b\u306e\u5e45\u3001\u307e\u305f\u306f\u7aef\u672b\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f80\u5217\u3067\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<width>")," \u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3067\u304d\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u90e8\u5206\u306e\u5e45\u306f\u3001\u30b3\u30f3\u30de\u306e\u5f8c\u306b\u5225\u306e\u5e45 ",(0,a.kt)("inlineCode",{parentName:"p"},"<name-width>")," \u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u5236\u9650\u3067\u304d\u307e\u3059\u3002\u30b0\u30e9\u30d5\u90e8\u5206\u306e\u5e45\u3092\u5236\u9650\u3059\u308b\u306b\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat-graph-width=<width>")," (stat \u30b0\u30e9\u30d5\u3092\u751f\u6210\u3059\u308b\u3059\u3079\u3066\u306e\u30b3\u30de\u30f3\u30c9\u306b\u5f71\u97ff\u3057\u307e\u3059)\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"diff.statGraphWidth=<width>")," (",(0,a.kt)("inlineCode",{parentName:"p"},"git format-patch")," \u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093)\u3068\u8a2d\u5b9a\u3057\u307e\u3059\u30023\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf ",(0,a.kt)("inlineCode",{parentName:"p"},"<count>")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u51fa\u529b\u3092\u6700\u521d\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"<count>")," \u884c\u306b\u9650\u5b9a\u3057\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u884c\u304c\u3042\u308b\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"...")," \u3092\u7d9a\u3051\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u3089\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat-width=<width>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat-name-width=<name-width>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat-count=<count>")," \u3067\u500b\u5225\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--compact-summary")),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u307e\u305f\u306f\u524a\u9664\uff08\u300cnew\u300d\u307e\u305f\u306f\u300cgone\u300d\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u306e\u5834\u5408\u306f\u300c+l\u300d\uff09\u304a\u3088\u3073\u30e2\u30fc\u30c9\u5909\u66f4\uff08\u8ffd\u52a0\u307e\u305f\u306f\u524a\u9664\u306e\u5834\u5408\u306f\u300c+x\u300d\u307e\u305f\u306f\u300c-x\u300d\uff09\u306a\u3069\u306e\u62e1\u5f35\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u306e\u8981\u7d04\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 diffstat \u306e\u5b9f\u884c\u53ef\u80fd\u30d3\u30c3\u30c8\uff09\u3002\u60c5\u5831\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u90e8\u5206\u3068\u30b0\u30e9\u30d5\u90e8\u5206\u306e\u9593\u306b\u7f6e\u304b\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--stat")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--numstat")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--stat")," \u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u30de\u30b7\u30f3\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u8ffd\u52a0\u304a\u3088\u3073\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u309210\u9032\u8868\u8a18\u3068\u30d1\u30b9\u540d\u3067\u7701\u7565\u5f62\u306a\u3057\u3067\u8868\u793a\u3057\u307e\u3059\u3002\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"0 0")," \u3068\u8a00\u3046\u4ee3\u308f\u308a\u306b2\u3064\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," \u3092\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--shortstat")),(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7dcf\u6570\u3068\u3001\u8ffd\u52a0\u304a\u3088\u3073\u524a\u9664\u3055\u308c\u305f\u884c\u306e\u6570\u3092\u542b\u3080 ",(0,a.kt)("inlineCode",{parentName:"p"},"--stat")," \u5f62\u5f0f\u306e\u6700\u5f8c\u306e\u884c\u306e\u307f\u3092\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-X[<param1,param2,...>]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat[=<param1,param2,...>]")),(0,a.kt)("p",{parentName:"li"},"\u5404\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u76f8\u5bfe\u7684\u306a\u5909\u66f4\u91cf\u306e\u5206\u5e03\u3092\u51fa\u529b\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat")," \u306e\u52d5\u4f5c\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u30b3\u30f3\u30de\u533a\u5207\u308a\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.dirstat")," \u69cb\u6210\u5909\u6570\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u3092\u53c2\u7167\uff09\u3002\u6b21\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"changes")),(0,a.kt)("p",{parentName:"li"},"\u30bd\u30fc\u30b9\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u3001\u307e\u305f\u306f\u5b9b\u5148\u306b\u8ffd\u52a0\u3055\u308c\u305f\u884c\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3001dirstat \u756a\u53f7\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u7d14\u7c8b\u306a\u30b3\u30fc\u30c9\u79fb\u52d5\u306e\u91cf\u3092\u7121\u8996\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u884c\u306e\u518d\u914d\u7f6e\u306f\u3001\u4ed6\u306e\u5909\u66f4\u307b\u3069\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"lines")),(0,a.kt)("p",{parentName:"li"},"\u901a\u5e38\u306e\u884c\u30d9\u30fc\u30b9\u306ediff\u5206\u6790\u3092\u5b9f\u884c\u3057\u3001\u524a\u9664/\u8ffd\u52a0\u3055\u308c\u305f\u884c\u6570\u3092\u5408\u8a08\u3057\u3066\u3001dirstat\u756a\u53f7\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\uff08\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u5408\u3001\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u884c\u306e\u81ea\u7136\u306a\u6982\u5ff5\u304c\u306a\u3044\u305f\u3081\u3001\u4ee3\u308f\u308a\u306b64\u30d0\u30a4\u30c8\u306e\u30c1\u30e3\u30f3\u30af\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\uff09\u3002\u3053\u308c\u306f\u3001 ",(0,a.kt)("inlineCode",{parentName:"p"},"changes")," \u52d5\u4f5c\u3088\u308a\u3082\u30b3\u30b9\u30c8\u306e\u304b\u304b\u308b ",(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat")," \u52d5\u4f5c\u3067\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u518d\u914d\u7f6e\u3055\u308c\u305f\u884c\u3092\u4ed6\u306e\u5909\u66f4\u3068\u540c\u3058\u3088\u3046\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\u7d50\u679c\u306e\u51fa\u529b\u306f\u3001\u4ed6\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"-*stat")," \u30aa\u30d7\u30b7\u30e7\u30f3\u304b\u3089\u5f97\u3089\u308c\u308b\u3082\u306e\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"files")),(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3092\u6570\u3048\u3066\u3001dirstat \u306e\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u5909\u66f4\u3055\u308c\u305f\u5404\u30d5\u30a1\u30a4\u30eb\u306f\u3001dirstat \u5206\u6790\u3067\u7b49\u3057\u304f\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u307e\u3063\u305f\u304f\u8abf\u3079\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u8a08\u7b97\u4e0a\u6700\u3082\u5b89\u4fa1\u306a ",(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat")," \u306e\u52d5\u4f5c\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"cumulative")),(0,a.kt)("p",{parentName:"li"},"\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5b50\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5909\u66f4\u3082\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"cumulative")," \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u5831\u544a\u3055\u308c\u308b\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u306e\u5408\u8a08\u304c100\uff05\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\uff08\u975e\u7d2f\u7a4d\uff09\u306e\u52d5\u4f5c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"noncumulative")," \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<limit>")),(0,a.kt)("p",{parentName:"li"},"\u6574\u6570\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u3001\u30ab\u30c3\u30c8\u30aa\u30d5\u30d1\u30fc\u30bb\u30f3\u30c8\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 3\uff05\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u5909\u66f4\u306e\u3053\u306e\u5272\u5408\u3088\u308a\u5c11\u306a\u3044\u8ca2\u732e\u3092\u3057\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u51fa\u529b\u306b\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002"))),(0,a.kt)("p",{parentName:"li"},"\u4f8b\uff1a\u4ee5\u4e0b\u306f\u3001\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7dcf\u6570\u306e10\uff05\u672a\u6e80\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u7121\u8996\u3057\u3001\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5b50\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6570\u3092\u7d2f\u7a4d\u3057\u306a\u304c\u3089\u3001\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat=files,10,cumulative"),"\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--cumulative")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat=cumulative")," \u306e\u540c\u7fa9\u8a9e")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat-by-file[=<param1,param2>...]")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--dirstat=files,param1,param2\u2026")," \u306e\u540c\u7fa9\u8a9e")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--summary")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u6210\u3001\u540d\u524d\u5909\u66f4\u3001\u30e2\u30fc\u30c9\u5909\u66f4\u306a\u3069\u306e\u62e1\u5f35\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u306e\u8981\u7d04\u3092\u51fa\u529b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--patch-with-stat")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-p --stat")," \u306e\u540c\u7fa9\u8a9e\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-z")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--raw"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--numstat"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--name-only"),"\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--name-status")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30d1\u30b9\u540d\u3092\u5909\u66f4\u305b\u305a\u3001\u51fa\u529b\u30d5\u30a3\u30fc\u30eb\u30c9\u30bf\u30fc\u30df\u30cd\u30fc\u30bf\u3068\u3057\u3066 NUL \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068\u3001\u69cb\u6210\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"core.quotePath")," \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001\u300cunusual\u300d\u6587\u5b57\u3092\u542b\u3080\u30d1\u30b9\u540d\u304c\u5f15\u7528\u7b26\u3067\u56f2\u307e\u308c\u307e\u3059\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config [1]")," \u3092\u53c2\u7167\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--name-only")),(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u591a\u304f\u306e\u5834\u5408\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306fUTF-8\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-log"},"git-log[1]")," \u306e\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u95a2\u3059\u308b\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--name-status")),(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3068\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30b9\u30c6\u30fc\u30bf\u30b9\u6587\u5b57\u306e\u610f\u5473\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--diff-filter")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--name-only")," \u3068\u540c\u3058\u3088\u3046\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u304c UTF-8 \u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--submodule[=<format>]")),(0,a.kt)("p",{parentName:"li"},"\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9055\u3044\u3092\u3069\u306e\u3088\u3046\u306b\u8868\u793a\u3059\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--submodule=short")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("em",{parentName:"p"},"short")," \u5f62\u5f0f\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5f62\u5f0f\u306f\u3001\u7bc4\u56f2\u306e\u6700\u521d\u3068\u6700\u5f8c\u306b\u30b3\u30df\u30c3\u30c8\u306e\u540d\u524d\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--submodule")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--submodule=log")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("em",{parentName:"p"},"log")," \u5f62\u5f0f\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5f62\u5f0f\u3067\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-submodule"},"git-submodule[1]")," \u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"summary")," \u3068\u540c\u69d8\u306b\u7bc4\u56f2\u5185\u306e\u30b3\u30df\u30c3\u30c8\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--submodule=diff")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("em",{parentName:"p"},"diff")," \u5f62\u5f0f\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u5f62\u5f0f\u306f\u3001\u30b3\u30df\u30c3\u30c8\u7bc4\u56f2\u9593\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5185\u5bb9\u306e\u5909\u66f4\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u5dee\u5206\u3092\u793a\u3057\u307e\u3059\u3002config \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"diff.submodule")," \u307e\u305f\u306f ",(0,a.kt)("em",{parentName:"p"},"short")," \u5f62\u5f0f\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--color[=<when>]")),(0,a.kt)("p",{parentName:"li"},"\u8272\u4ed8\u304d\u306e\u5dee\u5206\u3092\u8868\u793a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--color"),"\uff08\u3064\u307e\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"=<when>")," \u306a\u3057\uff09\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"--color=always")," \u3068\u540c\u3058\u3067\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<when>")," \u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"always"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"never"),"\u3001\u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"auto")," \u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"color.ui")," \u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff")," \u306e\u69cb\u6210\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-color")),(0,a.kt)("p",{parentName:"li"},"\u8272\u4ed8\u304d\u306e\u5dee\u5206\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u69cb\u6210\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--color=never")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--color-moved[=<mode>]")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u3057\u305f\u30b3\u30fc\u30c9\u884c\u306e\u8272\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.colorMoved")," \u69cb\u6210\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<mode>")," \u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ",(0,a.kt)("inlineCode",{parentName:"p"},"no")," \u306b\u306a\u308a\u3001\u30e2\u30fc\u30c9\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"zebra")," \u306b\u306a\u308a\u307e\u3059\u3002\u30e2\u30fc\u30c9\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"no")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u3057\u305f\u7dda\u306f\u5f37\u8abf\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"default")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"zebra")," \u306e\u540c\u7fa9\u8a9e\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5c06\u6765\u3001\u3088\u308a\u8ce2\u660e\u306a\u30e2\u30fc\u30c9\u306b\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"plain")),(0,a.kt)("p",{parentName:"li"},"\u3042\u308b\u5834\u6240\u3067\u8ffd\u52a0\u3055\u308c\u3001\u5225\u306e\u5834\u6240\u3067\u524a\u9664\u3055\u308c\u305f\u884c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff.newMoved")," \u3067\u8272\u4ed8\u3051\u3055\u308c\u307e\u3059\u3002\u540c\u69d8\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff.oldMoved")," \u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff")," \u306e\u5225\u306e\u5834\u6240\u306b\u8ffd\u52a0\u3055\u308c\u305f\u524a\u9664\u3055\u308c\u305f\u884c\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30e2\u30fc\u30c9\u306f\u79fb\u52d5\u3055\u308c\u305f\u884c\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u306e\u30d6\u30ed\u30c3\u30af\u304c\u9806\u5217\u306a\u3057\u3067\u79fb\u52d5\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u306f\u30ec\u30d3\u30e5\u30fc\u3067\u306f\u3042\u307e\u308a\u5f79\u306b\u7acb\u3061\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"blocks")),(0,a.kt)("p",{parentName:"li"},"\u5c11\u306a\u304f\u3068\u308220\u6587\u5b57\u306e\u82f1\u6570\u5b57\u306e\u79fb\u52d5\u30c6\u30ad\u30b9\u30c8\u306e\u30d6\u30ed\u30c3\u30af\u304c\u8caa\u6b32\u306b\u691c\u51fa\u3055\u308c\u307e\u3059\u3002\u691c\u51fa\u3055\u308c\u305f\u30d6\u30ed\u30c3\u30af\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff.{old\u3001new}Moved")," \u8272\u306e\u3044\u305a\u308c\u304b\u3092\u4f7f\u7528\u3057\u3066\u30da\u30a4\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\u96a3\u63a5\u3059\u308b\u30d6\u30ed\u30c3\u30af\u3092\u533a\u5225\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"zebra")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306e\u30d6\u30ed\u30c3\u30af\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"blocks")," \u30e2\u30fc\u30c9\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u691c\u51fa\u3055\u308c\u307e\u3059\u3002\u30d6\u30ed\u30c3\u30af\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff.{old\u3001new}Moved")," \u8272\u307e\u305f\u306f 1color.diff.{old\u3001new}MovedAlternative` \u306e\u3044\u305a\u308c\u304b\u3092\u4f7f\u7528\u3057\u3066\u30da\u30a4\u30f3\u30c8\u3055\u308c\u307e\u3059\u30022\u3064\u306e\u8272\u306e\u9593\u306e\u5909\u5316\u306f\u3001\u65b0\u3057\u3044\u30d6\u30ed\u30c3\u30af\u304c\u691c\u51fa\u3055\u308c\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"dimmed-zebra")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"zebra")," \u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u79fb\u52d5\u3055\u308c\u305f\u30b3\u30fc\u30c9\u306e\u91cd\u8981\u3067\u306a\u3044\u90e8\u5206\u306e\u8ffd\u52a0\u306e\u8abf\u5149\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u96a3\u63a5\u3059\u308b2\u3064\u306e\u30d6\u30ed\u30c3\u30af\u306e\u5883\u754c\u7dda\u306f\u8208\u5473\u6df1\u3044\u3068\u898b\u306a\u3055\u308c\u3001\u6b8b\u308a\u306f\u8208\u5473\u6df1\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"dimmed_zebra")," \u306f\u975e\u63a8\u5968\u306e\u540c\u7fa9\u8a9e\u3067\u3059\u3002")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-color-moved")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u691c\u51fa\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u69cb\u6210\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--color-moved=no")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--color-moved-ws=<modes>")),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--color-moved")," \u306e\u79fb\u52d5\u691c\u51fa\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u7a7a\u767d\u3092\u7121\u8996\u3059\u308b\u65b9\u6cd5\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.colorMovedWS")," \u69cb\u6210\u8a2d\u5b9a\u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e2\u30fc\u30c9\u306f\u3001\u30b3\u30f3\u30de\u533a\u5207\u308a\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"no")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u691c\u51fa\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u7a7a\u767d\u3092\u7121\u8996\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ignore-space-at-eol")),(0,a.kt)("p",{parentName:"li"},"EOL \u3067\u7a7a\u767d\u306e\u5909\u66f4\u3092\u7121\u8996\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ignore-space-change")),(0,a.kt)("p",{parentName:"li"},"\u7a7a\u767d\u306e\u91cf\u306e\u5909\u66f4\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u884c\u672b\u306e\u7a7a\u767d\u3092\u7121\u8996\u3057\u30011\u3064\u4ee5\u4e0a\u306e\u7a7a\u767d\u6587\u5b57\u306e\u4ed6\u306e\u3059\u3079\u3066\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u540c\u7b49\u3068\u898b\u306a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ignore-all-space")),(0,a.kt)("p",{parentName:"li"},"\u7dda\u3092\u6bd4\u8f03\u3059\u308b\u3068\u304d\u306f\u7a7a\u767d\u3092\u7121\u8996\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e00\u65b9\u306e\u884c\u306b\u7a7a\u767d\u304c\u3042\u308a\u3001\u3082\u3046\u4e00\u65b9\u306e\u884c\u306b\u7a7a\u767d\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"allow-indentation-change")),(0,a.kt)("p",{parentName:"li"},"\u6700\u521d\u306b\u79fb\u52d5\u691c\u51fa\u3067\u7a7a\u767d\u3092\u7121\u8996\u3057\u3001\u7a7a\u767d\u306e\u5909\u66f4\u304c\u884c\u3054\u3068\u306b\u540c\u3058\u3067\u3042\u308b\u5834\u5408\u306b\u306e\u307f\u3001\u79fb\u52d5\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30d6\u30ed\u30c3\u30af\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u4ed6\u306e\u30e2\u30fc\u30c9\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-color-moved-ws")),(0,a.kt)("p",{parentName:"li"},"\u79fb\u52d5\u691c\u51fa\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306f\u3001\u7a7a\u767d\u3092\u7121\u8996\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u69cb\u6210\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--color-moved-ws=no")," \u3068\u540c\u3058\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff[=<mode>]")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<mode>")," \u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u3055\u308c\u305f\u5358\u8a9e\u3092\u533a\u5207\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5358\u8a9e\u306e\u5dee\u5206\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u5358\u8a9e\u306f\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff-regex")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<mode>")," \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ",(0,a.kt)("em",{parentName:"p"},"plain")," \u3067\u3042\u308a\u3001\u6b21\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"color")),(0,a.kt)("p",{parentName:"li"},"\u8272\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u3055\u308c\u305f\u5358\u8a9e\u3092\u5f37\u8abf\u8868\u793a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--color")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"plain")),(0,a.kt)("p",{parentName:"li"},"\u5358\u8a9e\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"[-removed-]")," \u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"{+ added +}")," \u3068\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002\u533a\u5207\u308a\u6587\u5b57\u304c\u5165\u529b\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u533a\u5207\u308a\u6587\u5b57\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u3088\u3046\u3068\u3057\u306a\u3044\u305f\u3081\u3001\u51fa\u529b\u304c\u3042\u3044\u307e\u3044\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"porcelain")),(0,a.kt)("p",{parentName:"li"},"\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f7f\u7528\u3092\u76ee\u7684\u3068\u3057\u305f\u7279\u5225\u306a\u884c\u30d9\u30fc\u30b9\u306e\u5f62\u5f0f\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u8ffd\u52a0/\u524a\u9664/\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u30e9\u30f3\u306f\u3001\u901a\u5e38\u306e\u7d71\u4e00\u3055\u308c\u305f\u5dee\u5206\u5f62\u5f0f\u3067\u5370\u5237\u3055\u308c\u3001\u884c\u306e\u5148\u982d\u304c ",(0,a.kt)("inlineCode",{parentName:"p"},"+"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-")," / ",(0,a.kt)("inlineCode",{parentName:"p"}," ")," \u6587\u5b57\u3067\u59cb\u307e\u308a\u3001\u884c\u306e\u7d42\u308f\u308a\u307e\u3067\u7d9a\u304d\u307e\u3059\u3002\u5165\u529b\u306e\u6539\u884c\u306f\u3001\u305d\u308c\u81ea\u4f53\u306e\u884c\u306e\u30c1\u30eb\u30c0\u301c\u3067\u8868\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"none")),(0,a.kt)("p",{parentName:"li"},"\u5358\u8a9e\u306e\u5dee\u5206\u3092\u518d\u5ea6\u7121\u52b9\u306b\u3057\u307e\u3059\u3002"))),(0,a.kt)("p",{parentName:"li"},"\u6700\u521d\u306e\u30e2\u30fc\u30c9\u306e\u540d\u524d\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u30e2\u30fc\u30c9\u3067\u5909\u66f4\u3055\u308c\u305f\u90e8\u5206\u3092\u5f37\u8abf\u3059\u308b\u305f\u3081\u306b\u8272\u304c\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff-regex=<regex>")),(0,a.kt)("p",{parentName:"li"},"\u975e\u7a7a\u767d\u306e\u5b9f\u884c\u3092\u5358\u8a9e\u3068\u898b\u306a\u3059\u4ee3\u308f\u308a\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<regex>")," \u3092\u4f7f\u7528\u3057\u3066\u5358\u8a9e\u304c\u4f55\u3067\u3042\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u3059\u3067\u306b\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u9650\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<regex>")," \u306e\u91cd\u8907\u3057\u306a\u3044\u4e00\u81f4\u306f\u3059\u3079\u3066\u3001\u5358\u8a9e\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u4e00\u81f4\u306e\u9593\u306e\u3059\u3079\u3066\u306f\u7a7a\u767d\u3068\u898b\u306a\u3055\u308c\u3001\u9055\u3044\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u7121\u8996\u3055\u308c\u307e\u3059\uff08\uff01\uff09\u3002\u6b63\u898f\u8868\u73fe\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"|[^[:space:]]")," \u3092\u8ffd\u52a0\u3057\u3066\u3001\u7a7a\u767d\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u3068\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u6539\u884c\u3092\u542b\u3080\u4e00\u81f4\u306f\u3001\u6539\u884c\u3067\u30b5\u30a4\u30ec\u30f3\u30c8\u306b\u5207\u308a\u6368\u3066\u3089\u308c\u307e\u3059\uff08\uff01\uff09\u3002"),(0,a.kt)("p",{parentName:"li"},"\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff-regex=.")," \u306f\u5404\u6587\u5b57\u3092\u5358\u8a9e\u3068\u3057\u3066\u6271\u3044\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u3001\u6587\u5b57\u3054\u3068\u306e\u9055\u3044\u3092\u793a\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u6b63\u898f\u8868\u73fe\u306f\u3001diff\u30c9\u30e9\u30a4\u30d0\u30fc\u307e\u305f\u306f\u69cb\u6210\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ecb\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitattributes"},"gitattributes[5]")," \u307e\u305f\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001diff\u30c9\u30e9\u30a4\u30d0\u30fc\u307e\u305f\u306f\u69cb\u6210\u8a2d\u5b9a\u304c\u660e\u793a\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u307e\u3059\u3002\u5dee\u5206\u30c9\u30e9\u30a4\u30d0\u30fc\u306f\u69cb\u6210\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--color-words[=<regex>]")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff=color")," \u306b\u52a0\u3048\u3066 (regex \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u5834\u5408) ",(0,a.kt)("inlineCode",{parentName:"p"},"--word-diff-regex=<regex>")," \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-renames")),(0,a.kt)("p",{parentName:"li"},"\u69cb\u6210\u30d5\u30a1\u30a4\u30eb\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u3001\u540d\u524d\u5909\u66f4\u306e\u691c\u51fa\u3092\u30aa\u30d5\u306b\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--[no-]rename-empty")),(0,a.kt)("p",{parentName:"li"},"\u540d\u524d\u5909\u66f4\u30bd\u30fc\u30b9\u3068\u3057\u3066\u7a7a\u306e\u30d6\u30ed\u30d6\u3092\u4f7f\u7528\u3059\u308b\u304b\u3069\u3046\u304b\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--check")),(0,a.kt)("p",{parentName:"li"},"\u5909\u66f4\u306b\u3088\u3063\u3066\u7af6\u5408\u30de\u30fc\u30ab\u30fc\u307e\u305f\u306f\u7a7a\u767d\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u8b66\u544a\u3057\u307e\u3059\u3002\u7a7a\u767d\u30a8\u30e9\u30fc\u3068\u898b\u306a\u3055\u308c\u308b\u3082\u306e\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"core.whitespace")," \u69cb\u6210\u306b\u3088\u3063\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u672b\u5c3e\u306e\u7a7a\u767d\uff08\u7a7a\u767d\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u308b\u884c\u3092\u542b\u3080\uff09\u3068\u3001\u884c\u306e\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u5185\u3067\u76f4\u5f8c\u306b\u30bf\u30d6\u6587\u5b57\u304c\u7d9a\u304f\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u306f\u3001\u7a7a\u767d\u30a8\u30e9\u30fc\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002\u554f\u984c\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u30bc\u30ed\u4ee5\u5916\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u7d42\u4e86\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--exit-code")," \u3068\u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ws-error-highlight=<kind>")),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u5185\u306e\u7a7a\u767d\u30a8\u30e9\u30fc\u3001\u5dee\u5206\u306e\u53e4\u3044\u884c\u307e\u305f\u306f\u65b0\u3057\u3044\u884c\u3092\u5f37\u8abf\u8868\u793a\u3057\u307e\u3059\u3002\u8907\u6570\u306e\u5024\u306f\u30b3\u30f3\u30de\u3067\u533a\u5207\u3089\u308c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"none")," \u306f\u524d\u306e\u5024\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30ea\u30b9\u30c8\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"new")," \u306b\u30ea\u30bb\u30c3\u30c8\u3057\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"all")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"old"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"new"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"context")," \u306e\u7701\u7565\u5f62\u3067\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u69cb\u6210\u5909\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"diff.wsErrorHighlight")," \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u65b0\u3057\u3044\u884c\u306e\u7a7a\u767d\u30a8\u30e9\u30fc\u306e\u307f\u304c\u5f37\u8abf\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u7a7a\u767d\u30a8\u30e9\u30fc\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"color.diff.whitespace")," \u3067\u8272\u5206\u3051\u3055\u308c\u3066\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--full-index")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30c3\u30c1\u5f62\u5f0f\u306e\u51fa\u529b\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306f\u3001\u6700\u521d\u306e\u4e00\u63e1\u308a\u306e\u6587\u5b57\u306e\u4ee3\u308f\u308a\u306b\u3001\u300cindex\u300d\u884c\u306b\u30a4\u30e1\u30fc\u30b8\u524d\u304a\u3088\u3073\u30a4\u30e1\u30fc\u30b8\u5f8c\u306e\u5b8c\u5168\u306a\u30d6\u30ed\u30d6\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3092\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--binary")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--full-index")," \u306b\u52a0\u3048\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git-apply")," \u3067\u9069\u7528\u3067\u304d\u308b\u30d0\u30a4\u30ca\u30ea\u5dee\u5206\u3092\u51fa\u529b\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--patch")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--abbrev[=<n>]")),(0,a.kt)("p",{parentName:"li"},"\u5b8c\u5168\u306a40\u30d0\u30a4\u30c8\u306e16\u9032\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3092 ",(0,a.kt)("inlineCode",{parentName:"p"},"diff-raw")," \u5f62\u5f0f\u306e\u51fa\u529b\u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"diff-tree")," \u30d8\u30c3\u30c0\u30fc\u884c\u306b\u8868\u793a\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e00\u610f\u306b\u53c2\u7167\u3059\u308b\u3001\u5c11\u306a\u304f\u3068\u3082 ",(0,a.kt)("inlineCode",{parentName:"p"},"<n>")," 16\u9032\u6570\u306e\u9577\u3055\u306e\u6700\u77ed\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"diff-patch")," \u51fa\u529b\u5f62\u5f0f\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--full-index")," \u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--full-index")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--abbrev")," \u306b\u95a2\u4fc2\u306a\u304f\u5b8c\u5168\u306ablob\u540d\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u4ee5\u5916\u306e\u6841\u6570\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--abbrev=<n>")," \u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-B[<n>][/<m>]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--break-rewrites[=[<n>][/<m>]]")),(0,a.kt)("p",{parentName:"li"},"\u5b8c\u5168\u306a\u66f8\u304d\u63db\u3048\u306e\u5909\u66f4\u3092\u524a\u9664\u3068\u4f5c\u6210\u306e\u30da\u30a2\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u306f2\u3064\u306e\u76ee\u7684\u304c\u3042\u308a\u307e\u3059\uff1a"),(0,a.kt)("p",{parentName:"li"},"\u3053\u308c\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5b8c\u5168\u306a\u66f8\u304d\u63db\u3048\u306b\u76f8\u5f53\u3059\u308b\u5909\u66f4\u304c\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3067\u4e00\u81f4\u3059\u308b\u975e\u5e38\u306b\u5c11\u6570\u306e\u884c\u3068\u6df7\u5408\u3055\u308c\u305f\u4e00\u9023\u306e\u524a\u9664\u3068\u633f\u5165\u3068\u3057\u3066\u3067\u306f\u306a\u304f\u3001\u53e4\u3044\u3082\u306e\u3059\u3079\u3066\u306e\u5358\u4e00\u306e\u524a\u9664\u3068\u305d\u308c\u306b\u7d9a\u304f\u3059\u3079\u3066\u306e\u65b0\u3057\u3044\u3082\u306e\u30921\u56de\u633f\u5165\u3057\u3001\u6570\u5024 ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-B")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3053\u306e\u5074\u9762\u3092\u5236\u5fa1\u3057\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f60\uff05\uff09\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"-B/70\uff05")," \u306f\u3001Git \u304c\u305d\u308c\u3092\u5b8c\u5168\u306a\u66f8\u304d\u63db\u3048\u3068\u898b\u306a\u3059\u305f\u3081\u306b\u3001\u5143\u306e30\uff05\u672a\u6e80\u304c\u7d50\u679c\u306b\u6b8b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u307e\u3059\uff08\u3064\u307e\u308a\u3001\u7d50\u679c\u306e\u30d1\u30c3\u30c1\u306f\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u884c\u3068\u6df7\u5408\u3055\u308c\u305f\u4e00\u9023\u306e\u524a\u9664\u3068\u633f\u5165\u306b\u306a\u308a\u307e\u3059\uff09\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-M")," \u3068\u3068\u3082\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u5b8c\u5168\u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3082\u540d\u524d\u5909\u66f4\u306e\u30bd\u30fc\u30b9\u3068\u898b\u306a\u3055\u308c\uff08\u901a\u5e38\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M")," \u306f\u3001\u6d88\u3048\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u3092\u540d\u524d\u5909\u66f4\u306e\u30bd\u30fc\u30b9\u3068\u898b\u306a\u3057\u307e\u3059\uff09\u3001\u756a\u53f7 ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-B")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3053\u306e\u5074\u9762\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f50\uff05\uff09\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"-B20\uff05")," \u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u306e20\uff05\u4ee5\u4e0a\u3068\u6bd4\u8f03\u3057\u3066\u3001\u8ffd\u52a0\u304a\u3088\u3073\u524a\u9664\u3092\u4f34\u3046\u5909\u66f4\u304c\u3001\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u540d\u524d\u5909\u66f4\u306e\u53ef\u80fd\u306a\u30bd\u30fc\u30b9\u3068\u3057\u3066\u53d6\u5f97\u3055\u308c\u308b\u8cc7\u683c\u304c\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-M[<n>]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--find-renames[=<n>]")),(0,a.kt)("p",{parentName:"li"},"\u540d\u524d\u306e\u5909\u66f4\u3092\u691c\u51fa\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u306f\u985e\u4f3c\u6027\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u3057\u304d\u3044\u5024\u3067\u3059\uff08\u3064\u307e\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u3068\u6bd4\u8f03\u3057\u305f\u8ffd\u52a0/\u524a\u9664\u306e\u91cf\uff09\u3002\u305f\u3068\u3048\u3070\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M90\uff05")," \u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e90\uff05\u4ee5\u4e0a\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001Git \u304c\u524a\u9664\u3068\u8ffd\u52a0\u306e\u30da\u30a2\u3092\u540d\u524d\u5909\u66f4\u3068\u898b\u306a\u3059\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"\uff05")," \u8a18\u53f7\u304c\u306a\u3044\u5834\u5408\u3001\u6570\u5024\u306f\u5c0f\u6570\u3068\u3057\u3066\u8aad\u307f\u53d6\u3089\u308c\u3001\u305d\u306e\u524d\u306b\u5c0f\u6570\u70b9\u304c\u4ed8\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M5")," \u306f 0.5 \u306b\u306a\u308b\u305f\u3081\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M50\uff05")," \u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\u540c\u69d8\u306b\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M05")," \u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-M5\uff05")," \u3068\u540c\u3058\u3067\u3059\u3002\u691c\u51fa\u3092\u6b63\u78ba\u306a\u540d\u524d\u5909\u66f4\u306b\u5236\u9650\u3059\u308b\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M100\uff05")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u985e\u4f3c\u6027\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f50\uff05\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-C[<n>]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--find-copies[=<n>]")),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30d4\u30fc\u3068\u540d\u524d\u306e\u5909\u66f4\u3092\u691c\u51fa\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--find-copies-harder")," \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"n")," \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-M<n>")," \u3068\u540c\u3058\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--find-copies-harder")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u4e0a\u306e\u7406\u7531\u304b\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-C")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u30b3\u30d4\u30fc\u306e\u5143\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u540c\u3058\u30c1\u30a7\u30f3\u30b8\u30bb\u30c3\u30c8\u3067\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u306b\u306e\u307f\u30b3\u30d4\u30fc\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306b\u3088\u308a\u3001\u30b3\u30de\u30f3\u30c9\u306f\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u5143\u306e\u5019\u88dc\u3068\u3057\u3066\u691c\u67fb\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u975e\u5e38\u306b\u30b3\u30b9\u30c8\u306e\u304b\u304b\u308b\u64cd\u4f5c\u3067\u3042\u308b\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u8907\u6570\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"-C")," \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001\u540c\u3058\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-D"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--irreversible-delete")),(0,a.kt)("p",{parentName:"li"},"\u524a\u9664\u3059\u308b\u30d7\u30ec\u30a4\u30e1\u30fc\u30b8\u3092\u7701\u7565\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d8\u30c3\u30c0\u30fc\u306e\u307f\u3092\u51fa\u529b\u3057\u3001\u30d7\u30ec\u30a4\u30e1\u30fc\u30b8\u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"/dev/null")," \u306e\u5dee\u5206\u306f\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\u7d50\u679c\u306e\u30d1\u30c3\u30c1\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"patch")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"git apply")," \u3067\u9069\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u56f3\u3057\u305f\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u3001\u5909\u66f4\u5f8c\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306b\u96c6\u4e2d\u3057\u305f\u3044\u4eba\u306e\u305f\u3081\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002\u3055\u3089\u306b\u3001\u51fa\u529b\u306b\u306f\u660e\u3089\u304b\u306b\u3001\u305d\u306e\u3088\u3046\u306a\u30d1\u30c3\u30c1\u3092\u624b\u52d5\u3067\u3082\u9006\u306b\u9069\u7528\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-B")," \u3068\u4f75\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u524a\u9664/\u4f5c\u6210\u30da\u30a2\u306e\u524a\u9664\u90e8\u5206\u306e\u30d7\u30ea\u30a4\u30e1\u30fc\u30b8\u3082\u7701\u7565\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-l<num>")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-M")," \u304a\u3088\u3073 ",(0,a.kt)("inlineCode",{parentName:"p"},"-C")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u3001\u540d\u524d\u5909\u66f4/\u30b3\u30d4\u30fc\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u5b89\u4fa1\u306b\u691c\u51fa\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u6e96\u5099\u624b\u9806\u304c\u542b\u307e\u308c\u3001\u305d\u306e\u5f8c\u306b\u3001\u6b8b\u308a\u306e\u3059\u3079\u3066\u306e\u30da\u30a2\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5b9b\u5148\u3092\u3059\u3079\u3066\u306e\u95a2\u9023\u30bd\u30fc\u30b9\u3068\u6bd4\u8f03\u3059\u308b\u5fb9\u5e95\u7684\u306a\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u90e8\u5206\u304c\u7d9a\u304d\u307e\u3059\u3002 \uff08\u540d\u524d\u5909\u66f4\u306e\u5834\u5408\u3001\u6b8b\u308a\u306e\u30da\u30a2\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u30bd\u30fc\u30b9\u306e\u307f\u304c\u95a2\u4fc2\u3057\u307e\u3059\u3002\u30b3\u30d4\u30fc\u306e\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u5143\u306e\u30bd\u30fc\u30b9\u304c\u95a2\u4fc2\u3057\u307e\u3059\u3002\uff09N\u500b\u306e\u30bd\u30fc\u30b9\u3068\u5b9b\u5148\u306e\u5834\u5408\u3001\u3053\u306e\u5fb9\u5e95\u7684\u306a\u30c1\u30a7\u30c3\u30af\u306f O(N^2) \u3067\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001\u95a2\u4fc2\u3059\u308b\u30bd\u30fc\u30b9/\u5b9b\u5148\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u304c\u6307\u5b9a\u3055\u308c\u305f\u6570\u3092\u8d85\u3048\u305f\u5834\u5408\u306b\u3001\u540d\u524d\u5909\u66f4/\u30b3\u30d4\u30fc\u691c\u51fa\u306e\u5b8c\u5168\u306a\u90e8\u5206\u304c\u5b9f\u884c\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"diff.renameLimit")," \u3067\u3059\u3002\u50240\u306f\u7121\u5236\u9650\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]")),(0,a.kt)("p",{parentName:"li"},"\u8ffd\u52a0\u3055\u308c\u305f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"A"),"\uff09\u3001\u30b3\u30d4\u30fc\u3055\u308c\u305f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"C"),"\uff09\u3001\u524a\u9664\u3055\u308c\u305f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"D"),"\uff09\u3001\u5909\u66f4\u3055\u308c\u305f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"M"),"\uff09\u3001\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u305f\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"R"),"\uff09\u3001\u30bf\u30a4\u30d7\uff08\u3064\u307e\u308a\u3001\u901a\u5e38\u306e\u30d5\u30a1\u30a4\u30eb\u3001\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306a\u3069\uff09\u304c\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u3092\u9078\u629e\u3057\u307e\u3059\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"T"),"\uff09\u3001\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"U"),"\uff09\u3001\u4e0d\u660e\u3067\u3042\u308b\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"X"),"\uff09\u3001\u307e\u305f\u306f\u30da\u30a2\u30ea\u30f3\u30b0\u304c\u58ca\u308c\u3066\u3044\u308b\uff08",(0,a.kt)("inlineCode",{parentName:"p"},"B"),"\uff09\u3002\u30d5\u30a3\u30eb\u30bf\u6587\u5b57\u306e\u4efb\u610f\u306e\u7d44\u307f\u5408\u308f\u305b\uff08\u306a\u3057\u3092\u542b\u3080\uff09\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"*"),"\uff08All-or-none\uff09\u304c\u7d44\u307f\u5408\u308f\u305b\u306b\u8ffd\u52a0\u3055\u308c\u308b\u3068\u3001\u6bd4\u8f03\u3067\u4ed6\u306e\u57fa\u6e96\u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u30d1\u30b9\u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002\u4ed6\u306e\u57fa\u6e96\u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u304c\u306a\u3044\u5834\u5408\u3001\u4f55\u3082\u9078\u629e\u3055\u308c\u307e\u305b\u3093\u3002"),(0,a.kt)("p",{parentName:"li"},"\u307e\u305f\u3001\u3053\u308c\u3089\u306e\u5927\u6587\u5b57\u306f\u5c0f\u6587\u5b57\u3067\u9664\u5916\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--diff-filter=ad")," \u306f\u3001\u8ffd\u52a0\u304a\u3088\u3073\u524a\u9664\u3055\u308c\u305f\u30d1\u30b9\u3092\u9664\u5916\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u3059\u3079\u3066\u306e\u5dee\u5206\u304c\u3059\u3079\u3066\u306e\u30bf\u30a4\u30d7\u3092\u7279\u5fb4\u3068\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305f\u3068\u3048\u3070\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u4f5c\u696d\u30c4\u30ea\u30fc\u3078\u306e\u5dee\u5206\u306b\u30a8\u30f3\u30c8\u30ea\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\uff08\u5dee\u5206\u306b\u542b\u307e\u308c\u308b\u30d1\u30b9\u306e\u30bb\u30c3\u30c8\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u5236\u9650\u3055\u308c\u308b\u305f\u3081\uff09\u3002\u540c\u69d8\u306b\u3001\u3053\u308c\u3089\u306e\u30bf\u30a4\u30d7\u306e\u691c\u51fa\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30d4\u30fc\u304a\u3088\u3073\u540d\u524d\u5909\u66f4\u3055\u308c\u305f\u30a8\u30f3\u30c8\u30ea\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-S<string>")),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u6307\u5b9a\u3055\u308c\u305f\u6587\u5b57\u5217\u306e\u51fa\u73fe\u56de\u6570\uff08\u3064\u307e\u308a\u3001\u8ffd\u52a0/\u524a\u9664\uff09\u3092\u5909\u66f4\u3059\u308b\u9055\u3044\u3092\u63a2\u3057\u307e\u3059\u3002\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u8005\u304c\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30b3\u30fc\u30c9\u306e\u6b63\u78ba\u306a\u30d6\u30ed\u30c3\u30af\uff08\u69cb\u9020\u4f53\u306a\u3069\uff09\u3092\u63a2\u3057\u3066\u3044\u3066\u3001\u305d\u306e\u30d6\u30ed\u30c3\u30af\u304c\u6700\u521d\u306b\u4f5c\u6210\u3055\u308c\u3066\u304b\u3089\u306e\u5c65\u6b74\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002\u3053\u306e\u6a5f\u80fd\u3092\u7e70\u308a\u8fd4\u3057\u4f7f\u7528\u3057\u3066\u3001\u30d7\u30ea\u30a4\u30e1\u30fc\u30b8\u5185\u306e\u8208\u5473\u6df1\u3044\u30d6\u30ed\u30c3\u30af\u3092\u306b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"-S"),"\u3001\u305d\u3057\u3066\u30d6\u30ed\u30c3\u30af\u306e\u6700\u521d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u307e\u3067\u7d9a\u3051\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3082\u691c\u7d22\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-G<regex>")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30c3\u30c1\u30c6\u30ad\u30b9\u30c8\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"<regex>")," \u306b\u4e00\u81f4\u3059\u308b\u8ffd\u52a0/\u524a\u9664\u3055\u308c\u305f\u884c\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u9055\u3044\u3092\u63a2\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-S<regex> --pickaxe-regex")," \u3068 ",(0,a.kt)("inlineCode",{parentName:"p"},"-G<regex>")," \u306e\u9055\u3044\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u3001\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u6b21\u306ediff\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30df\u30c3\u30c8\u3059\u308b\u3053\u3068\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},'git log -G "frotz\\nitfol"')," \u306f\u3053\u306e\u30b3\u30df\u30c3\u30c8\u3092\u8868\u793a\u3057\u307e\u3059\u304c\u3001",(0,a.kt)("inlineCode",{parentName:"p"},'git log -S "frotz\\nitfol" --pickaxe-regex')," \u306f\u8868\u793a\u3057\u307e\u305b\u3093\uff08\u305d\u306e\u6587\u5b57\u5217\u306e\u51fa\u73fe\u56de\u6570\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\uff09\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--text")," \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001textconv\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u306a\u3044\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30c3\u30c1\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002"))),(0,a.kt)("p",null,"  \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitdiffcore"},"gitdiffcore[7]")," \u306e ",(0,a.kt)("em",{parentName:"p"},"pickaxe")," \u30a8\u30f3\u30c8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--find-object=<object-id>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u51fa\u73fe\u56de\u6570\u3092\u5909\u5316\u3055\u305b\u308b\u5dee\u5206\u3092\u691c\u7d22\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"-S")," \u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u5f15\u6570\u304c\u7570\u306a\u308b\u3060\u3051\u3067\u3001\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 ID \u3092\u691c\u7d22\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30d6\u30ed\u30d6\u3084\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30df\u30c3\u30c8\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git-log")," \u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"-t")," \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u30c4\u30ea\u30fc\u3082\u691c\u7d22\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pickaxe-all")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-S")," \u307e\u305f\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"-G")," \u304c\u5909\u66f4\u3092\u691c\u51fa\u3057\u305f\u3089\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<string>")," \u306e\u5909\u66f4\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u5909\u66f4\u30bb\u30c3\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u5909\u66f4\u3092\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--pickaxe-regex")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-S")," \u306b\u6307\u5b9a\u3055\u308c\u305f ",(0,a.kt)("inlineCode",{parentName:"p"},"<string>")," \u3092\u3001\u4e00\u81f4\u3059\u308b\u62e1\u5f35 POSIX \u6b63\u898f\u8868\u73fe\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-O<orderfile>")),(0,a.kt)("p",{parentName:"li"},"\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u529b\u306b\u8868\u793a\u3055\u308c\u308b\u9806\u5e8f\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.orderFile")," \u69cb\u6210\u5909\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u3092\u53c2\u7167\uff09\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"diff.orderFile")," \u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u306b\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"-O/dev/null")," \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},"\u51fa\u529b\u9806\u5e8f\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"<orderfile>")," \u5185\u306e\u30b0\u30ed\u30d6\u30d1\u30bf\u30fc\u30f3\u306e\u9806\u5e8f\u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u6700\u521d\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u30d1\u30b9\u540d\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u6700\u521d\u306b\u51fa\u529b\u3055\u308c\u30012\u756a\u76ee\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\uff08\u305f\u3060\u3057\u6700\u521d\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u306f\u4e00\u81f4\u3057\u306a\u3044\uff09\u30d1\u30b9\u540d\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u6b21\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u30d1\u30b9\u540d\u304c\u3069\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3082\u4e00\u81f4\u3057\u306a\u3044\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u6700\u5f8c\u306b\u6697\u9ed9\u306e\u3059\u3079\u3066\u4e00\u81f4\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u304b\u306e\u3088\u3046\u306b\u3001\u6700\u5f8c\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u30d1\u30b9\u540d\u306e\u30e9\u30f3\u30af\u304c\u540c\u3058\u3067\u3042\u308b\u5834\u5408\uff08\u540c\u3058\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u304c\u3001\u4ee5\u524d\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u306f\u4e00\u81f4\u3057\u306a\u3044\uff09\u3001\u76f8\u4e92\u306e\u51fa\u529b\u9806\u5e8f\u306f\u901a\u5e38\u306e\u9806\u5e8f\u3067\u3059\u3002"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<orderfile>")," \u306f\u6b21\u306e\u3088\u3046\u306b\u89e3\u6790\u3055\u308c\u307e\u3059\uff1a"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u7a7a\u767d\u884c\u306f\u7121\u8996\u3055\u308c\u308b\u305f\u3081\u3001\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306e\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u30cf\u30c3\u30b7\u30e5\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"li"},"\uff03"),"\u300d\uff09\u3067\u59cb\u307e\u308b\u884c\u306f\u7121\u8996\u3055\u308c\u308b\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u30d1\u30bf\u30fc\u30f3\u304c\u30cf\u30c3\u30b7\u30e5\u3067\u59cb\u307e\u308b\u5834\u5408\u306f\u3001\u30d1\u30bf\u30fc\u30f3\u306e\u5148\u982d\u306b\u5186\u8a18\u53f7\uff08\u300c",(0,a.kt)("inlineCode",{parentName:"li"},"\\"),"\u300d\uff09\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u4ed6\u306e\u5404\u884c\u306b\u306f\u3001\u5358\u4e00\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002")),(0,a.kt)("p",{parentName:"li"},"\u30d1\u30bf\u30fc\u30f3\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"FNM_PATHNAME")," \u30d5\u30e9\u30b0\u306a\u3057\u3067 fnmatch(3) \u306b\u4f7f\u7528\u3055\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u3068\u540c\u3058\u69cb\u6587\u3068\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u6700\u7d42\u7684\u306a\u30d1\u30b9\u540d\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u3044\u304f\u3064\u3067\u3082\u524a\u9664\u3059\u308b\u3068\u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3059\u308b\u5834\u5408\u3001\u30d1\u30b9\u540d\u3082\u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3059\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u30d1\u30bf\u30fc\u30f3\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"foo*bar"),"\u300d\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"fooasdfbar"),"\u300d\u304a\u3088\u3073\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"foo/bar/baz/asdf"),"\u300d\u3068\u4e00\u81f4\u3057\u307e\u3059\u304c\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"foobarx"),"\u300d\u3068\u306f\u4e00\u81f4\u3057\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--skip-to=<file>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--rotate-to=<file>")),(0,a.kt)("p",{parentName:"li"},"\u540d\u524d\u4ed8\u304d ",(0,a.kt)("inlineCode",{parentName:"p"},"<file>")," \u306e\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u304b\u3089\u7834\u68c4\u3059\u308b\u304b\uff08\u3064\u307e\u308a\u3001",(0,a.kt)("em",{parentName:"p"},"skip to"),"\uff09\u3001\u51fa\u529b\u306e\u6700\u5f8c\u306b\u79fb\u52d5\u3057\u307e\u3059\uff08\u3064\u307e\u308a\u3001",(0,a.kt)("em",{parentName:"p"},"rotate to"),"\uff09\u3002\u3053\u308c\u3089\u306f\u4e3b\u306b ",(0,a.kt)("inlineCode",{parentName:"p"},"git difftool")," \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u8003\u6848\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308a\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3042\u307e\u308a\u5f79\u306b\u7acb\u305f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-R")),(0,a.kt)("p",{parentName:"li"},"2\u3064\u306e\u5165\u529b\u3092\u4ea4\u63db\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u307e\u305f\u306f\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u30c4\u30ea\u30fc\u306e\u5185\u5bb9\u306e\u9055\u3044\u3092\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--relative[=<path>]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-relative")),(0,a.kt)("p",{parentName:"li"},"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5916\u306e\u5909\u66f4\u3092\u9664\u5916\u3057\u3001\u305d\u308c\u306b\u95a2\u9023\u3059\u308b\u30d1\u30b9\u540d\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u6307\u793a\u3067\u304d\u307e\u3059\u3002\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\uff08\u30d9\u30a2\u30ea\u30dd\u30b8\u30c8\u30ea\u306a\u3069\uff09\u306b\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u3068\u3057\u3066 ",(0,a.kt)("inlineCode",{parentName:"p"},"<path>")," \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u51fa\u529b\u3092\u4f5c\u6210\u3059\u308b\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--no-relative")," \u3092\u4f7f\u7528\u3057\u3066\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"diff.relative")," \u69cb\u6210\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u4ee5\u524d\u306e ",(0,a.kt)("inlineCode",{parentName:"p"},"--relative")," \u306e\u4e21\u65b9\u3092\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-a"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--text")),(0,a.kt)("p",{parentName:"li"},"\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-cr-at-eol")),(0,a.kt)("p",{parentName:"li"},"\u6bd4\u8f03\u3092\u884c\u3046\u3068\u304d\u306f\u3001\u884c\u672b\u306e\u30ad\u30e3\u30ea\u30c3\u30b8\u30ea\u30bf\u30fc\u30f3\u3092\u7121\u8996\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-space-at-eol")),(0,a.kt)("p",{parentName:"li"},"EOL \u3067\u7a7a\u767d\u306e\u5909\u66f4\u3092\u7121\u8996\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-b"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-space-change")),(0,a.kt)("p",{parentName:"li"},"\u7a7a\u767d\u306e\u91cf\u306e\u5909\u66f4\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u3001\u884c\u672b\u306e\u7a7a\u767d\u3092\u7121\u8996\u3057\u30011\u3064\u4ee5\u4e0a\u306e\u7a7a\u767d\u6587\u5b57\u306e\u4ed6\u306e\u3059\u3079\u3066\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u540c\u7b49\u3068\u898b\u306a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-w"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-all-space")),(0,a.kt)("p",{parentName:"li"},"\u7dda\u3092\u6bd4\u8f03\u3059\u308b\u3068\u304d\u306f\u7a7a\u767d\u3092\u7121\u8996\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e00\u65b9\u306e\u884c\u306b\u7a7a\u767d\u304c\u3042\u308a\u3001\u3082\u3046\u4e00\u65b9\u306e\u884c\u306b\u7a7a\u767d\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001\u9055\u3044\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-blank-lines")),(0,a.kt)("p",{parentName:"li"},"\u884c\u304c\u3059\u3079\u3066\u7a7a\u767d\u306e\u5909\u66f4\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-I<regex>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-matching-lines=<regex>")),(0,a.kt)("p",{parentName:"li"},"\u3059\u3079\u3066\u306e\u884c\u304c ",(0,a.kt)("inlineCode",{parentName:"p"},"<regex>")," \u306b\u4e00\u81f4\u3059\u308b\u5909\u66f4\u3092\u7121\u8996\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--inter-hunk-context=<lines>")),(0,a.kt)("p",{parentName:"li"},"\u6307\u5b9a\u3055\u308c\u305f\u884c\u6570\u307e\u3067\u306e\u5dee\u5206\u30cf\u30f3\u30af\u9593\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3057\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u4e92\u3044\u306b\u8fd1\u3044\u30cf\u30f3\u30af\u3092\u878d\u5408\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f ",(0,a.kt)("inlineCode",{parentName:"p"},"diff.interHunkContext")," \u3067\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"config")," \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f0\u3067\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-W"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--function-context")),(0,a.kt)("p",{parentName:"li"},"\u95a2\u6570\u5168\u4f53\u3092\u5404\u5909\u66f4\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u884c\u3068\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002\u95a2\u6570\u540d\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"git diff")," \u304c\u30d1\u30c3\u30c1\u30cf\u30f3\u30af\u30d8\u30c3\u30c0\u30fc\u3092\u51e6\u7406\u3059\u308b\u306e\u3068\u540c\u3058\u65b9\u6cd5\u3067\u6c7a\u5b9a\u3055\u308c\u307e\u3059\uff08",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitattributes"},"gitattributes[5]")," \u3067\u306e ",(0,a.kt)("em",{parentName:"p"},"Defining a custom hunk-header")," \u3092\u53c2\u7167\uff09\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--exit-code")),(0,a.kt)("p",{parentName:"li"},"diff(1) \u3068\u540c\u69d8\u306e\u30b3\u30fc\u30c9\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3055\u305b\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u9055\u3044\u304c\u3042\u3063\u305f\u5834\u5408\u306f1\u3067\u7d42\u4e86\u3057\u30010 \u306f\u9055\u3044\u304c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--quiet")),(0,a.kt)("p",{parentName:"li"},"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3059\u3079\u3066\u306e\u51fa\u529b\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"--exit-code")," \u3092\u610f\u5473\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ext-diff")),(0,a.kt)("p",{parentName:"li"},"\u5916\u90e8\u5dee\u5206\u30d8\u30eb\u30d1\u30fc\u306e\u5b9f\u884c\u3092\u8a31\u53ef\u3057\u307e\u3059\u3002",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitattributes"},"gitattributes[5]")," \u3092\u4f7f\u7528\u3057\u3066\u5916\u90e8diff\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-log"},"git-log[1]")," \u304a\u3088\u3073\u305d\u306e\u4ef2\u9593\u3068\u4e00\u7dd2\u306b\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-ext-diff")),(0,a.kt)("p",{parentName:"li"},"\u5916\u90e8\u5dee\u5206\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u7981\u6b62\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--textconv"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-textconv")),(0,a.kt)("p",{parentName:"li"},"\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u6bd4\u8f03\u3059\u308b\u3068\u304d\u306b\u3001\u5916\u90e8\u30c6\u30ad\u30b9\u30c8\u5909\u63db\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u5b9f\u884c\u3092\u8a31\u53ef\uff08\u307e\u305f\u306f\u7981\u6b62\uff09\u3057\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitattributes"},"gitattributes[5]")," \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002textconv \u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u901a\u5e38\u3001\u4e00\u65b9\u5411\u306e\u5909\u63db\u3067\u3042\u308b\u305f\u3081\u3001\u7d50\u679c\u306ediff\u306f\u4eba\u9593\u306e\u6d88\u8cbb\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u9069\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u306e\u305f\u3081\u3001textconv\u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-diff"},"git-diff[1]")," \u304a\u3088\u3073 ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-log"},"git-log[1]")," \u306b\u5bfe\u3057\u3066\u306e\u307f\u6709\u52b9\u306b\u306a\u308a\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-format-patch"},"git-format-patch[1]")," \u307e\u305f\u306f diff \u914d\u7ba1\u30b3\u30de\u30f3\u30c9\u306b\u5bfe\u3057\u3066\u306f\u6709\u52b9\u306b\u306a\u308a\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ignore-submodules[=<when>]")),(0,a.kt)("p",{parentName:"li"},"diff \u751f\u6210\u306e\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u5909\u66f4\u3092\u7121\u8996\u3057\u307e\u3059\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"<when>")," \u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"none"),"\u300d\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"untracked"),"\u300d\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"dirty"),"\u300d\u3001\u307e\u305f\u306f\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"all"),"\u300d\u306e\u3044\u305a\u308c\u304b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002 \u300c",(0,a.kt)("inlineCode",{parentName:"p"},"none"),"\u300d\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u8ffd\u8de1\u3055\u308c\u3066\u3044\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u307e\u305f\u306f\u305d\u306eHEAD\u304c\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30b3\u30df\u30c3\u30c8\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5909\u66f4\u3055\u308c\u305f\u3068\u898b\u306a\u3055\u308c\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-config"},"git-config[1]")," \u307e\u305f\u306f ",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitmodules"},"gitmodules[5]")," \u306e ",(0,a.kt)("em",{parentName:"p"},"ignore")," \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u3067\u304d\u307e\u3059\u3002\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"untracked"),"\u300d\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u8ffd\u8de1\u3055\u308c\u3066\u3044\u306a\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u307f\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30c0\u30fc\u30c6\u30a3\u3068\u306f\u898b\u306a\u3055\u308c\u307e\u305b\u3093\uff08\u305f\u3060\u3057\u3001\u5909\u66f4\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u30b9\u30ad\u30e3\u30f3\u3055\u308c\u307e\u3059\uff09\u3002 \u300c",(0,a.kt)("inlineCode",{parentName:"p"},"dirty"),"\u300d\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f5c\u696d\u30c4\u30ea\u30fc\u3078\u306e\u3059\u3079\u3066\u306e\u5909\u66f4\u304c\u7121\u8996\u3055\u308c\u3001\u30b9\u30fc\u30d1\u30fc\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30b3\u30df\u30c3\u30c8\u3078\u306e\u5909\u66f4\u306e\u307f\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff08\u3053\u308c\u306f1.7.0\u307e\u3067\u306e\u52d5\u4f5c\u3067\u3057\u305f\uff09\u3002\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"all"),"\u300d\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u3059\u3079\u3066\u306e\u5909\u66f4\u304c\u975e\u8868\u793a\u306b\u306a\u308a\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--src-prefix=<prefix>")),(0,a.kt)("p",{parentName:"li"},"\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"a/"),"\u300d\u306e\u4ee3\u308f\u308a\u306b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--dst-prefix=<prefix>")),(0,a.kt)("p",{parentName:"li"},"\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"b/"),"\u300d\u306e\u4ee3\u308f\u308a\u306b\u3001\u6307\u5b9a\u3055\u308c\u305f\u5b9b\u5148\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--no-prefix")),(0,a.kt)("p",{parentName:"li"},"\u9001\u4fe1\u5143\u307e\u305f\u306f\u5b9b\u5148\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8868\u793a\u3057\u307e\u305b\u3093\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--line-prefix=<prefix>")),(0,a.kt)("p",{parentName:"li"},"\u51fa\u529b\u306e\u3059\u3079\u3066\u306e\u884c\u306b\u8ffd\u52a0\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--ita-invisible-in-index")),(0,a.kt)("p",{parentName:"li"},"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git add -N"),"\u300d\u306b\u3088\u3063\u3066\u8ffd\u52a0\u3055\u308c\u305f\u30a8\u30f3\u30c8\u30ea\u306f\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git diff"),"\u300d\u306b\u65e2\u5b58\u306e\u7a7a\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git diff --cached"),"\u300d\u306b\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30a8\u30f3\u30c8\u30ea\u306f\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git diff"),"\u300d\u3067\u306f\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u3001\u300c",(0,a.kt)("inlineCode",{parentName:"p"},"git diff --cached"),"\u300d\u3067\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"--ita-visible-in-index")," \u3067\u5143\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u5b9f\u9a13\u7684\u306a\u3082\u306e\u3067\u3042\u308a\u3001\u5c06\u6765\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002"))),(0,a.kt)("p",null,"\u3053\u308c\u3089\u306e\u4e00\u822c\u7684\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/gitdiffcore"},"gitdiffcore[7]")," \u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-1 --base"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-2 --ours"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-3 --theirs")),(0,a.kt)("p",{parentName:"li"},"\u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u300c\u30d9\u30fc\u30b9\u300d\u30d0\u30fc\u30b8\u30e7\u30f3\uff08\u30b9\u30c6\u30fc\u30b8\uff031\uff09\u3001\u300c\u79c1\u305f\u3061\u306e\u30d6\u30e9\u30f3\u30c1\u300d\uff08\u30b9\u30c6\u30fc\u30b8\uff032\uff09\u3001\u307e\u305f\u306f\u300c\u305d\u308c\u3089\u306e\u30d6\u30e9\u30f3\u30c1\u300d\uff08\u30b9\u30c6\u30fc\u30b8\uff033\uff09\u3068\u6bd4\u8f03\u3057\u307e\u3059\u3002\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306f\u3001\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u306e\u5834\u5408\u3001\u3064\u307e\u308a\u7af6\u5408\u3092\u89e3\u6c7a\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u3001\u3053\u308c\u3089\u306e\u30b9\u30c6\u30fc\u30b8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001",(0,a.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-read-tree"},"git-read-tree[1]")," \u30bb\u30af\u30b7\u30e7\u30f3\u306e\u300c3\u65b9\u5411\u30de\u30fc\u30b8\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"-0")),(0,a.kt)("p",{parentName:"li"},"\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u306ediff\u51fa\u529b\u3092\u7701\u7565\u3057\u3001\u300cUnmerged\u300d\u3068\u8868\u793a\u3057\u307e\u3059\u3002\u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u6bd4\u8f03\u3059\u308b\u5834\u5408\u306b\u306e\u307f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<path>...")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"<paths>")," \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001diff \u3092\u540d\u524d\u4ed8\u304d\u30d1\u30b9\u306b\u5236\u9650\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\uff08\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u4e0b\u306b\u3042\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u306e diff \u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\uff09\u3002"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'### RAW OUTPUT FORMAT\n       The raw output format from "git-diff-index", "git-diff-tree",\n       "git-diff-files" and "git diff --raw" are very similar.\n\n       These commands all compare two sets of things; what is compared\n       differs:\n\n       git-diff-index <tree-ish>\n           compares the <tree-ish> and the files on the filesystem.\n\n       git-diff-index --cached <tree-ish>\n           compares the <tree-ish> and the index.\n\n       git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>...]\n           compares the trees named by the two arguments.\n\n       git-diff-files [<pattern>...]\n           compares the index and the files on the filesystem.\n\n       The "git-diff-tree" command begins its output by printing the hash of\n       what is being compared. After that, all the commands print one output\n       line per changed file.\n\n       An output line is formatted this way:\n\n           in-place edit  :100644 100644 bcd1234 0123456 M file0\n           copy-edit      :100644 100644 abcd123 1234567 C68 file1 file2\n           rename-edit    :100644 100644 abcd123 1234567 R86 file1 file3\n           create         :000000 100644 0000000 1234567 A file4\n           delete         :100644 000000 1234567 0000000 D file5\n           unmerged       :000000 000000 0000000 0000000 U file6\n\n\n       That is, from the left to the right:\n\n        1. a colon.\n\n        2. mode for "src"; 000000 if creation or unmerged.\n\n        3. a space.\n\n        4. mode for "dst"; 000000 if deletion or unmerged.\n\n        5. a space.\n\n        6. sha1 for "src"; 0{40} if creation or unmerged.\n\n        7. a space.\n\n        8. sha1 for "dst"; 0{40} if creation, unmerged or "look at work tree".\n\n        9. a space.\n\n       10. status, followed by optional "score" number.\n\n       11. a tab or a NUL when -z option is used.\n\n       12. path for "src"\n\n       13. a tab or a NUL when -z option is used; only exists for C or R.\n\n       14. path for "dst"; only exists for C or R.\n\n       15. an LF or a NUL when -z option is used, to terminate the record.\n\n       Possible status letters are:\n\n       o   A: addition of a file\n\n       o   C: copy of a file into a new one\n\n       o   D: deletion of a file\n\n       o   M: modification of the contents or mode of a file\n\n       o   R: renaming of a file\n\n       o   T: change in the type of the file\n\n       o   U: file is unmerged (you must complete the merge before it can be\n           committed)\n\n       o   X: "unknown" change type (most probably a bug, please report it)\n\n       Status letters C and R are always followed by a score (denoting the\n       percentage of similarity between the source and target of the move or\n       copy). Status letter M may be followed by a score (denoting the\n       percentage of dissimilarity) for file rewrites.\n\n       <sha1> is shown as all 0\'s if a file is new on the filesystem and it is\n       out of sync with the index.\n\n       Example:\n\n           :100644 100644 5be4a4a 0000000 M file.c\n\n\n       Without the -z option, pathnames with "unusual" characters are quoted\n       as explained for the configuration variable core.quotePath (see git-\n       config(1)). Using -z the filename is output verbatim and the line is\n       terminated by a NUL byte.\n\n### DIFF FORMAT FOR MERGES\n       "git-diff-tree", "git-diff-files" and "git-diff --raw" can take -c or\n       --cc option to generate diff output also for merge commits. The output\n       differs from the format described above in the following way:\n\n        1. there is a colon for each parent\n\n        2. there are more "src" modes and "src" sha1\n\n        3. status is concatenated status characters for each parent\n\n        4. no optional "score" number\n\n        5. tab-separated pathname(s) of the file\n\n       For -c and --cc, only the destination or final path is shown even if\n       the file was renamed on any side of history. With --combined-all-paths,\n       the name of the path in each parent is shown followed by the name of\n       the path in the merge commit.\n\n       Examples for -c and --cc without --combined-all-paths:\n\n           ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c\n           ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       bar.sh\n           ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       phooey.c\n\n\n       Examples when --combined-all-paths added to either -c or --cc:\n\n           ::100644 100644 100644 fabadb8 cc95eb0 4866510 MM       desc.c  desc.c  desc.c\n           ::100755 100755 100755 52b7a2d 6d1ac04 d2ac7d7 RM       foo.sh  bar.sh  bar.sh\n           ::100644 100644 100644 e07d6c5 9042e82 ee91881 RR       fooey.c fuey.c  phooey.c\n\n\n       Note that combined diff lists only files which were modified from all\n       parents.\n\n### GENERATING PATCH TEXT WITH -P\n       Running git-diff(1), git-log(1), git-show(1), git-diff-index(1), git-\n       diff-tree(1), or git-diff-files(1) with the -p option produces patch\n       text. You can customize the creation of patch text via the\n       GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables (see\n       git(1)).\n\n       What the -p option produces is slightly different from the traditional\n       diff format:\n\n        1. It is preceded with a "git diff" header that looks like this:\n\n               diff --git a/file1 b/file2\n\n           The a/ and b/ filenames are the same unless rename/copy is\n           involved. Especially, even for a creation or a deletion, /dev/null\n           is not used in place of the a/ or b/ filenames.\n\n           When rename/copy is involved, file1 and file2 show the name of the\n           source file of the rename/copy and the name of the file that\n           rename/copy produces, respectively.\n\n        2. It is followed by one or more extended header lines:\n\n               old mode <mode>\n               new mode <mode>\n               deleted file mode <mode>\n               new file mode <mode>\n               copy from <path>\n               copy to <path>\n               rename from <path>\n               rename to <path>\n               similarity index <number>\n               dissimilarity index <number>\n               index <hash>..<hash> <mode>\n\n           File modes are printed as 6-digit octal numbers including the file\n           type and file permission bits.\n\n           Path names in extended headers do not include the a/ and b/\n           prefixes.\n\n           The similarity index is the percentage of unchanged lines, and the\n           dissimilarity index is the percentage of changed lines. It is a\n           rounded down integer, followed by a percent sign. The similarity\n           index value of 100% is thus reserved for two equal files, while\n           100% dissimilarity means that no line from the old file made it\n           into the new one.\n\n           The index line includes the blob object names before and after the\n           change. The <mode> is included if the file mode does not change;\n           otherwise, separate lines indicate the old and the new mode.\n\n        3. Pathnames with "unusual" characters are quoted as explained for the\n           configuration variable core.quotePath (see git-config(1)).\n\n        4. All the file1 files in the output refer to files before the commit,\n           and all the file2 files refer to files after the commit. It is\n           incorrect to apply each change to each file sequentially. For\n           example, this patch will swap a and b:\n\n               diff --git a/a b/b\n               rename from a\n               rename to b\n               diff --git a/b b/a\n               rename from b\n               rename to a\n\n### COMBINED DIFF FORMAT\n       Any diff-generating command can take the -c or --cc option to produce a\n       combined diff when showing a merge. This is the default format when\n       showing merges with git-diff(1) or git-show(1). Note also that you can\n       give suitable --diff-merges option to any of these commands to force\n       generation of diffs in specific format.\n\n       A "combined diff" format looks like this:\n\n           diff --combined describe.c\n           index fabadb8,cc95eb0..4866510\n           --- a/describe.c\n           +++ b/describe.c\n           @@@ -98,20 -98,12 +98,20 @@@\n                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n             }\n\n           - static void describe(char *arg)\n            -static void describe(struct commit *cmit, int last_one)\n           ++static void describe(char *arg, int last_one)\n             {\n            +      unsigned char sha1[20];\n            +      struct commit *cmit;\n                   struct commit_list *list;\n                   static int initialized = 0;\n                   struct commit_name *n;\n\n            +      if (get_sha1(arg, sha1) < 0)\n            +              usage(describe_usage);\n            +      cmit = lookup_commit_reference(sha1);\n            +      if (!cmit)\n            +              usage(describe_usage);\n            +\n                   if (!initialized) {\n                           initialized = 1;\n                           for_each_ref(get_name);\n\n\n\n        1. It is preceded with a "git diff" header, that looks like this (when\n           the -c option is used):\n\n               diff --combined file\n\n           or like this (when the --cc option is used):\n\n               diff --cc file\n\n        2. It is followed by one or more extended header lines (this example\n           shows a merge with two parents):\n\n               index <hash>,<hash>..<hash>\n               mode <mode>,<mode>..<mode>\n               new file mode <mode>\n               deleted file mode <mode>,<mode>\n\n           The mode <mode>,<mode>..<mode> line appears only if at least one of\n           the <mode> is different from the rest. Extended headers with\n           information about detected contents movement (renames and copying\n           detection) are designed to work with diff of two <tree-ish> and are\n           not used by combined diff format.\n\n        3. It is followed by two-line from-file/to-file header\n\n               --- a/file\n               +++ b/file\n\n           Similar to two-line header for traditional unified diff format,\n           /dev/null is used to signal created or deleted files.\n\n           However, if the --combined-all-paths option is provided, instead of\n           a two-line from-file/to-file you get a N+1 line from-file/to-file\n           header, where N is the number of parents in the merge commit\n\n               --- a/file\n               --- a/file\n               --- a/file\n               +++ b/file\n\n           This extended format can be useful if rename or copy detection is\n           active, to allow you to see the original name of the file in\n           different parents.\n\n        4. Chunk header format is modified to prevent people from accidentally\n           feeding it to patch -p1. Combined diff format was created for\n           review of merge commit changes, and was not meant to be applied.\n           The change is similar to the change in the extended index header:\n\n               @@@ <from-file-range> <from-file-range> <to-file-range> @@@\n\n           There are (number of parents + 1) @ characters in the chunk header\n           for combined diff format.\n\n       Unlike the traditional unified diff format, which shows two files A and\n       B with a single column that has - (minus -- appears in A but removed in\n       B), + (plus -- missing in A but added to B), or " " (space --\n       unchanged) prefix, this format compares two or more files file1,\n       file2,... with one file X, and shows how X differs from each of fileN.\n       One column for each of fileN is prepended to the output line to note\n       how X\'s line is different from it.\n\n       A - character in the column N means that the line appears in fileN but\n       it does not appear in the result. A + character in the column N means\n       that the line appears in the result, and fileN does not have that line\n       (in other words, the line was added, from the point of view of that\n       parent).\n\n       In the above example output, the function signature was changed from\n       both files (hence two - removals from both file1 and file2, plus ++ to\n       mean one line that was added does not appear in either file1 or file2).\n       Also eight other lines are the same from file1 but do not appear in\n       file2 (hence prefixed with +).\n\n       When shown by git diff-tree -c, it compares the parents of a merge\n       commit with the merge result (i.e. file1..fileN are the parents). When\n       shown by git diff-files -c, it compares the two unresolved merge\n       parents with the working tree file (i.e. file1 is stage 2 aka "our\n       version", file2 is stage 3 aka "their version").\n\n### OTHER DIFF FORMATS\n       The --summary option describes newly added, deleted, renamed and copied\n       files. The --stat option adds diffstat(1) graph to the output. These\n       options can be combined with other options, such as -p, and are meant\n       for human consumption.\n\n       When showing a change that involves a rename or a copy, --stat output\n       formats the pathnames compactly by combining common prefix and suffix\n       of the pathnames. For example, a change that moves arch/i386/Makefile\n       to arch/x86/Makefile while modifying 4 lines will be shown like this:\n\n           arch/{i386 => x86}/Makefile    |   4 +--\n\n\n       The --numstat option gives the diffstat(1) information but is designed\n       for easier machine consumption. An entry in --numstat output looks like\n       this:\n\n           1       2       README\n           3       1       arch/{i386 => x86}/Makefile\n\n\n       That is, from left to right:\n\n        1. the number of added lines;\n\n        2. a tab;\n\n        3. the number of deleted lines;\n\n        4. a tab;\n\n        5. pathname (possibly with rename/copy information);\n\n        6. a newline.\n\n       When -z output option is in effect, the output is formatted this way:\n\n           1       2       README NUL\n           3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL\n\n\n       That is:\n\n        1. the number of added lines;\n\n        2. a tab;\n\n        3. the number of deleted lines;\n\n        4. a tab;\n\n        5. a NUL (only exists if renamed/copied);\n\n        6. pathname in preimage;\n\n        7. a NUL (only exists if renamed/copied);\n\n        8. pathname in postimage (only exists if renamed/copied);\n\n        9. a NUL.\n\n       The extra NUL before the preimage path in renamed case is to allow\n       scripts that read the output to tell if the current record being read\n       is a single-path record or a rename/copy record without reading ahead.\n       After reading added and deleted lines, reading up to NUL would yield\n       the pathname, but if that is NUL, the record will show two paths.\n\n### EXAMPLES\n       Various ways to check your working tree\n\n               $ git diff            (1)\n               $ git diff --cached   (2)\n               $ git diff HEAD       (3)\n\n           1. Changes in the working tree not yet staged for the next commit.\n           2. Changes between the index and your last commit; what you would\n           be committing if you run git commit without -a option.\n           3. Changes in the working tree since your last commit; what you\n           would be committing if you run git commit -a\n\n       Comparing with arbitrary commits\n\n               $ git diff test            (1)\n               $ git diff HEAD -- ./test  (2)\n               $ git diff HEAD^ HEAD      (3)\n\n           1. Instead of using the tip of the current branch, compare with the\n           tip of "test" branch.\n           2. Instead of comparing with the tip of "test" branch, compare with\n           the tip of the current branch, but limit the comparison to the file\n           "test".\n           3. Compare the version before the last commit and the last commit.\n\n       Comparing branches\n\n               $ git diff topic main    (1)\n               $ git diff topic..main   (2)\n               $ git diff topic...main  (3)\n\n           1. Changes between the tips of the topic and the main branches.\n           2. Same as above.\n           3. Changes that occurred on the main branch since when the topic\n           branch was started off it.\n\n       Limiting the diff output\n\n               $ git diff --diff-filter=MRC            (1)\n               $ git diff --name-status                (2)\n               $ git diff arch/i386 include/asm-i386   (3)\n\n           1. Show only modification, rename, and copy, but not addition or\n           deletion.\n           2. Show only names and the nature of change, but not actual diff\n           output.\n           3. Limit diff output to named subtrees.\n\n       Munging the diff output\n\n               $ git diff --find-copies-harder -B -C  (1)\n               $ git diff -R                          (2)\n\n           1. Spend extra cycles to find renames, copies and complete rewrites\n           (very expensive).\n           2. Output diff in reverse.\n\n### SEE ALSO\n       diff(1), git-difftool(1), git-log(1), gitdiffcore(7), git-format-\n       patch(1), git-apply(1), git-show(1)\n')),(0,a.kt)("h2",{id:"grep"},(0,a.kt)("inlineCode",{parentName:"h2"},"grep")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GIT-GREP(1)                       Git Manual                       GIT-GREP(1)\n\n\n\nNAME\n       git-grep - \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u884c\u3092\u8868\u793a\u3059\u308b\n\nSYNOPSIS\n       git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n                  [-v | --invert-match] [-h|-H] [--full-name]\n                  [-E | --extended-regexp] [-G | --basic-regexp]\n                  [-P | --perl-regexp]\n                  [-F | --fixed-strings] [-n | --line-number] [--column]\n                  [-l | --files-with-matches] [-L | --files-without-match]\n                  [(-O | --open-files-in-pager) [<pager>]]\n                  [-z | --null]\n                  [ -o | --only-matching ] [-c | --count] [--all-match] [-q | --quiet]\n                  [--max-depth <depth>] [--[no-]recursive]\n                  [--color[=<when>] | --no-color]\n                  [--break] [--heading] [-p | --show-function]\n                  [-A <post-context>] [-B <pre-context>] [-C <context>]\n                  [-W | --function-context]\n                  [--threads <num>]\n                  [-f <file>] [-e] <pattern>\n                  [--and|--or|--not|(|)|-e <pattern>...]\n                  [--recurse-submodules] [--parent-basename <basename>]\n                  [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | <tree>...]\n                  [--] [<pathspec>...]\n\n\nDESCRIPTION\n       \u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u8ffd\u8de1\u30d5\u30a1\u30a4\u30eb\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30d6\u30ed\u30d6\u3001\n       \u307e\u305f\u306f\u6307\u5b9a\u3055\u308c\u305f\u30c4\u30ea\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d6\u30ed\u30d6\u3067\u6307\u5b9a\u3055\u308c\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u63a2\u3057\u307e\u3059\u3002\n       \u30d1\u30bf\u30fc\u30f3\u306f\u3001\u6539\u884c\u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u305f1\u3064\u4ee5\u4e0a\u306e\u691c\u7d22\u5f0f\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\n       \u691c\u7d22\u5f0f\u3068\u3057\u3066\u306e\u7a7a\u306e\u6587\u5b57\u5217\u306f\u3001\u3059\u3079\u3066\u306e\u884c\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002\n\nCONFIGURATION\n       grep.lineNumber\n           If set to true, enable -n option by default.\n\n       grep.column\n           If set to true, enable the --column option by default.\n\n       grep.patternType\n           Set the default matching behavior. Using a value of basic,\n           extended, fixed, or perl will enable the --basic-regexp,\n           --extended-regexp, --fixed-strings, or --perl-regexp option\n           accordingly, while the value default will return to the default\n           matching behavior.\n\n       grep.extendedRegexp\n           If set to true, enable --extended-regexp option by default. This\n           option is ignored when the grep.patternType option is set to a\n           value other than default.\n\n       grep.threads\n           Number of grep worker threads to use. If unset (or set to 0), Git\n           will use as many threads as the number of logical cores available.\n\n       grep.fullName\n           If set to true, enable --full-name option by default.\n\n       grep.fallbackToNoIndex\n           If set to true, fall back to git grep --no-index if git grep is\n           executed outside of a git repository. Defaults to false.\n\nOPTIONS\n       --cached\n           Instead of searching tracked files in the working tree, search\n           blobs registered in the index file.\n\n       --no-index\n           Search files in the current directory that is not managed by Git.\n\n       --untracked\n           In addition to searching in the tracked files in the working tree,\n           search also in untracked files.\n\n       --no-exclude-standard\n           Also search in ignored files by not honoring the .gitignore\n           mechanism. Only useful with --untracked.\n\n       --exclude-standard\n           Do not pay attention to ignored files specified via the .gitignore\n           mechanism. Only useful when searching files in the current\n           directory with --no-index.\n\n       --recurse-submodules\n           Recursively search in each submodule that is active and checked out\n           in the repository. When used in combination with the <tree> option\n           the prefix of all submodule output will be the name of the parent\n           project's <tree> object. This option has no effect if --no-index is\n           given.\n\n       -a, --text\n           Process binary files as if they were text.\n\n       --textconv\n           Honor textconv filter settings.\n\n       --no-textconv\n           Do not honor textconv filter settings. This is the default.\n\n       -i, --ignore-case\n           Ignore case differences between the patterns and the files.\n\n       -I\n           Don't match the pattern in binary files.\n\n       --max-depth <depth>\n           For each <pathspec> given on command line, descend at most <depth>\n           levels of directories. A value of -1 means no limit. This option is\n           ignored if <pathspec> contains active wildcards. In other words if\n           \"a*\" matches a directory named \"a*\", \"*\" is matched literally so\n           --max-depth is still effective.\n\n       -r, --recursive\n           Same as --max-depth=-1; this is the default.\n\n       --no-recursive\n           Same as --max-depth=0.\n\n       -w, --word-regexp\n           Match the pattern only at word boundary (either begin at the\n           beginning of a line, or preceded by a non-word character; end at\n           the end of a line or followed by a non-word character).\n\n       -v, --invert-match\n           Select non-matching lines.\n\n       -h, -H\n           By default, the command shows the filename for each match.  -h\n           option is used to suppress this output.  -H is there for\n           completeness and does not do anything except it overrides -h given\n           earlier on the command line.\n\n       --full-name\n           When run from a subdirectory, the command usually outputs paths\n           relative to the current directory. This option forces paths to be\n           output relative to the project top directory.\n\n       -E, --extended-regexp, -G, --basic-regexp\n           Use POSIX extended/basic regexp for patterns. Default is to use\n           basic regexp.\n\n       -P, --perl-regexp\n           Use Perl-compatible regular expressions for patterns.\n\n           Support for these types of regular expressions is an optional\n           compile-time dependency. If Git wasn't compiled with support for\n           them providing this option will cause it to die.\n\n       -F, --fixed-strings\n           Use fixed strings for patterns (don't interpret pattern as a\n           regex).\n\n       -n, --line-number\n           Prefix the line number to matching lines.\n\n       --column\n           Prefix the 1-indexed byte-offset of the first match from the start\n           of the matching line.\n\n       -l, --files-with-matches, --name-only, -L, --files-without-match\n           Instead of showing every matched line, show only the names of files\n           that contain (or do not contain) matches. For better compatibility\n           with git diff, --name-only is a synonym for --files-with-matches.\n\n       -O[<pager>], --open-files-in-pager[=<pager>]\n           Open the matching files in the pager (not the output of grep). If\n           the pager happens to be \"less\" or \"vi\", and the user specified only\n           one pattern, the first file is positioned at the first match\n           automatically. The pager argument is optional; if specified, it\n           must be stuck to the option without a space. If pager is\n           unspecified, the default pager will be used (see core.pager in git-\n           config(1)).\n\n       -z, --null\n           Use \\0 as the delimiter for pathnames in the output, and print them\n           verbatim. Without this option, pathnames with \"unusual\" characters\n           are quoted as explained for the configuration variable\n           core.quotePath (see git-config(1)).\n\n       -o, --only-matching\n           Print only the matched (non-empty) parts of a matching line, with\n           each such part on a separate output line.\n\n       -c, --count\n           Instead of showing every matched line, show the number of lines\n           that match.\n\n       --color[=<when>]\n           Show colored matches. The value must be always (the default),\n           never, or auto.\n\n       --no-color\n           Turn off match highlighting, even when the configuration file gives\n           the default to color output. Same as --color=never.\n\n       --break\n           Print an empty line between matches from different files.\n\n       --heading\n           Show the filename above the matches in that file instead of at the\n           start of each shown line.\n\n       -p, --show-function\n           Show the preceding line that contains the function name of the\n           match, unless the matching line is a function name itself. The name\n           is determined in the same way as git diff works out patch hunk\n           headers (see Defining a custom hunk-header in gitattributes(5)).\n\n       -<num>, -C <num>, --context <num>\n           Show <num> leading and trailing lines, and place a line containing\n           -- between contiguous groups of matches.\n\n       -A <num>, --after-context <num>\n           Show <num> trailing lines, and place a line containing -- between\n           contiguous groups of matches.\n\n       -B <num>, --before-context <num>\n           Show <num> leading lines, and place a line containing -- between\n           contiguous groups of matches.\n\n       -W, --function-context\n           Show the surrounding text from the previous line containing a\n           function name up to the one before the next function name,\n           effectively showing the whole function in which the match was\n           found. The function names are determined in the same way as git\n           diff works out patch hunk headers (see Defining a custom\n           hunk-header in gitattributes(5)).\n\n       --threads <num>\n           Number of grep worker threads to use. See grep.threads in\n           CONFIGURATION for more information.\n\n       -f <file>\n           Read patterns from <file>, one per line.\n\n           Passing the pattern via <file> allows for providing a search\n           pattern containing a \\0.\n\n           Not all pattern types support patterns containing \\0. Git will\n           error out if a given pattern type can't support such a pattern. The\n           --perl-regexp pattern type when compiled against the PCRE v2\n           backend has the widest support for these types of patterns.\n\n           In versions of Git before 2.23.0 patterns containing \\0 would be\n           silently considered fixed. This was never documented, there were\n           also odd and undocumented interactions between e.g. non-ASCII\n           patterns containing \\0 and --ignore-case.\n\n           In future versions we may learn to support patterns containing \\0\n           for more search backends, until then we'll die when the pattern\n           type in question doesn't support them.\n\n       -e\n           The next parameter is the pattern. This option has to be used for\n           patterns starting with - and should be used in scripts passing user\n           input to grep. Multiple patterns are combined by or.\n\n       --and, --or, --not, ( ... )\n           Specify how multiple patterns are combined using Boolean\n           expressions.  --or is the default operator.  --and has higher\n           precedence than --or.  -e has to be used for all patterns.\n\n       --all-match\n           When giving multiple pattern expressions combined with --or, this\n           flag is specified to limit the match to files that have lines to\n           match all of them.\n\n       -q, --quiet\n           Do not output matched lines; instead, exit with status 0 when there\n           is a match and with non-zero status when there isn't.\n\n       <tree>...\n           Instead of searching tracked files in the working tree, search\n           blobs in the given trees.\n\n       --\n           Signals the end of options; the rest of the parameters are\n           <pathspec> limiters.\n\n       <pathspec>...\n           If given, limit the search to paths matching at least one pattern.\n           Both leading paths match and glob(7) patterns are supported.\n\n           For more details about the <pathspec> syntax, see the pathspec\n           entry in gitglossary(7).\n\nEXAMPLES\n       git grep 'time_t' -- '*.[ch]'\n           Looks for time_t in all tracked .c and .h files in the working\n           directory and its subdirectories.\n\n       git grep -e '#define' --and \\( -e MAX_PATH -e PATH_MAX \\)\n           Looks for a line that has #define and either MAX_PATH or PATH_MAX.\n\n       git grep --all-match -e NODE -e Unexpected\n           Looks for a line that has NODE or Unexpected in files that have\n           lines that match both.\n\n       git grep solution -- :^Documentation\n           Looks for solution, excluding files in Documentation.\n\nNOTES ON THREADS\n       The --threads option (and the grep.threads configuration) will be\n       ignored when --open-files-in-pager is used, forcing a single-threaded\n       execution.\n\n       When grepping the object store (with --cached or giving tree objects),\n       running with multiple threads might perform slower than single threaded\n       if --textconv is given and there're too many text conversions. So if\n       you experience low performance in this case, it might be desirable to\n       use --threads=1.\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                       GIT-GREP(1)\n")),(0,a.kt)("h2",{id:"log"},(0,a.kt)("inlineCode",{parentName:"h2"},"log")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-LOG(1)                        Git Manual                        GIT-LOG(1)\n\n\n\nNAME\n       git-log - \u30b3\u30df\u30c3\u30c8\u30ed\u30b0\u3092\u8868\u793a\u3059\u308b\n\nSYNOPSIS\n       git log [<options>] [<revision range>] [[--] <path>...]\n\n\nDESCRIPTION\n       \u30b3\u30df\u30c3\u30c8\u30ed\u30b0\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n       \n       \u6307\u5b9a\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u304b\u3089\u89aa\u30ea\u30f3\u30af\u3092\u305f\u3069\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5230\u9054\u53ef\u80fd\u306a\u30b3\u30df\u30c3\u30c8\u3092\u30ea\u30b9\u30c8\u3057\u307e\u3059\u304c\u3001\n       \u524d\u306b ^ \u304c\u4ed8\u3044\u305f\u30b3\u30df\u30c3\u30c8\u304b\u3089\u5230\u9054\u53ef\u80fd\u306a\u30b3\u30df\u30c3\u30c8\u306f\u9664\u5916\u3057\u307e\u3059\u3002\n       \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u51fa\u529b\u306f\u6642\u7cfb\u5217\u306e\u9006\u9806\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \n       \u3053\u308c\u306f\u96c6\u5408\u6f14\u7b97\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n       \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u306e\u3044\u305a\u308c\u304b\u304b\u3089\u5230\u9054\u53ef\u80fd\u306a\u30b3\u30df\u30c3\u30c8\u304c\u30bb\u30c3\u30c8\u3092\u5f62\u6210\u3057\u3001\n       ^ \u304c\u524d\u306b\u4ed8\u3044\u305f\u30b3\u30df\u30c3\u30c8\u306e\u3044\u305a\u308c\u304b\u304b\u3089\u5230\u9054\u53ef\u80fd\u306a\u30b3\u30df\u30c3\u30c8\u304c\u305d\u306e\u30bb\u30c3\u30c8\u304b\u3089\u5dee\u3057\u5f15\u304b\u308c\u307e\u3059\u3002\n       \u6b8b\u308a\u306e\u30b3\u30df\u30c3\u30c8\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306e\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u308b\u3082\u306e\u3067\u3059\u3002\n       \u4ed6\u306e\u3055\u307e\u3056\u307e\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30d1\u30b9\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u7d50\u679c\u3092\u3055\u3089\u306b\u5236\u9650\u3067\u304d\u307e\u3059\u3002\n\n       \u3057\u305f\u304c\u3063\u3066\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\uff1a\n\n           $ git log foo bar ^baz\n\n       \n       \u306f\u300cfoo \u307e\u305f\u306f bar \u304b\u3089\u306f\u5230\u9054\u53ef\u80fd\u3067\u3042\u308b\u304c\u3001baz \u304b\u3089\u306f\u5230\u9054\u3067\u304d\u306a\u3044\u3059\u3079\u3066\u306e\u30b3\u30df\u30c3\u30c8\u3092\u30ea\u30b9\u30c8\u3059\u308b\u300d\n       \u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n       \n       \u300c^ <commit1> <commit2>\u300d\u306e\u7701\u7565\u5f62\u3068\u3057\u3066\u3001\u7279\u5225\u306a\u8868\u8a18\n       \u300c<commit1> .. <commit2>\u300d\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n       \u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u3044\u305a\u308c\u304b\u3092\u540c\u3058\u610f\u5473\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a\n\n           $ git log origin..HEAD\n           $ git log HEAD ^origin\n\n\n       \u3082\u30461\u3064\u306e\u7279\u5225\u306a\u8868\u8a18\u6cd5\u306f\u3001\u30de\u30fc\u30b8\u306b\u5f79\u7acb\u3064\u300c<commit1>\u2026<commit2>\u300d\u3067\u3059\u3002\n       \u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u30b3\u30df\u30c3\u30c8\u306e\u30bb\u30c3\u30c8\u306f\u30012\u3064\u306e\u30aa\u30da\u30e9\u30f3\u30c9\u9593\u306e\u5bfe\u79f0\u5dee\u3067\u3059\u3002\n       \u6b21\u306e2\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306f\u540c\u7b49\u3067\u3059\uff1a\n\n           $ git log A B --not $(git merge-base --all A B)\n           $ git log A...B\n\n\n       \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001git-rev-list(1) \u30b3\u30de\u30f3\u30c9\u306b\u9069\u7528\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u8868\u793a\u5185\u5bb9\u3068\u65b9\u6cd5\u3092\u5236\u5fa1\u3057\u3001\n       git-diff(1) \u30b3\u30de\u30f3\u30c9\u306b\u9069\u7528\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\n       \u5404\u30b3\u30df\u30c3\u30c8\u306b\u3088\u3063\u3066\u5c0e\u5165\u3055\u308c\u308b\u5909\u66f4\u306e\u8868\u793a\u65b9\u6cd5\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\nOPTIONS\n       --follow\n           Continue listing the history of a file beyond renames (works only\n           for a single file).\n\n       --no-decorate, --decorate[=short|full|auto|no]\n           Print out the ref names of any commits that are shown. If short is\n           specified, the ref name prefixes refs/heads/, refs/tags/ and\n           refs/remotes/ will not be printed. If full is specified, the full\n           ref name (including prefix) will be printed. If auto is specified,\n           then if the output is going to a terminal, the ref names are shown\n           as if short were given, otherwise no ref names are shown. The\n           default option is short.\n\n       --decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>\n           If no --decorate-refs is given, pretend as if all refs were\n           included. For each candidate, do not use it for decoration if it\n           matches any patterns given to --decorate-refs-exclude or if it\n           doesn\'t match any of the patterns given to --decorate-refs. The\n           log.excludeDecoration config option allows excluding refs from the\n           decorations, but an explicit --decorate-refs pattern will override\n           a match in log.excludeDecoration.\n\n       --source\n           Print out the ref name given on the command line by which each\n           commit was reached.\n\n       --[no-]mailmap, --[no-]use-mailmap\n           Use mailmap file to map author and committer names and email\n           addresses to canonical real names and email addresses. See git-\n           shortlog(1).\n\n       --full-diff\n           Without this flag, git log -p <path>...  shows commits that touch\n           the specified paths, and diffs about the same specified paths. With\n           this, the full diff is shown for commits that touch the specified\n           paths; this means that "<path>..." limits only commits, and doesn\'t\n           limit diff for those commits.\n\n           Note that this affects all diff-based output types, e.g. those\n           produced by --stat, etc.\n\n       --log-size\n           Include a line "log size <number>" in the output for each commit,\n           where <number> is the length of that commit\'s message in bytes.\n           Intended to speed up tools that read log messages from git log\n           output by allowing them to allocate space in advance.\n\n       -L<start>,<end>:<file>, -L:<funcname>:<file>\n           Trace the evolution of the line range given by <start>,<end>, or by\n           the function name regex <funcname>, within the <file>. You may not\n           give any pathspec limiters. This is currently limited to a walk\n           starting from a single revision, i.e., you may only give zero or\n           one positive revision arguments, and <start> and <end> (or\n           <funcname>) must exist in the starting revision. You can specify\n           this option more than once. Implies --patch. Patch output can be\n           suppressed using --no-patch, but other diff formats (namely --raw,\n           --numstat, --shortstat, --dirstat, --summary, --name-only,\n           --name-status, --check) are not currently implemented.\n\n           <start> and <end> can take one of these forms:\n\n           o   number\n\n               If <start> or <end> is a number, it specifies an absolute line\n               number (lines count from 1).\n\n           o   /regex/\n\n               This form will use the first line matching the given POSIX\n               regex. If <start> is a regex, it will search from the end of\n               the previous -L range, if any, otherwise from the start of\n               file. If <start> is ^/regex/, it will search from the start of\n               file. If <end> is a regex, it will search starting at the line\n               given by <start>.\n\n           o   +offset or -offset\n\n               This is only valid for <end> and will specify a number of lines\n               before or after the line given by <start>.\n\n           If :<funcname> is given in place of <start> and <end>, it is a\n           regular expression that denotes the range from the first funcname\n           line that matches <funcname>, up to the next funcname line.\n           :<funcname> searches from the end of the previous -L range, if any,\n           otherwise from the start of file.  ^:<funcname> searches from the\n           start of file. The function names are determined in the same way as\n           git diff works out patch hunk headers (see Defining a custom\n           hunk-header in gitattributes(5)).\n\n       <revision range>\n           Show only commits in the specified revision range. When no\n           <revision range> is specified, it defaults to HEAD (i.e. the whole\n           history leading to the current commit).  origin..HEAD specifies all\n           the commits reachable from the current commit (i.e.  HEAD), but not\n           from origin. For a complete list of ways to spell <revision range>,\n           see the Specifying Ranges section of gitrevisions(7).\n\n       [--] <path>...\n           Show only commits that are enough to explain how the files that\n           match the specified paths came to be. See History Simplification\n           below for details and other simplification modes.\n\n           Paths may need to be prefixed with -- to separate them from options\n           or the revision range, when confusion arises.\n\n   Commit Limiting\n       Besides specifying a range of commits that should be listed using the\n       special notations explained in the description, additional commit\n       limiting may be applied.\n\n       Using more options generally further limits the output (e.g.\n       --since=<date1> limits to commits newer than <date1>, and using it with\n       --grep=<pattern> further limits to commits whose log message has a line\n       that matches <pattern>), unless otherwise noted.\n\n       Note that these are applied before commit ordering and formatting\n       options, such as --reverse.\n\n       -<number>, -n <number>, --max-count=<number>\n           Limit the number of commits to output.\n\n       --skip=<number>\n           Skip number commits before starting to show the commit output.\n\n       --since=<date>, --after=<date>\n           Show commits more recent than a specific date.\n\n       --until=<date>, --before=<date>\n           Show commits older than a specific date.\n\n       --author=<pattern>, --committer=<pattern>\n           Limit the commits output to ones with author/committer header lines\n           that match the specified pattern (regular expression). With more\n           than one --author=<pattern>, commits whose author matches any of\n           the given patterns are chosen (similarly for multiple\n           --committer=<pattern>).\n\n       --grep-reflog=<pattern>\n           Limit the commits output to ones with reflog entries that match the\n           specified pattern (regular expression). With more than one\n           --grep-reflog, commits whose reflog message matches any of the\n           given patterns are chosen. It is an error to use this option unless\n           --walk-reflogs is in use.\n\n       --grep=<pattern>\n           Limit the commits output to ones with log message that matches the\n           specified pattern (regular expression). With more than one\n           --grep=<pattern>, commits whose message matches any of the given\n           patterns are chosen (but see --all-match).\n\n           When --notes is in effect, the message from the notes is matched as\n           if it were part of the log message.\n\n       --all-match\n           Limit the commits output to ones that match all given --grep,\n           instead of ones that match at least one.\n\n       --invert-grep\n           Limit the commits output to ones with log message that do not match\n           the pattern specified with --grep=<pattern>.\n\n       -i, --regexp-ignore-case\n           Match the regular expression limiting patterns without regard to\n           letter case.\n\n       --basic-regexp\n           Consider the limiting patterns to be basic regular expressions;\n           this is the default.\n\n       -E, --extended-regexp\n           Consider the limiting patterns to be extended regular expressions\n           instead of the default basic regular expressions.\n\n       -F, --fixed-strings\n           Consider the limiting patterns to be fixed strings (don\'t interpret\n           pattern as a regular expression).\n\n       -P, --perl-regexp\n           Consider the limiting patterns to be Perl-compatible regular\n           expressions.\n\n           Support for these types of regular expressions is an optional\n           compile-time dependency. If Git wasn\'t compiled with support for\n           them providing this option will cause it to die.\n\n       --remove-empty\n           Stop when a given path disappears from the tree.\n\n       --merges\n           Print only merge commits. This is exactly the same as\n           --min-parents=2.\n\n       --no-merges\n           Do not print commits with more than one parent. This is exactly the\n           same as --max-parents=1.\n\n       --min-parents=<number>, --max-parents=<number>, --no-min-parents,\n       --no-max-parents\n           Show only commits which have at least (or at most) that many parent\n           commits. In particular, --max-parents=1 is the same as --no-merges,\n           --min-parents=2 is the same as --merges.  --max-parents=0 gives all\n           root commits and --min-parents=3 all octopus merges.\n\n           --no-min-parents and --no-max-parents reset these limits (to no\n           limit) again. Equivalent forms are --min-parents=0 (any commit has\n           0 or more parents) and --max-parents=-1 (negative numbers denote no\n           upper limit).\n\n       --first-parent\n           Follow only the first parent commit upon seeing a merge commit.\n           This option can give a better overview when viewing the evolution\n           of a particular topic branch, because merges into a topic branch\n           tend to be only about adjusting to updated upstream from time to\n           time, and this option allows you to ignore the individual commits\n           brought in to your history by such a merge.\n\n               This option also changes default diff format for merge commits\n               to `first-parent`, see `--diff-merges=first-parent` for details.\n\n       --not\n           Reverses the meaning of the ^ prefix (or lack thereof) for all\n           following revision specifiers, up to the next --not.\n\n       --all\n           Pretend as if all the refs in refs/, along with HEAD, are listed on\n           the command line as <commit>.\n\n       --branches[=<pattern>]\n           Pretend as if all the refs in refs/heads are listed on the command\n           line as <commit>. If <pattern> is given, limit branches to ones\n           matching given shell glob. If pattern lacks ?, *, or [, /* at the\n           end is implied.\n\n       --tags[=<pattern>]\n           Pretend as if all the refs in refs/tags are listed on the command\n           line as <commit>. If <pattern> is given, limit tags to ones\n           matching given shell glob. If pattern lacks ?, *, or [, /* at the\n           end is implied.\n\n       --remotes[=<pattern>]\n           Pretend as if all the refs in refs/remotes are listed on the\n           command line as <commit>. If <pattern> is given, limit\n           remote-tracking branches to ones matching given shell glob. If\n           pattern lacks ?, *, or [, /* at the end is implied.\n\n       --glob=<glob-pattern>\n           Pretend as if all the refs matching shell glob <glob-pattern> are\n           listed on the command line as <commit>. Leading refs/, is\n           automatically prepended if missing. If pattern lacks ?, *, or [, /*\n           at the end is implied.\n\n       --exclude=<glob-pattern>\n           Do not include refs matching <glob-pattern> that the next --all,\n           --branches, --tags, --remotes, or --glob would otherwise consider.\n           Repetitions of this option accumulate exclusion patterns up to the\n           next --all, --branches, --tags, --remotes, or --glob option (other\n           options or arguments do not clear accumulated patterns).\n\n           The patterns given should not begin with refs/heads, refs/tags, or\n           refs/remotes when applied to --branches, --tags, or --remotes,\n           respectively, and they must begin with refs/ when applied to --glob\n           or --all. If a trailing /* is intended, it must be given\n           explicitly.\n\n       --reflog\n           Pretend as if all objects mentioned by reflogs are listed on the\n           command line as <commit>.\n\n       --alternate-refs\n           Pretend as if all objects mentioned as ref tips of alternate\n           repositories were listed on the command line. An alternate\n           repository is any repository whose object directory is specified in\n           objects/info/alternates. The set of included objects may be\n           modified by core.alternateRefsCommand, etc. See git-config(1).\n\n       --single-worktree\n           By default, all working trees will be examined by the following\n           options when there are more than one (see git-worktree(1)): --all,\n           --reflog and --indexed-objects. This option forces them to examine\n           the current working tree only.\n\n       --ignore-missing\n           Upon seeing an invalid object name in the input, pretend as if the\n           bad input was not given.\n\n       --bisect\n           Pretend as if the bad bisection ref refs/bisect/bad was listed and\n           as if it was followed by --not and the good bisection refs\n           refs/bisect/good-* on the command line.\n\n       --stdin\n           In addition to the <commit> listed on the command line, read them\n           from the standard input. If a -- separator is seen, stop reading\n           commits and start reading paths to limit the result.\n\n       --cherry-mark\n           Like --cherry-pick (see below) but mark equivalent commits with =\n           rather than omitting them, and inequivalent ones with +.\n\n       --cherry-pick\n           Omit any commit that introduces the same change as another commit\n           on the "other side" when the set of commits are limited with\n           symmetric difference.\n\n           For example, if you have two branches, A and B, a usual way to list\n           all commits on only one side of them is with --left-right (see the\n           example below in the description of the --left-right option).\n           However, it shows the commits that were cherry-picked from the\n           other branch (for example, "3rd on b" may be cherry-picked from\n           branch A). With this option, such pairs of commits are excluded\n           from the output.\n\n       --left-only, --right-only\n           List only commits on the respective side of a symmetric difference,\n           i.e. only those which would be marked < resp.  > by --left-right.\n\n           For example, --cherry-pick --right-only A...B omits those commits\n           from B which are in A or are patch-equivalent to a commit in A. In\n           other words, this lists the + commits from git cherry A B. More\n           precisely, --cherry-pick --right-only --no-merges gives the exact\n           list.\n\n       --cherry\n           A synonym for --right-only --cherry-mark --no-merges; useful to\n           limit the output to the commits on our side and mark those that\n           have been applied to the other side of a forked history with git\n           log --cherry upstream...mybranch, similar to git cherry upstream\n           mybranch.\n\n       -g, --walk-reflogs\n           Instead of walking the commit ancestry chain, walk reflog entries\n           from the most recent one to older ones. When this option is used\n           you cannot specify commits to exclude (that is, ^commit,\n           commit1..commit2, and commit1...commit2 notations cannot be used).\n\n           With --pretty format other than oneline and reference (for obvious\n           reasons), this causes the output to have two extra lines of\n           information taken from the reflog. The reflog designator in the\n           output may be shown as ref@{Nth} (where Nth is the\n           reverse-chronological index in the reflog) or as ref@{timestamp}\n           (with the timestamp for that entry), depending on a few rules:\n\n            1. If the starting point is specified as ref@{Nth}, show the index\n               format.\n\n            2. If the starting point was specified as ref@{now}, show the\n               timestamp format.\n\n            3. If neither was used, but --date was given on the command line,\n               show the timestamp in the format requested by --date.\n\n            4. Otherwise, show the index format.\n\n           Under --pretty=oneline, the commit message is prefixed with this\n           information on the same line. This option cannot be combined with\n           --reverse. See also git-reflog(1).\n\n           Under --pretty=reference, this information will not be shown at\n           all.\n\n       --merge\n           After a failed merge, show refs that touch files having a conflict\n           and don\'t exist on all heads to merge.\n\n       --boundary\n           Output excluded boundary commits. Boundary commits are prefixed\n           with -.\n\n   History Simplification\n       Sometimes you are only interested in parts of the history, for example\n       the commits modifying a particular <path>. But there are two parts of\n       History Simplification, one part is selecting the commits and the other\n       is how to do it, as there are various strategies to simplify the\n       history.\n\n       The following options select the commits to be shown:\n\n       <paths>\n           Commits modifying the given <paths> are selected.\n\n       --simplify-by-decoration\n           Commits that are referred by some branch or tag are selected.\n\n       Note that extra commits can be shown to give a meaningful history.\n\n       The following options affect the way the simplification is performed:\n\n       Default mode\n           Simplifies the history to the simplest history explaining the final\n           state of the tree. Simplest because it prunes some side branches if\n           the end result is the same (i.e. merging branches with the same\n           content)\n\n       --show-pulls\n           Include all commits from the default mode, but also any merge\n           commits that are not TREESAME to the first parent but are TREESAME\n           to a later parent. This mode is helpful for showing the merge\n           commits that "first introduced" a change to a branch.\n\n       --full-history\n           Same as the default mode, but does not prune some history.\n\n       --dense\n           Only the selected commits are shown, plus some to have a meaningful\n           history.\n\n       --sparse\n           All commits in the simplified history are shown.\n\n       --simplify-merges\n           Additional option to --full-history to remove some needless merges\n           from the resulting history, as there are no selected commits\n           contributing to this merge.\n\n       --ancestry-path\n           When given a range of commits to display (e.g.  commit1..commit2 or\n           commit2 ^commit1), only display commits that exist directly on the\n           ancestry chain between the commit1 and commit2, i.e. commits that\n           are both descendants of commit1, and ancestors of commit2.\n\n       A more detailed explanation follows.\n\n       Suppose you specified foo as the <paths>. We shall call commits that\n       modify foo !TREESAME, and the rest TREESAME. (In a diff filtered for\n       foo, they look different and equal, respectively.)\n\n       In the following, we will always refer to the same example history to\n       illustrate the differences between simplification settings. We assume\n       that you are filtering for a file foo in this commit graph:\n\n                     .-A---M---N---O---P---Q\n                    /     /   /   /   /   /\n                   I     B   C   D   E   Y\n                    \\   /   /   /   /   /\n                     `-------------\'   X\n\n\n       The horizontal line of history A---Q is taken to be the first parent of\n       each merge. The commits are:\n\n       o   I is the initial commit, in which foo exists with contents "asdf",\n           and a file quux exists with contents "quux". Initial commits are\n           compared to an empty tree, so I is !TREESAME.\n\n       o   In A, foo contains just "foo".\n\n       o   B contains the same change as A. Its merge M is trivial and hence\n           TREESAME to all parents.\n\n       o   C does not change foo, but its merge N changes it to "foobar", so\n           it is not TREESAME to any parent.\n\n       o   D sets foo to "baz". Its merge O combines the strings from N and D\n           to "foobarbaz"; i.e., it is not TREESAME to any parent.\n\n       o   E changes quux to "xyzzy", and its merge P combines the strings to\n           "quux xyzzy".  P is TREESAME to O, but not to E.\n\n       o   X is an independent root commit that added a new file side, and Y\n           modified it.  Y is TREESAME to X. Its merge Q added side to P, and\n           Q is TREESAME to P, but not to Y.\n\n       rev-list walks backwards through history, including or excluding\n       commits based on whether --full-history and/or parent rewriting (via\n       --parents or --children) are used. The following settings are\n       available.\n\n       Default mode\n           Commits are included if they are not TREESAME to any parent (though\n           this can be changed, see --sparse below). If the commit was a\n           merge, and it was TREESAME to one parent, follow only that parent.\n           (Even if there are several TREESAME parents, follow only one of\n           them.) Otherwise, follow all parents.\n\n           This results in:\n\n                         .-A---N---O\n                        /     /   /\n                       I---------D\n\n           Note how the rule to only follow the TREESAME parent, if one is\n           available, removed B from consideration entirely.  C was considered\n           via N, but is TREESAME. Root commits are compared to an empty tree,\n           so I is !TREESAME.\n\n           Parent/child relations are only visible with --parents, but that\n           does not affect the commits selected in default mode, so we have\n           shown the parent lines.\n\n       --full-history without parent rewriting\n           This mode differs from the default in one point: always follow all\n           parents of a merge, even if it is TREESAME to one of them. Even if\n           more than one side of the merge has commits that are included, this\n           does not imply that the merge itself is! In the example, we get\n\n                       I  A  B  N  D  O  P  Q\n\n           M was excluded because it is TREESAME to both parents.  E, C and B\n           were all walked, but only B was !TREESAME, so the others do not\n           appear.\n\n           Note that without parent rewriting, it is not really possible to\n           talk about the parent/child relationships between the commits, so\n           we show them disconnected.\n\n       --full-history with parent rewriting\n           Ordinary commits are only included if they are !TREESAME (though\n           this can be changed, see --sparse below).\n\n           Merges are always included. However, their parent list is\n           rewritten: Along each parent, prune away commits that are not\n           included themselves. This results in\n\n                         .-A---M---N---O---P---Q\n                        /     /   /   /   /\n                       I     B   /   D   /\n                        \\   /   /   /   /\n                         `-------------\'\n\n           Compare to --full-history without rewriting above. Note that E was\n           pruned away because it is TREESAME, but the parent list of P was\n           rewritten to contain E\'s parent I. The same happened for C and N,\n           and X, Y and Q.\n\n       In addition to the above settings, you can change whether TREESAME\n       affects inclusion:\n\n       --dense\n           Commits that are walked are included if they are not TREESAME to\n           any parent.\n\n       --sparse\n           All commits that are walked are included.\n\n           Note that without --full-history, this still simplifies merges: if\n           one of the parents is TREESAME, we follow only that one, so the\n           other sides of the merge are never walked.\n\n       --simplify-merges\n           First, build a history graph in the same way that --full-history\n           with parent rewriting does (see above).\n\n           Then simplify each commit C to its replacement C\' in the final\n           history according to the following rules:\n\n           o   Set C\' to C.\n\n           o   Replace each parent P of C\' with its simplification P\'. In the\n               process, drop parents that are ancestors of other parents or\n               that are root commits TREESAME to an empty tree, and remove\n               duplicates, but take care to never drop all parents that we are\n               TREESAME to.\n\n           o   If after this parent rewriting, C\' is a root or merge commit\n               (has zero or >1 parents), a boundary commit, or !TREESAME, it\n               remains. Otherwise, it is replaced with its only parent.\n\n           The effect of this is best shown by way of comparing to\n           --full-history with parent rewriting. The example turns into:\n\n                         .-A---M---N---O\n                        /     /       /\n                       I     B       D\n                        \\   /       /\n                         `---------\'\n\n           Note the major differences in N, P, and Q over --full-history:\n\n           o   N\'s parent list had I removed, because it is an ancestor of the\n               other parent M. Still, N remained because it is !TREESAME.\n\n           o   P\'s parent list similarly had I removed.  P was then removed\n               completely, because it had one parent and is TREESAME.\n\n           o   Q\'s parent list had Y simplified to X.  X was then removed,\n               because it was a TREESAME root.  Q was then removed completely,\n               because it had one parent and is TREESAME.\n\n       There is another simplification mode available:\n\n       --ancestry-path\n           Limit the displayed commits to those directly on the ancestry chain\n           between the "from" and "to" commits in the given commit range. I.e.\n           only display commits that are ancestor of the "to" commit and\n           descendants of the "from" commit.\n\n           As an example use case, consider the following commit history:\n\n                           D---E-------F\n                          /     \\       \\\n                         B---C---G---H---I---J\n                        /                     \\\n                       A-------K---------------L--M\n\n           A regular D..M computes the set of commits that are ancestors of M,\n           but excludes the ones that are ancestors of D. This is useful to\n           see what happened to the history leading to M since D, in the sense\n           that "what does M have that did not exist in D". The result in this\n           example would be all the commits, except A and B (and D itself, of\n           course).\n\n           When we want to find out what commits in M are contaminated with\n           the bug introduced by D and need fixing, however, we might want to\n           view only the subset of D..M that are actually descendants of D,\n           i.e. excluding C and K. This is exactly what the --ancestry-path\n           option does. Applied to the D..M range, it results in:\n\n                               E-------F\n                                \\       \\\n                                 G---H---I---J\n                                              \\\n                                               L--M\n\n\n       Before discussing another option, --show-pulls, we need to create a new\n       example history.\n\n       A common problem users face when looking at simplified history is that\n       a commit they know changed a file somehow does not appear in the file\'s\n       simplified history. Let\'s demonstrate a new example and show how\n       options such as --full-history and --simplify-merges works in that\n       case:\n\n                     .-A---M-----C--N---O---P\n                    /     / \\  \\  \\/   /   /\n                   I     B   \\  R-\'`-Z\'   /\n                    \\   /     \\/         /\n                     \\ /      /\\        /\n                      `---X--\'  `---Y--\'\n\n\n       For this example, suppose I created file.txt which was modified by A,\n       B, and X in different ways. The single-parent commits C, Z, and Y do\n       not change file.txt. The merge commit M was created by resolving the\n       merge conflict to include both changes from A and B and hence is not\n       TREESAME to either. The merge commit R, however, was created by\n       ignoring the contents of file.txt at M and taking only the contents of\n       file.txt at X. Hence, R is TREESAME to X but not M. Finally, the\n       natural merge resolution to create N is to take the contents of\n       file.txt at R, so N is TREESAME to R but not C. The merge commits O and\n       P are TREESAME to their first parents, but not to their second parents,\n       Z and Y respectively.\n\n       When using the default mode, N and R both have a TREESAME parent, so\n       those edges are walked and the others are ignored. The resulting\n       history graph is:\n\n                   I---X\n\n\n       When using --full-history, Git walks every edge. This will discover the\n       commits A and B and the merge M, but also will reveal the merge commits\n       O and P. With parent rewriting, the resulting graph is:\n\n                     .-A---M--------N---O---P\n                    /     / \\  \\  \\/   /   /\n                   I     B   \\  R-\'`--\'   /\n                    \\   /     \\/         /\n                     \\ /      /\\        /\n                      `---X--\'  `------\'\n\n\n       Here, the merge commits O and P contribute extra noise, as they did not\n       actually contribute a change to file.txt. They only merged a topic that\n       was based on an older version of file.txt. This is a common issue in\n       repositories using a workflow where many contributors work in parallel\n       and merge their topic branches along a single trunk: manu unrelated\n       merges appear in the --full-history results.\n\n       When using the --simplify-merges option, the commits O and P disappear\n       from the results. This is because the rewritten second parents of O and\n       P are reachable from their first parents. Those edges are removed and\n       then the commits look like single-parent commits that are TREESAME to\n       their parent. This also happens to the commit N, resulting in a history\n       view as follows:\n\n                     .-A---M--.\n                    /     /    \\\n                   I     B      R\n                    \\   /      /\n                     \\ /      /\n                      `---X--\'\n\n\n       In this view, we see all of the important single-parent changes from A,\n       B, and X. We also see the carefully-resolved merge M and the\n       not-so-carefully-resolved merge R. This is usually enough information\n       to determine why the commits A and B "disappeared" from history in the\n       default view. However, there are a few issues with this approach.\n\n       The first issue is performance. Unlike any previous option, the\n       --simplify-merges option requires walking the entire commit history\n       before returning a single result. This can make the option difficult to\n       use for very large repositories.\n\n       The second issue is one of auditing. When many contributors are working\n       on the same repository, it is important which merge commits introduced\n       a change into an important branch. The problematic merge R above is not\n       likely to be the merge commit that was used to merge into an important\n       branch. Instead, the merge N was used to merge R and X into the\n       important branch. This commit may have information about why the change\n       X came to override the changes from A and B in its commit message.\n\n       --show-pulls\n           In addition to the commits shown in the default history, show each\n           merge commit that is not TREESAME to its first parent but is\n           TREESAME to a later parent.\n\n           When a merge commit is included by --show-pulls, the merge is\n           treated as if it "pulled" the change from another branch. When\n           using --show-pulls on this example (and no other options) the\n           resulting graph is:\n\n                       I---X---R---N\n\n           Here, the merge commits R and N are included because they pulled\n           the commits X and R into the base branch, respectively. These\n           merges are the reason the commits A and B do not appear in the\n           default history.\n\n           When --show-pulls is paired with --simplify-merges, the graph\n           includes all of the necessary information:\n\n                         .-A---M--.   N\n                        /     /    \\ /\n                       I     B      R\n                        \\   /      /\n                         \\ /      /\n                          `---X--\'\n\n           Notice that since M is reachable from R, the edge from N to M was\n           simplified away. However, N still appears in the history as an\n           important commit because it "pulled" the change R into the main\n           branch.\n\n       The --simplify-by-decoration option allows you to view only the big\n       picture of the topology of the history, by omitting commits that are\n       not referenced by tags. Commits are marked as !TREESAME (in other\n       words, kept after history simplification rules described above) if (1)\n       they are referenced by tags, or (2) they change the contents of the\n       paths given on the command line. All other commits are marked as\n       TREESAME (subject to be simplified away).\n\n   Commit Ordering\n       By default, the commits are shown in reverse chronological order.\n\n       --date-order\n           Show no parents before all of its children are shown, but otherwise\n           show commits in the commit timestamp order.\n\n       --author-date-order\n           Show no parents before all of its children are shown, but otherwise\n           show commits in the author timestamp order.\n\n       --topo-order\n           Show no parents before all of its children are shown, and avoid\n           showing commits on multiple lines of history intermixed.\n\n           For example, in a commit history like this:\n\n                   ---1----2----4----7\n                       \\              \\\n                        3----5----6----8---\n\n           where the numbers denote the order of commit timestamps, git\n           rev-list and friends with --date-order show the commits in the\n           timestamp order: 8 7 6 5 4 3 2 1.\n\n           With --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n           3 1); some older commits are shown before newer ones in order to\n           avoid showing the commits from two parallel development track mixed\n           together.\n\n       --reverse\n           Output the commits chosen to be shown (see Commit Limiting section\n           above) in reverse order. Cannot be combined with --walk-reflogs.\n\n   Object Traversal\n       These options are mostly targeted for packing of Git repositories.\n\n       --no-walk[=(sorted|unsorted)]\n           Only show the given commits, but do not traverse their ancestors.\n           This has no effect if a range is specified. If the argument\n           unsorted is given, the commits are shown in the order they were\n           given on the command line. Otherwise (if sorted or no argument was\n           given), the commits are shown in reverse chronological order by\n           commit time. Cannot be combined with --graph.\n\n       --do-walk\n           Overrides a previous --no-walk.\n\n   Commit Formatting\n       --pretty[=<format>], --format=<format>\n           Pretty-print the contents of the commit logs in a given format,\n           where <format> can be one of oneline, short, medium, full, fuller,\n           reference, email, raw, format:<string> and tformat:<string>. When\n           <format> is none of the above, and has %placeholder in it, it acts\n           as if --pretty=tformat:<format> were given.\n\n           See the "PRETTY FORMATS" section for some additional details for\n           each format. When =<format> part is omitted, it defaults to medium.\n\n           Note: you can specify the default pretty format in the repository\n           configuration (see git-config(1)).\n\n       --abbrev-commit\n           Instead of showing the full 40-byte hexadecimal commit object name,\n           show a prefix that names the object uniquely. "--abbrev=<n>" (which\n           also modifies diff output, if it is displayed) option can be used\n           to specify the minimum length of the prefix.\n\n           This should make "--pretty=oneline" a whole lot more readable for\n           people using 80-column terminals.\n\n       --no-abbrev-commit\n           Show the full 40-byte hexadecimal commit object name. This negates\n           --abbrev-commit, either explicit or implied by other options such\n           as "--oneline". It also overrides the log.abbrevCommit variable.\n\n       --oneline\n           This is a shorthand for "--pretty=oneline --abbrev-commit" used\n           together.\n\n       --encoding=<encoding>\n           The commit objects record the encoding used for the log message in\n           their encoding header; this option can be used to tell the command\n           to re-code the commit log message in the encoding preferred by the\n           user. For non plumbing commands this defaults to UTF-8. Note that\n           if an object claims to be encoded in X and we are outputting in X,\n           we will output the object verbatim; this means that invalid\n           sequences in the original commit may be copied to the output.\n\n       --expand-tabs=<n>, --expand-tabs, --no-expand-tabs\n           Perform a tab expansion (replace each tab with enough spaces to\n           fill to the next display column that is multiple of <n>) in the log\n           message before showing it in the output.  --expand-tabs is a\n           short-hand for --expand-tabs=8, and --no-expand-tabs is a\n           short-hand for --expand-tabs=0, which disables tab expansion.\n\n           By default, tabs are expanded in pretty formats that indent the log\n           message by 4 spaces (i.e.  medium, which is the default, full, and\n           fuller).\n\n       --notes[=<ref>]\n           Show the notes (see git-notes(1)) that annotate the commit, when\n           showing the commit log message. This is the default for git log,\n           git show and git whatchanged commands when there is no --pretty,\n           --format, or --oneline option given on the command line.\n\n           By default, the notes shown are from the notes refs listed in the\n           core.notesRef and notes.displayRef variables (or corresponding\n           environment overrides). See git-config(1) for more details.\n\n           With an optional <ref> argument, use the ref to find the notes to\n           display. The ref can specify the full refname when it begins with\n           refs/notes/; when it begins with notes/, refs/ and otherwise\n           refs/notes/ is prefixed to form a full name of the ref.\n\n           Multiple --notes options can be combined to control which notes are\n           being displayed. Examples: "--notes=foo" will show only notes from\n           "refs/notes/foo"; "--notes=foo --notes" will show both notes from\n           "refs/notes/foo" and from the default notes ref(s).\n\n       --no-notes\n           Do not show notes. This negates the above --notes option, by\n           resetting the list of notes refs from which notes are shown.\n           Options are parsed in the order given on the command line, so e.g.\n           "--notes --notes=foo --no-notes --notes=bar" will only show notes\n           from "refs/notes/bar".\n\n       --show-notes[=<ref>], --[no-]standard-notes\n           These options are deprecated. Use the above --notes/--no-notes\n           options instead.\n\n       --show-signature\n           Check the validity of a signed commit object by passing the\n           signature to gpg --verify and show the output.\n\n       --relative-date\n           Synonym for --date=relative.\n\n       --date=<format>\n           Only takes effect for dates shown in human-readable format, such as\n           when using --pretty.  log.date config variable sets a default value\n           for the log command\'s --date option. By default, dates are shown in\n           the original time zone (either committer\'s or author\'s). If -local\n           is appended to the format (e.g., iso-local), the user\'s local time\n           zone is used instead.\n\n           --date=relative shows dates relative to the current time, e.g. "2\n           hours ago". The -local option has no effect for --date=relative.\n\n           --date=local is an alias for --date=default-local.\n\n           --date=iso (or --date=iso8601) shows timestamps in a ISO 8601-like\n           format. The differences to the strict ISO 8601 format are:\n\n           o   a space instead of the T date/time delimiter\n\n           o   a space between time and time zone\n\n           o   no colon between hours and minutes of the time zone\n\n           --date=iso-strict (or --date=iso8601-strict) shows timestamps in\n           strict ISO 8601 format.\n\n           --date=rfc (or --date=rfc2822) shows timestamps in RFC 2822 format,\n           often found in email messages.\n\n           --date=short shows only the date, but not the time, in YYYY-MM-DD\n           format.\n\n           --date=raw shows the date as seconds since the epoch (1970-01-01\n           00:00:00 UTC), followed by a space, and then the timezone as an\n           offset from UTC (a + or - with four digits; the first two are\n           hours, and the second two are minutes). I.e., as if the timestamp\n           were formatted with strftime("%s %z")). Note that the -local option\n           does not affect the seconds-since-epoch value (which is always\n           measured in UTC), but does switch the accompanying timezone value.\n\n           --date=human shows the timezone if the timezone does not match the\n           current time-zone, and doesn\'t print the whole date if that matches\n           (ie skip printing year for dates that are "this year", but also\n           skip the whole date itself if it\'s in the last few days and we can\n           just say what weekday it was). For older dates the hour and minute\n           is also omitted.\n\n           --date=unix shows the date as a Unix epoch timestamp (seconds since\n           1970). As with --raw, this is always in UTC and therefore -local\n           has no effect.\n\n           --date=format:...  feeds the format ...  to your system strftime,\n           except for %z and %Z, which are handled internally. Use\n           --date=format:%c to show the date in your system locale\'s preferred\n           format. See the strftime manual for a complete list of format\n           placeholders. When using -local, the correct syntax is\n           --date=format-local:....\n\n           --date=default is the default format, and is similar to\n           --date=rfc2822, with a few exceptions:\n\n           o   there is no comma after the day-of-week\n\n           o   the time zone is omitted when the local time zone is used\n\n       --parents\n           Print also the parents of the commit (in the form "commit\n           parent..."). Also enables parent rewriting, see History\n           Simplification above.\n\n       --children\n           Print also the children of the commit (in the form "commit\n           child..."). Also enables parent rewriting, see History\n           Simplification above.\n\n       --left-right\n           Mark which side of a symmetric difference a commit is reachable\n           from. Commits from the left side are prefixed with < and those from\n           the right with >. If combined with --boundary, those commits are\n           prefixed with -.\n\n           For example, if you have this topology:\n\n                            y---b---b  branch B\n                           / \\ /\n                          /   .\n                         /   / \\\n                        o---x---a---a  branch A\n\n           you would get an output like this:\n\n                       $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n                       >bbbbbbb... 3rd on b\n                       >bbbbbbb... 2nd on b\n                       <aaaaaaa... 3rd on a\n                       <aaaaaaa... 2nd on a\n                       -yyyyyyy... 1st on b\n                       -xxxxxxx... 1st on a\n\n\n       --graph\n           Draw a text-based graphical representation of the commit history on\n           the left hand side of the output. This may cause extra lines to be\n           printed in between commits, in order for the graph history to be\n           drawn properly. Cannot be combined with --no-walk.\n\n           This enables parent rewriting, see History Simplification above.\n\n           This implies the --topo-order option by default, but the\n           --date-order option may also be specified.\n\n       --show-linear-break[=<barrier>]\n           When --graph is not used, all history branches are flattened which\n           can make it hard to see that the two consecutive commits do not\n           belong to a linear branch. This option puts a barrier in between\n           them in that case. If <barrier> is specified, it is the string that\n           will be shown instead of the default one.\n\nPRETTY FORMATS\n       If the commit is a merge, and if the pretty-format is not oneline,\n       email or raw, an additional line is inserted before the Author: line.\n       This line begins with "Merge: " and the hashes of ancestral commits are\n       printed, separated by spaces. Note that the listed commits may not\n       necessarily be the list of the direct parent commits if you have\n       limited your view of history: for example, if you are only interested\n       in changes related to a certain directory or file.\n\n       There are several built-in formats, and you can define additional\n       formats by setting a pretty.<name> config option to either another\n       format name, or a format: string, as described below (see git-\n       config(1)). Here are the details of the built-in formats:\n\n       o   oneline\n\n               <hash> <title line>\n\n           This is designed to be as compact as possible.\n\n       o   short\n\n               commit <hash>\n               Author: <author>\n\n               <title line>\n\n       o   medium\n\n               commit <hash>\n               Author: <author>\n               Date:   <author date>\n\n               <title line>\n\n               <full commit message>\n\n       o   full\n\n               commit <hash>\n               Author: <author>\n               Commit: <committer>\n\n               <title line>\n\n               <full commit message>\n\n       o   fuller\n\n               commit <hash>\n               Author:     <author>\n               AuthorDate: <author date>\n               Commit:     <committer>\n               CommitDate: <committer date>\n\n               <title line>\n\n               <full commit message>\n\n       o   reference\n\n               <abbrev hash> (<title line>, <short author date>)\n\n           This format is used to refer to another commit in a commit message\n           and is the same as --pretty=\'format:%C(auto)%h (%s, %ad)\'. By\n           default, the date is formatted with --date=short unless another\n           --date option is explicitly specified. As with any format: with\n           format placeholders, its output is not affected by other options\n           like --decorate and --walk-reflogs.\n\n       o   email\n\n               From <hash> <date>\n               From: <author>\n               Date: <author date>\n               Subject: [PATCH] <title line>\n\n               <full commit message>\n\n       o   mboxrd\n\n           Like email, but lines in the commit message starting with "From "\n           (preceded by zero or more ">") are quoted with ">" so they aren\'t\n           confused as starting a new commit.\n\n       o   raw\n\n           The raw format shows the entire commit exactly as stored in the\n           commit object. Notably, the hashes are displayed in full,\n           regardless of whether --abbrev or --no-abbrev are used, and parents\n           information show the true parent commits, without taking grafts or\n           history simplification into account. Note that this format affects\n           the way commits are displayed, but not the way the diff is shown\n           e.g. with git log --raw. To get full object names in a raw diff\n           format, use --no-abbrev.\n\n       o   format:<string>\n\n           The format:<string> format allows you to specify which information\n           you want to show. It works a little bit like printf format, with\n           the notable exception that you get a newline with %n instead of \\n.\n\n           E.g, format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\n           would show something like this:\n\n               The author of fe6e0ee was Junio C Hamano, 23 hours ago\n               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<\n\n           The placeholders are:\n\n           o   Placeholders that expand to a single literal character:\n\n               %n\n                   newline\n\n               %%\n                   a raw %\n\n               %x00\n                   print a byte from a hex code\n\n           o   Placeholders that affect formatting of later placeholders:\n\n               %Cred\n                   switch color to red\n\n               %Cgreen\n                   switch color to green\n\n               %Cblue\n                   switch color to blue\n\n               %Creset\n                   reset color\n\n               %C(...)\n                   color specification, as described under Values in the\n                   "CONFIGURATION FILE" section of git-config(1). By default,\n                   colors are shown only when enabled for log output (by\n                   color.diff, color.ui, or --color, and respecting the auto\n                   settings of the former if we are going to a terminal).\n                   %C(auto,...)  is accepted as a historical synonym for the\n                   default (e.g., %C(auto,red)). Specifying %C(always,...)\n                   will show the colors even when color is not otherwise\n                   enabled (though consider just using --color=always to\n                   enable color for the whole output, including this format\n                   and anything else git might color).  auto alone (i.e.\n                   %C(auto)) will turn on auto coloring on the next\n                   placeholders until the color is switched again.\n\n               %m\n                   left (<), right (>) or boundary (-) mark\n\n               %w([<w>[,<i1>[,<i2>]]])\n                   switch line wrapping, like the -w option of git-\n                   shortlog(1).\n\n               %<(<N>[,trunc|ltrunc|mtrunc])\n                   make the next placeholder take at least N columns, padding\n                   spaces on the right if necessary. Optionally truncate at\n                   the beginning (ltrunc), the middle (mtrunc) or the end\n                   (trunc) if the output is longer than N columns. Note that\n                   truncating only works correctly with N >= 2.\n\n               %<|(<N>)\n                   make the next placeholder take at least until Nth columns,\n                   padding spaces on the right if necessary\n\n               %>(<N>), %>|(<N>)\n                   similar to %<(<N>), %<|(<N>) respectively, but padding\n                   spaces on the left\n\n               %>>(<N>), %>>|(<N>)\n                   similar to %>(<N>), %>|(<N>) respectively, except that if\n                   the next placeholder takes more spaces than given and there\n                   are spaces on its left, use those spaces\n\n               %><(<N>), %><|(<N>)\n                   similar to %<(<N>), %<|(<N>) respectively, but padding both\n                   sides (i.e. the text is centered)\n\n           o   Placeholders that expand to information extracted from the\n               commit:\n\n               %H\n                   commit hash\n\n               %h\n                   abbreviated commit hash\n\n               %T\n                   tree hash\n\n               %t\n                   abbreviated tree hash\n\n               %P\n                   parent hashes\n\n               %p\n                   abbreviated parent hashes\n\n               %an\n                   author name\n\n               %aN\n                   author name (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %ae\n                   author email\n\n               %aE\n                   author email (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %al\n                   author email local-part (the part before the @ sign)\n\n               %aL\n                   author local-part (see %al) respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %ad\n                   author date (format respects --date= option)\n\n               %aD\n                   author date, RFC2822 style\n\n               %ar\n                   author date, relative\n\n               %at\n                   author date, UNIX timestamp\n\n               %ai\n                   author date, ISO 8601-like format\n\n               %aI\n                   author date, strict ISO 8601 format\n\n               %as\n                   author date, short format (YYYY-MM-DD)\n\n               %cn\n                   committer name\n\n               %cN\n                   committer name (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %ce\n                   committer email\n\n               %cE\n                   committer email (respecting .mailmap, see git-shortlog(1)\n                   or git-blame(1))\n\n               %cl\n                   committer email local-part (the part before the @ sign)\n\n               %cL\n                   committer local-part (see %cl) respecting .mailmap, see\n                   git-shortlog(1) or git-blame(1))\n\n               %cd\n                   committer date (format respects --date= option)\n\n               %cD\n                   committer date, RFC2822 style\n\n               %cr\n                   committer date, relative\n\n               %ct\n                   committer date, UNIX timestamp\n\n               %ci\n                   committer date, ISO 8601-like format\n\n               %cI\n                   committer date, strict ISO 8601 format\n\n               %cs\n                   committer date, short format (YYYY-MM-DD)\n\n               %d\n                   ref names, like the --decorate option of git-log(1)\n\n               %D\n                   ref names without the " (", ")" wrapping.\n\n               %S\n                   ref name given on the command line by which the commit was\n                   reached (like git log --source), only works with git log\n\n               %e\n                   encoding\n\n               %s\n                   subject\n\n               %f\n                   sanitized subject line, suitable for a filename\n\n               %b\n                   body\n\n               %B\n                   raw body (unwrapped subject and body)\n\n               %N\n                   commit notes\n\n               %GG\n                   raw verification message from GPG for a signed commit\n\n               %G?\n                   show "G" for a good (valid) signature, "B" for a bad\n                   signature, "U" for a good signature with unknown validity,\n                   "X" for a good signature that has expired, "Y" for a good\n                   signature made by an expired key, "R" for a good signature\n                   made by a revoked key, "E" if the signature cannot be\n                   checked (e.g. missing key) and "N" for no signature\n\n               %GS\n                   show the name of the signer for a signed commit\n\n               %GK\n                   show the key used to sign a signed commit\n\n               %GF\n                   show the fingerprint of the key used to sign a signed\n                   commit\n\n               %GP\n                   show the fingerprint of the primary key whose subkey was\n                   used to sign a signed commit\n\n               %GT\n                   show the trust level for the key used to sign a signed\n                   commit\n\n               %gD\n                   reflog selector, e.g., refs/stash@{1} or refs/stash@{2\n                   minutes ago}; the format follows the rules described for\n                   the -g option. The portion before the @ is the refname as\n                   given on the command line (so git log -g refs/heads/main\n                   would yield refs/heads/main@{0}).\n\n               %gd\n                   shortened reflog selector; same as %gD, but the refname\n                   portion is shortened for human readability (so\n                   refs/heads/main becomes just main).\n\n               %gn\n                   reflog identity name\n\n               %gN\n                   reflog identity name (respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %ge\n                   reflog identity email\n\n               %gE\n                   reflog identity email (respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %gs\n                   reflog subject\n\n               %(trailers[:options])\n                   display the trailers of the body as interpreted by git-\n                   interpret-trailers(1). The trailers string may be followed\n                   by a colon and zero or more comma-separated options. If any\n                   option is provided multiple times the last occurance wins.\n\n                   The boolean options accept an optional value [=<BOOL>]. The\n                   values true, false, on, off etc. are all accepted. See the\n                   "boolean" sub-section in "EXAMPLES" in git-config(1). If a\n                   boolean option is given with no value, it\'s enabled.\n\n                   o   key=<K>: only show trailers with specified key.\n                       Matching is done case-insensitively and trailing colon\n                       is optional. If option is given multiple times trailer\n                       lines matching any of the keys are shown. This option\n                       automatically enables the only option so that\n                       non-trailer lines in the trailer block are hidden. If\n                       that is not desired it can be disabled with only=false.\n                       E.g., %(trailers:key=Reviewed-by) shows trailer lines\n                       with key Reviewed-by.\n\n                   o   only[=<BOOL>]: select whether non-trailer lines from\n                       the trailer block should be included.\n\n                   o   separator=<SEP>: specify a separator inserted between\n                       trailer lines. When this option is not given each\n                       trailer line is terminated with a line feed character.\n                       The string SEP may contain the literal formatting codes\n                       described above. To use comma as separator one must use\n                       %x2C as it would otherwise be parsed as next option.\n                       E.g., %(trailers:key=Ticket,separator=%x2C ) shows all\n                       trailer lines whose key is "Ticket" separated by a\n                       comma and a space.\n\n                   o   unfold[=<BOOL>]: make it behave as if\n                       interpret-trailer\'s --unfold option was given. E.g.,\n                       %(trailers:only,unfold=true) unfolds and shows all\n                       trailer lines.\n\n                   o   keyonly[=<BOOL>]: only show the key part of the\n                       trailer.\n\n                   o   valueonly[=<BOOL>]: only show the value part of the\n                       trailer.\n\n                   o   key_value_separator=<SEP>: specify a separator inserted\n                       between trailer lines. When this option is not given\n                       each trailer key-value pair is separated by ": ".\n                       Otherwise it shares the same semantics as\n                       separator=<SEP> above.\n\n           Note\n           Some placeholders may depend on other options given to the revision\n           traversal engine. For example, the %g* reflog options will insert\n           an empty string unless we are traversing reflog entries (e.g., by\n           git log -g). The %d and %D placeholders will use the "short"\n           decoration format if --decorate was not already provided on the\n           command line.\n\n       If you add a + (plus sign) after % of a placeholder, a line-feed is\n       inserted immediately before the expansion if and only if the\n       placeholder expands to a non-empty string.\n\n       If you add a - (minus sign) after % of a placeholder, all consecutive\n       line-feeds immediately preceding the expansion are deleted if and only\n       if the placeholder expands to an empty string.\n\n       If you add a ` ` (space) after % of a placeholder, a space is inserted\n       immediately before the expansion if and only if the placeholder expands\n       to a non-empty string.\n\n       o   tformat:\n\n           The tformat: format works exactly like format:, except that it\n           provides "terminator" semantics instead of "separator" semantics.\n           In other words, each commit has the message terminator character\n           (usually a newline) appended, rather than a separator placed\n           between entries. This means that the final entry of a single-line\n           format will be properly terminated with a new line, just as the\n           "oneline" format does. For example:\n\n               $ git log -2 --pretty=format:%h 4da45bef \\\n                 | perl -pe \'$_ .= " -- NO NEWLINE\\n" unless /\\n/\'\n               4da45be\n               7134973 -- NO NEWLINE\n\n               $ git log -2 --pretty=tformat:%h 4da45bef \\\n                 | perl -pe \'$_ .= " -- NO NEWLINE\\n" unless /\\n/\'\n               4da45be\n               7134973\n\n           In addition, any unrecognized string that has a % in it is\n           interpreted as if it has tformat: in front of it. For example,\n           these two are equivalent:\n\n               $ git log -2 --pretty=tformat:%h 4da45bef\n               $ git log -2 --pretty=%h 4da45bef\n\n\nDIFF FORMATTING\n       By default, git log does not generate any diff output. The options\n       below can be used to show the changes made by each commit.\n\n       Note that unless one of --diff-merges variants (including short -m, -c,\n       and --cc options) is explicitly given, merge commits will not show a\n       diff, even if a diff format like --patch is selected, nor will they\n       match search options like -S. The exception is when --first-parent is\n       in use, in which case first-parent is the default format.\n\n       -p, -u, --patch\n           Generate patch (see section on generating patches).\n\n       -s, --no-patch\n           Suppress diff output. Useful for commands like git show that show\n           the patch by default, or to cancel the effect of --patch.\n\n       --diff-merges=(off|none|first-parent|1|separate|m|combined|c|dense-combined|cc),\n       --no-diff-merges\n           Specify diff format to be used for merge commits. Default is off\n           unless --first-parent is in use, in which case first-parent is the\n           default.\n\n           --diff-merges=(off|none), --no-diff-merges\n               Disable output of diffs for merge commits. Useful to override\n               implied value.\n\n           --diff-merges=first-parent, --diff-merges=1\n               This option makes merge commits show the full diff with respect\n               to the first parent only.\n\n           --diff-merges=separate, --diff-merges=m, -m\n               This makes merge commits show the full diff with respect to\n               each of the parents. Separate log entry and diff is generated\n               for each parent.  -m doesn\'t produce any output without -p.\n\n           --diff-merges=combined, --diff-merges=c, -c\n               With this option, diff output for a merge commit shows the\n               differences from each of the parents to the merge result\n               simultaneously instead of showing pairwise diff between a\n               parent and the result one at a time. Furthermore, it lists only\n               files which were modified from all parents.  -c implies -p.\n\n           --diff-merges=dense-combined, --diff-merges=cc, --cc\n               With this option the output produced by --diff-merges=combined\n               is further compressed by omitting uninteresting hunks whose\n               contents in the parents have only two variants and the merge\n               result picks one of them without modification.  --cc implies\n               -p.\n\n       --combined-all-paths\n           This flag causes combined diffs (used for merge commits) to list\n           the name of the file from all parents. It thus only has effect when\n           --diff-merges=[dense-]combined is in use, and is likely only useful\n           if filename changes are detected (i.e. when either rename or copy\n           detection have been requested).\n\n       -U<n>, --unified=<n>\n           Generate diffs with <n> lines of context instead of the usual\n           three. Implies --patch.\n\n       --output=<file>\n           Output to a specific file instead of stdout.\n\n       --output-indicator-new=<char>, --output-indicator-old=<char>,\n       --output-indicator-context=<char>\n           Specify the character used to indicate new, old or context lines in\n           the generated patch. Normally they are +, - and \' \' respectively.\n\n       --raw\n           For each commit, show a summary of changes using the raw diff\n           format. See the "RAW OUTPUT FORMAT" section of git-diff(1). This is\n           different from showing the log itself in raw format, which you can\n           achieve with --format=raw.\n\n       --patch-with-raw\n           Synonym for -p --raw.\n\n       -t\n           Show the tree objects in the diff output.\n\n       --indent-heuristic\n           Enable the heuristic that shifts diff hunk boundaries to make\n           patches easier to read. This is the default.\n\n       --no-indent-heuristic\n           Disable the indent heuristic.\n\n       --minimal\n           Spend extra time to make sure the smallest possible diff is\n           produced.\n\n       --patience\n           Generate a diff using the "patience diff" algorithm.\n\n       --histogram\n           Generate a diff using the "histogram diff" algorithm.\n\n       --anchored=<text>\n           Generate a diff using the "anchored diff" algorithm.\n\n           This option may be specified more than once.\n\n           If a line exists in both the source and destination, exists only\n           once, and starts with this text, this algorithm attempts to prevent\n           it from appearing as a deletion or addition in the output. It uses\n           the "patience diff" algorithm internally.\n\n       --diff-algorithm={patience|minimal|histogram|myers}\n           Choose a diff algorithm. The variants are as follows:\n\n           default, myers\n               The basic greedy diff algorithm. Currently, this is the\n               default.\n\n           minimal\n               Spend extra time to make sure the smallest possible diff is\n               produced.\n\n           patience\n               Use "patience diff" algorithm when generating patches.\n\n           histogram\n               This algorithm extends the patience algorithm to "support\n               low-occurrence common elements".\n\n           For instance, if you configured the diff.algorithm variable to a\n           non-default value and want to use the default one, then you have to\n           use --diff-algorithm=default option.\n\n       --stat[=<width>[,<name-width>[,<count>]]]\n           Generate a diffstat. By default, as much space as necessary will be\n           used for the filename part, and the rest for the graph part.\n           Maximum width defaults to terminal width, or 80 columns if not\n           connected to a terminal, and can be overridden by <width>. The\n           width of the filename part can be limited by giving another width\n           <name-width> after a comma. The width of the graph part can be\n           limited by using --stat-graph-width=<width> (affects all commands\n           generating a stat graph) or by setting diff.statGraphWidth=<width>\n           (does not affect git format-patch). By giving a third parameter\n           <count>, you can limit the output to the first <count> lines,\n           followed by ...  if there are more.\n\n           These parameters can also be set individually with\n           --stat-width=<width>, --stat-name-width=<name-width> and\n           --stat-count=<count>.\n\n       --compact-summary\n           Output a condensed summary of extended header information such as\n           file creations or deletions ("new" or "gone", optionally "+l" if\n           it\'s a symlink) and mode changes ("+x" or "-x" for adding or\n           removing executable bit respectively) in diffstat. The information\n           is put between the filename part and the graph part. Implies\n           --stat.\n\n       --numstat\n           Similar to --stat, but shows number of added and deleted lines in\n           decimal notation and pathname without abbreviation, to make it more\n           machine friendly. For binary files, outputs two - instead of saying\n           0 0.\n\n       --shortstat\n           Output only the last line of the --stat format containing total\n           number of modified files, as well as number of added and deleted\n           lines.\n\n       -X[<param1,param2,...>], --dirstat[=<param1,param2,...>]\n           Output the distribution of relative amount of changes for each\n           sub-directory. The behavior of --dirstat can be customized by\n           passing it a comma separated list of parameters. The defaults are\n           controlled by the diff.dirstat configuration variable (see git-\n           config(1)). The following parameters are available:\n\n           changes\n               Compute the dirstat numbers by counting the lines that have\n               been removed from the source, or added to the destination. This\n               ignores the amount of pure code movements within a file. In\n               other words, rearranging lines in a file is not counted as much\n               as other changes. This is the default behavior when no\n               parameter is given.\n\n           lines\n               Compute the dirstat numbers by doing the regular line-based\n               diff analysis, and summing the removed/added line counts. (For\n               binary files, count 64-byte chunks instead, since binary files\n               have no natural concept of lines). This is a more expensive\n               --dirstat behavior than the changes behavior, but it does count\n               rearranged lines within a file as much as other changes. The\n               resulting output is consistent with what you get from the other\n               --*stat options.\n\n           files\n               Compute the dirstat numbers by counting the number of files\n               changed. Each changed file counts equally in the dirstat\n               analysis. This is the computationally cheapest --dirstat\n               behavior, since it does not have to look at the file contents\n               at all.\n\n           cumulative\n               Count changes in a child directory for the parent directory as\n               well. Note that when using cumulative, the sum of the\n               percentages reported may exceed 100%. The default\n               (non-cumulative) behavior can be specified with the\n               noncumulative parameter.\n\n           <limit>\n               An integer parameter specifies a cut-off percent (3% by\n               default). Directories contributing less than this percentage of\n               the changes are not shown in the output.\n\n           Example: The following will count changed files, while ignoring\n           directories with less than 10% of the total amount of changed\n           files, and accumulating child directory counts in the parent\n           directories: --dirstat=files,10,cumulative.\n\n       --cumulative\n           Synonym for --dirstat=cumulative\n\n       --dirstat-by-file[=<param1,param2>...]\n           Synonym for --dirstat=files,param1,param2...\n\n       --summary\n           Output a condensed summary of extended header information such as\n           creations, renames and mode changes.\n\n       --patch-with-stat\n           Synonym for -p --stat.\n\n       -z\n           Separate the commits with NULs instead of with new newlines.\n\n           Also, when --raw or --numstat has been given, do not munge\n           pathnames and use NULs as output field terminators.\n\n           Without this option, pathnames with "unusual" characters are quoted\n           as explained for the configuration variable core.quotePath (see\n           git-config(1)).\n\n       --name-only\n           Show only names of changed files.\n\n       --name-status\n           Show only names and status of changed files. See the description of\n           the --diff-filter option on what the status letters mean.\n\n       --submodule[=<format>]\n           Specify how differences in submodules are shown. When specifying\n           --submodule=short the short format is used. This format just shows\n           the names of the commits at the beginning and end of the range.\n           When --submodule or --submodule=log is specified, the log format is\n           used. This format lists the commits in the range like git-\n           submodule(1) summary does. When --submodule=diff is specified, the\n           diff format is used. This format shows an inline diff of the\n           changes in the submodule contents between the commit range.\n           Defaults to diff.submodule or the short format if the config option\n           is unset.\n\n       --color[=<when>]\n           Show colored diff.  --color (i.e. without =<when>) is the same as\n           --color=always.  <when> can be one of always, never, or auto.\n\n       --no-color\n           Turn off colored diff. It is the same as --color=never.\n\n       --color-moved[=<mode>]\n           Moved lines of code are colored differently. The <mode> defaults to\n           no if the option is not given and to zebra if the option with no\n           mode is given. The mode must be one of:\n\n           no\n               Moved lines are not highlighted.\n\n           default\n               Is a synonym for zebra. This may change to a more sensible mode\n               in the future.\n\n           plain\n               Any line that is added in one location and was removed in\n               another location will be colored with color.diff.newMoved.\n               Similarly color.diff.oldMoved will be used for removed lines\n               that are added somewhere else in the diff. This mode picks up\n               any moved line, but it is not very useful in a review to\n               determine if a block of code was moved without permutation.\n\n           blocks\n               Blocks of moved text of at least 20 alphanumeric characters are\n               detected greedily. The detected blocks are painted using either\n               the color.diff.{old,new}Moved color. Adjacent blocks cannot be\n               told apart.\n\n           zebra\n               Blocks of moved text are detected as in blocks mode. The blocks\n               are painted using either the color.diff.{old,new}Moved color or\n               color.diff.{old,new}MovedAlternative. The change between the\n               two colors indicates that a new block was detected.\n\n           dimmed-zebra\n               Similar to zebra, but additional dimming of uninteresting parts\n               of moved code is performed. The bordering lines of two adjacent\n               blocks are considered interesting, the rest is uninteresting.\n               dimmed_zebra is a deprecated synonym.\n\n       --no-color-moved\n           Turn off move detection. This can be used to override configuration\n           settings. It is the same as --color-moved=no.\n\n       --color-moved-ws=<modes>\n           This configures how whitespace is ignored when performing the move\n           detection for --color-moved. These modes can be given as a comma\n           separated list:\n\n           no\n               Do not ignore whitespace when performing move detection.\n\n           ignore-space-at-eol\n               Ignore changes in whitespace at EOL.\n\n           ignore-space-change\n               Ignore changes in amount of whitespace. This ignores whitespace\n               at line end, and considers all other sequences of one or more\n               whitespace characters to be equivalent.\n\n           ignore-all-space\n               Ignore whitespace when comparing lines. This ignores\n               differences even if one line has whitespace where the other\n               line has none.\n\n           allow-indentation-change\n               Initially ignore any whitespace in the move detection, then\n               group the moved code blocks only into a block if the change in\n               whitespace is the same per line. This is incompatible with the\n               other modes.\n\n       --no-color-moved-ws\n           Do not ignore whitespace when performing move detection. This can\n           be used to override configuration settings. It is the same as\n           --color-moved-ws=no.\n\n       --word-diff[=<mode>]\n           Show a word diff, using the <mode> to delimit changed words. By\n           default, words are delimited by whitespace; see --word-diff-regex\n           below. The <mode> defaults to plain, and must be one of:\n\n           color\n               Highlight changed words using only colors. Implies --color.\n\n           plain\n               Show words as [-removed-] and {+added+}. Makes no attempts to\n               escape the delimiters if they appear in the input, so the\n               output may be ambiguous.\n\n           porcelain\n               Use a special line-based format intended for script\n               consumption. Added/removed/unchanged runs are printed in the\n               usual unified diff format, starting with a +/-/` ` character at\n               the beginning of the line and extending to the end of the line.\n               Newlines in the input are represented by a tilde ~ on a line of\n               its own.\n\n           none\n               Disable word diff again.\n\n           Note that despite the name of the first mode, color is used to\n           highlight the changed parts in all modes if enabled.\n\n       --word-diff-regex=<regex>\n           Use <regex> to decide what a word is, instead of considering runs\n           of non-whitespace to be a word. Also implies --word-diff unless it\n           was already enabled.\n\n           Every non-overlapping match of the <regex> is considered a word.\n           Anything between these matches is considered whitespace and\n           ignored(!) for the purposes of finding differences. You may want to\n           append |[^[:space:]] to your regular expression to make sure that\n           it matches all non-whitespace characters. A match that contains a\n           newline is silently truncated(!) at the newline.\n\n           For example, --word-diff-regex=.  will treat each character as a\n           word and, correspondingly, show differences character by character.\n\n           The regex can also be set via a diff driver or configuration\n           option, see gitattributes(5) or git-config(1). Giving it explicitly\n           overrides any diff driver or configuration setting. Diff drivers\n           override configuration settings.\n\n       --color-words[=<regex>]\n           Equivalent to --word-diff=color plus (if a regex was specified)\n           --word-diff-regex=<regex>.\n\n       --no-renames\n           Turn off rename detection, even when the configuration file gives\n           the default to do so.\n\n       --[no-]rename-empty\n           Whether to use empty blobs as rename source.\n\n       --check\n           Warn if changes introduce conflict markers or whitespace errors.\n           What are considered whitespace errors is controlled by\n           core.whitespace configuration. By default, trailing whitespaces\n           (including lines that consist solely of whitespaces) and a space\n           character that is immediately followed by a tab character inside\n           the initial indent of the line are considered whitespace errors.\n           Exits with non-zero status if problems are found. Not compatible\n           with --exit-code.\n\n       --ws-error-highlight=<kind>\n           Highlight whitespace errors in the context, old or new lines of the\n           diff. Multiple values are separated by comma, none resets previous\n           values, default reset the list to new and all is a shorthand for\n           old,new,context. When this option is not given, and the\n           configuration variable diff.wsErrorHighlight is not set, only\n           whitespace errors in new lines are highlighted. The whitespace\n           errors are colored with color.diff.whitespace.\n\n       --full-index\n           Instead of the first handful of characters, show the full pre- and\n           post-image blob object names on the "index" line when generating\n           patch format output.\n\n       --binary\n           In addition to --full-index, output a binary diff that can be\n           applied with git-apply. Implies --patch.\n\n       --abbrev[=<n>]\n           Instead of showing the full 40-byte hexadecimal object name in\n           diff-raw format output and diff-tree header lines, show the\n           shortest prefix that is at least <n> hexdigits long that uniquely\n           refers the object. In diff-patch output format, --full-index takes\n           higher precedence, i.e. if --full-index is specified, full blob\n           names will be shown regardless of --abbrev. Non default number of\n           digits can be specified with --abbrev=<n>.\n\n       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]\n           Break complete rewrite changes into pairs of delete and create.\n           This serves two purposes:\n\n           It affects the way a change that amounts to a total rewrite of a\n           file not as a series of deletion and insertion mixed together with\n           a very few lines that happen to match textually as the context, but\n           as a single deletion of everything old followed by a single\n           insertion of everything new, and the number m controls this aspect\n           of the -B option (defaults to 60%).  -B/70% specifies that less\n           than 30% of the original should remain in the result for Git to\n           consider it a total rewrite (i.e. otherwise the resulting patch\n           will be a series of deletion and insertion mixed together with\n           context lines).\n\n           When used with -M, a totally-rewritten file is also considered as\n           the source of a rename (usually -M only considers a file that\n           disappeared as the source of a rename), and the number n controls\n           this aspect of the -B option (defaults to 50%).  -B20% specifies\n           that a change with addition and deletion compared to 20% or more of\n           the file\'s size are eligible for being picked up as a possible\n           source of a rename to another file.\n\n       -M[<n>], --find-renames[=<n>]\n           If generating diffs, detect and report renames for each commit. For\n           following files across renames while traversing history, see\n           --follow. If n is specified, it is a threshold on the similarity\n           index (i.e. amount of addition/deletions compared to the file\'s\n           size). For example, -M90% means Git should consider a delete/add\n           pair to be a rename if more than 90% of the file hasn\'t changed.\n           Without a % sign, the number is to be read as a fraction, with a\n           decimal point before it. I.e., -M5 becomes 0.5, and is thus the\n           same as -M50%. Similarly, -M05 is the same as -M5%. To limit\n           detection to exact renames, use -M100%. The default similarity\n           index is 50%.\n\n       -C[<n>], --find-copies[=<n>]\n           Detect copies as well as renames. See also --find-copies-harder. If\n           n is specified, it has the same meaning as for -M<n>.\n\n       --find-copies-harder\n           For performance reasons, by default, -C option finds copies only if\n           the original file of the copy was modified in the same changeset.\n           This flag makes the command inspect unmodified files as candidates\n           for the source of copy. This is a very expensive operation for\n           large projects, so use it with caution. Giving more than one -C\n           option has the same effect.\n\n       -D, --irreversible-delete\n           Omit the preimage for deletes, i.e. print only the header but not\n           the diff between the preimage and /dev/null. The resulting patch is\n           not meant to be applied with patch or git apply; this is solely for\n           people who want to just concentrate on reviewing the text after the\n           change. In addition, the output obviously lacks enough information\n           to apply such a patch in reverse, even manually, hence the name of\n           the option.\n\n           When used together with -B, omit also the preimage in the deletion\n           part of a delete/create pair.\n\n       -l<num>\n           The -M and -C options require O(n^2) processing time where n is the\n           number of potential rename/copy targets. This option prevents\n           rename/copy detection from running if the number of rename/copy\n           targets exceeds the specified number.\n\n       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]\n           Select only files that are Added (A), Copied (C), Deleted (D),\n           Modified (M), Renamed (R), have their type (i.e. regular file,\n           symlink, submodule, ...) changed (T), are Unmerged (U), are Unknown\n           (X), or have had their pairing Broken (B). Any combination of the\n           filter characters (including none) can be used. When *\n           (All-or-none) is added to the combination, all paths are selected\n           if there is any file that matches other criteria in the comparison;\n           if there is no file that matches other criteria, nothing is\n           selected.\n\n           Also, these upper-case letters can be downcased to exclude. E.g.\n           --diff-filter=ad excludes added and deleted paths.\n\n           Note that not all diffs can feature all types. For instance, diffs\n           from the index to the working tree can never have Added entries\n           (because the set of paths included in the diff is limited by what\n           is in the index). Similarly, copied and renamed entries cannot\n           appear if detection for those types is disabled.\n\n       -S<string>\n           Look for differences that change the number of occurrences of the\n           specified string (i.e. addition/deletion) in a file. Intended for\n           the scripter\'s use.\n\n           It is useful when you\'re looking for an exact block of code (like a\n           struct), and want to know the history of that block since it first\n           came into being: use the feature iteratively to feed the\n           interesting block in the preimage back into -S, and keep going\n           until you get the very first version of the block.\n\n           Binary files are searched as well.\n\n       -G<regex>\n           Look for differences whose patch text contains added/removed lines\n           that match <regex>.\n\n           To illustrate the difference between -S<regex> --pickaxe-regex and\n           -G<regex>, consider a commit with the following diff in the same\n           file:\n\n               +    return frotz(nitfol, two->ptr, 1, 0);\n               ...\n               -    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n           While git log -G"frotz\\(nitfol" will show this commit, git log\n           -S"frotz\\(nitfol" --pickaxe-regex will not (because the number of\n           occurrences of that string did not change).\n\n           Unless --text is supplied patches of binary files without a\n           textconv filter will be ignored.\n\n           See the pickaxe entry in gitdiffcore(7) for more information.\n\n       --find-object=<object-id>\n           Look for differences that change the number of occurrences of the\n           specified object. Similar to -S, just the argument is different in\n           that it doesn\'t search for a specific string but for a specific\n           object id.\n\n           The object can be a blob or a submodule commit. It implies the -t\n           option in git-log to also find trees.\n\n       --pickaxe-all\n           When -S or -G finds a change, show all the changes in that\n           changeset, not just the files that contain the change in <string>.\n\n       --pickaxe-regex\n           Treat the <string> given to -S as an extended POSIX regular\n           expression to match.\n\n       -O<orderfile>\n           Control the order in which files appear in the output. This\n           overrides the diff.orderFile configuration variable (see git-\n           config(1)). To cancel diff.orderFile, use -O/dev/null.\n\n           The output order is determined by the order of glob patterns in\n           <orderfile>. All files with pathnames that match the first pattern\n           are output first, all files with pathnames that match the second\n           pattern (but not the first) are output next, and so on. All files\n           with pathnames that do not match any pattern are output last, as if\n           there was an implicit match-all pattern at the end of the file. If\n           multiple pathnames have the same rank (they match the same pattern\n           but no earlier patterns), their output order relative to each other\n           is the normal order.\n\n           <orderfile> is parsed as follows:\n\n           o   Blank lines are ignored, so they can be used as separators for\n               readability.\n\n           o   Lines starting with a hash ("#") are ignored, so they can be\n               used for comments. Add a backslash ("\\") to the beginning of\n               the pattern if it starts with a hash.\n\n           o   Each other line contains a single pattern.\n\n           Patterns have the same syntax and semantics as patterns used for\n           fnmatch(3) without the FNM_PATHNAME flag, except a pathname also\n           matches a pattern if removing any number of the final pathname\n           components matches the pattern. For example, the pattern "foo*bar"\n           matches "fooasdfbar" and "foo/bar/baz/asdf" but not "foobarx".\n\n       -R\n           Swap two inputs; that is, show differences from index or on-disk\n           file to tree contents.\n\n       --relative[=<path>], --no-relative\n           When run from a subdirectory of the project, it can be told to\n           exclude changes outside the directory and show pathnames relative\n           to it with this option. When you are not in a subdirectory (e.g. in\n           a bare repository), you can name which subdirectory to make the\n           output relative to by giving a <path> as an argument.\n           --no-relative can be used to countermand both diff.relative config\n           option and previous --relative.\n\n       -a, --text\n           Treat all files as text.\n\n       --ignore-cr-at-eol\n           Ignore carriage-return at the end of line when doing a comparison.\n\n       --ignore-space-at-eol\n           Ignore changes in whitespace at EOL.\n\n       -b, --ignore-space-change\n           Ignore changes in amount of whitespace. This ignores whitespace at\n           line end, and considers all other sequences of one or more\n           whitespace characters to be equivalent.\n\n       -w, --ignore-all-space\n           Ignore whitespace when comparing lines. This ignores differences\n           even if one line has whitespace where the other line has none.\n\n       --ignore-blank-lines\n           Ignore changes whose lines are all blank.\n\n       -I<regex>, --ignore-matching-lines=<regex>\n           Ignore changes whose all lines match <regex>. This option may be\n           specified more than once.\n\n       --inter-hunk-context=<lines>\n           Show the context between diff hunks, up to the specified number of\n           lines, thereby fusing hunks that are close to each other. Defaults\n           to diff.interHunkContext or 0 if the config option is unset.\n\n       -W, --function-context\n           Show whole function as context lines for each change. The function\n           names are determined in the same way as git diff works out patch\n           hunk headers (see Defining a custom hunk-header in\n           gitattributes(5)).\n\n       --ext-diff\n           Allow an external diff helper to be executed. If you set an\n           external diff driver with gitattributes(5), you need to use this\n           option with git-log(1) and friends.\n\n       --no-ext-diff\n           Disallow external diff drivers.\n\n       --textconv, --no-textconv\n           Allow (or disallow) external text conversion filters to be run when\n           comparing binary files. See gitattributes(5) for details. Because\n           textconv filters are typically a one-way conversion, the resulting\n           diff is suitable for human consumption, but cannot be applied. For\n           this reason, textconv filters are enabled by default only for git-\n           diff(1) and git-log(1), but not for git-format-patch(1) or diff\n           plumbing commands.\n\n       --ignore-submodules[=<when>]\n           Ignore changes to submodules in the diff generation. <when> can be\n           either "none", "untracked", "dirty" or "all", which is the default.\n           Using "none" will consider the submodule modified when it either\n           contains untracked or modified files or its HEAD differs from the\n           commit recorded in the superproject and can be used to override any\n           settings of the ignore option in git-config(1) or gitmodules(5).\n           When "untracked" is used submodules are not considered dirty when\n           they only contain untracked content (but they are still scanned for\n           modified content). Using "dirty" ignores all changes to the work\n           tree of submodules, only changes to the commits stored in the\n           superproject are shown (this was the behavior until 1.7.0). Using\n           "all" hides all changes to submodules.\n\n       --src-prefix=<prefix>\n           Show the given source prefix instead of "a/".\n\n       --dst-prefix=<prefix>\n           Show the given destination prefix instead of "b/".\n\n       --no-prefix\n           Do not show any source or destination prefix.\n\n       --line-prefix=<prefix>\n           Prepend an additional prefix to every line of output.\n\n       --ita-invisible-in-index\n           By default entries added by "git add -N" appear as an existing\n           empty file in "git diff" and a new file in "git diff --cached".\n           This option makes the entry appear as a new file in "git diff" and\n           non-existent in "git diff --cached". This option could be reverted\n           with --ita-visible-in-index. Both options are experimental and\n           could be removed in future.\n\n       For more detailed explanation on these common options, see also\n       gitdiffcore(7).\n\nGENERATING PATCH TEXT WITH -P\n       Running git-diff(1), git-log(1), git-show(1), git-diff-index(1), git-\n       diff-tree(1), or git-diff-files(1) with the -p option produces patch\n       text. You can customize the creation of patch text via the\n       GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables (see\n       git(1)).\n\n       What the -p option produces is slightly different from the traditional\n       diff format:\n\n        1. It is preceded with a "git diff" header that looks like this:\n\n               diff --git a/file1 b/file2\n\n           The a/ and b/ filenames are the same unless rename/copy is\n           involved. Especially, even for a creation or a deletion, /dev/null\n           is not used in place of the a/ or b/ filenames.\n\n           When rename/copy is involved, file1 and file2 show the name of the\n           source file of the rename/copy and the name of the file that\n           rename/copy produces, respectively.\n\n        2. It is followed by one or more extended header lines:\n\n               old mode <mode>\n               new mode <mode>\n               deleted file mode <mode>\n               new file mode <mode>\n               copy from <path>\n               copy to <path>\n               rename from <path>\n               rename to <path>\n               similarity index <number>\n               dissimilarity index <number>\n               index <hash>..<hash> <mode>\n\n           File modes are printed as 6-digit octal numbers including the file\n           type and file permission bits.\n\n           Path names in extended headers do not include the a/ and b/\n           prefixes.\n\n           The similarity index is the percentage of unchanged lines, and the\n           dissimilarity index is the percentage of changed lines. It is a\n           rounded down integer, followed by a percent sign. The similarity\n           index value of 100% is thus reserved for two equal files, while\n           100% dissimilarity means that no line from the old file made it\n           into the new one.\n\n           The index line includes the blob object names before and after the\n           change. The <mode> is included if the file mode does not change;\n           otherwise, separate lines indicate the old and the new mode.\n\n        3. Pathnames with "unusual" characters are quoted as explained for the\n           configuration variable core.quotePath (see git-config(1)).\n\n        4. All the file1 files in the output refer to files before the commit,\n           and all the file2 files refer to files after the commit. It is\n           incorrect to apply each change to each file sequentially. For\n           example, this patch will swap a and b:\n\n               diff --git a/a b/b\n               rename from a\n               rename to b\n               diff --git a/b b/a\n               rename from b\n               rename to a\n\nCOMBINED DIFF FORMAT\n       Any diff-generating command can take the -c or --cc option to produce a\n       combined diff when showing a merge. This is the default format when\n       showing merges with git-diff(1) or git-show(1). Note also that you can\n       give suitable --diff-merges option to any of these commands to force\n       generation of diffs in specific format.\n\n       A "combined diff" format looks like this:\n\n           diff --combined describe.c\n           index fabadb8,cc95eb0..4866510\n           --- a/describe.c\n           +++ b/describe.c\n           @@@ -98,20 -98,12 +98,20 @@@\n                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n             }\n\n           - static void describe(char *arg)\n            -static void describe(struct commit *cmit, int last_one)\n           ++static void describe(char *arg, int last_one)\n             {\n            +      unsigned char sha1[20];\n            +      struct commit *cmit;\n                   struct commit_list *list;\n                   static int initialized = 0;\n                   struct commit_name *n;\n\n            +      if (get_sha1(arg, sha1) < 0)\n            +              usage(describe_usage);\n            +      cmit = lookup_commit_reference(sha1);\n            +      if (!cmit)\n            +              usage(describe_usage);\n            +\n                   if (!initialized) {\n                           initialized = 1;\n                           for_each_ref(get_name);\n\n\n\n        1. It is preceded with a "git diff" header, that looks like this (when\n           the -c option is used):\n\n               diff --combined file\n\n           or like this (when the --cc option is used):\n\n               diff --cc file\n\n        2. It is followed by one or more extended header lines (this example\n           shows a merge with two parents):\n\n               index <hash>,<hash>..<hash>\n               mode <mode>,<mode>..<mode>\n               new file mode <mode>\n               deleted file mode <mode>,<mode>\n\n           The mode <mode>,<mode>..<mode> line appears only if at least one of\n           the <mode> is different from the rest. Extended headers with\n           information about detected contents movement (renames and copying\n           detection) are designed to work with diff of two <tree-ish> and are\n           not used by combined diff format.\n\n        3. It is followed by two-line from-file/to-file header\n\n               --- a/file\n               +++ b/file\n\n           Similar to two-line header for traditional unified diff format,\n           /dev/null is used to signal created or deleted files.\n\n           However, if the --combined-all-paths option is provided, instead of\n           a two-line from-file/to-file you get a N+1 line from-file/to-file\n           header, where N is the number of parents in the merge commit\n\n               --- a/file\n               --- a/file\n               --- a/file\n               +++ b/file\n\n           This extended format can be useful if rename or copy detection is\n           active, to allow you to see the original name of the file in\n           different parents.\n\n        4. Chunk header format is modified to prevent people from accidentally\n           feeding it to patch -p1. Combined diff format was created for\n           review of merge commit changes, and was not meant to be applied.\n           The change is similar to the change in the extended index header:\n\n               @@@ <from-file-range> <from-file-range> <to-file-range> @@@\n\n           There are (number of parents + 1) @ characters in the chunk header\n           for combined diff format.\n\n       Unlike the traditional unified diff format, which shows two files A and\n       B with a single column that has - (minus -- appears in A but removed in\n       B), + (plus -- missing in A but added to B), or " " (space --\n       unchanged) prefix, this format compares two or more files file1,\n       file2,... with one file X, and shows how X differs from each of fileN.\n       One column for each of fileN is prepended to the output line to note\n       how X\'s line is different from it.\n\n       A - character in the column N means that the line appears in fileN but\n       it does not appear in the result. A + character in the column N means\n       that the line appears in the result, and fileN does not have that line\n       (in other words, the line was added, from the point of view of that\n       parent).\n\n       In the above example output, the function signature was changed from\n       both files (hence two - removals from both file1 and file2, plus ++ to\n       mean one line that was added does not appear in either file1 or file2).\n       Also eight other lines are the same from file1 but do not appear in\n       file2 (hence prefixed with +).\n\n       When shown by git diff-tree -c, it compares the parents of a merge\n       commit with the merge result (i.e. file1..fileN are the parents). When\n       shown by git diff-files -c, it compares the two unresolved merge\n       parents with the working tree file (i.e. file1 is stage 2 aka "our\n       version", file2 is stage 3 aka "their version").\n\nEXAMPLES\n       git log --no-merges\n           Show the whole commit history, but skip any merges\n\n       git log v2.6.12.. include/scsi drivers/scsi\n           Show all commits since version v2.6.12 that changed any file in the\n           include/scsi or drivers/scsi subdirectories\n\n       git log --since="2 weeks ago" -- gitk\n           Show the changes during the last two weeks to the file gitk. The --\n           is necessary to avoid confusion with the branch named gitk\n\n       git log --name-status release..test\n           Show the commits that are in the "test" branch but not yet in the\n           "release" branch, along with the list of paths each commit\n           modifies.\n\n       git log --follow builtin/rev-list.c\n           Shows the commits that changed builtin/rev-list.c, including those\n           commits that occurred before the file was given its present name.\n\n       git log --branches --not --remotes=origin\n           Shows all commits that are in any of local branches but not in any\n           of remote-tracking branches for origin (what you have that origin\n           doesn\'t).\n\n       git log main --not --remotes=*/main\n           Shows all commits that are in local main but not in any remote\n           repository main branches.\n\n       git log -p -m --first-parent\n           Shows the history including change diffs, but only from the "main\n           branch" perspective, skipping commits that come from merged\n           branches, and showing full diffs of changes introduced by the\n           merges. This makes sense only when following a strict policy of\n           merging all topic branches when staying on a single integration\n           branch.\n\n       git log -L \'/int main/\',/^}/:main.c\n           Shows how the function main() in the file main.c evolved over time.\n\n       git log -3\n           Limits the number of commits to show to 3.\n\nDISCUSSION\n       Git is to some extent character encoding agnostic.\n\n       o   The contents of the blob objects are uninterpreted sequences of\n           bytes. There is no encoding translation at the core level.\n\n       o   Path names are encoded in UTF-8 normalization form C. This applies\n           to tree objects, the index file, ref names, as well as path names\n           in command line arguments, environment variables and config files\n           (.git/config (see git-config(1)), gitignore(5), gitattributes(5)\n           and gitmodules(5)).\n\n           Note that Git at the core level treats path names simply as\n           sequences of non-NUL bytes, there are no path name encoding\n           conversions (except on Mac and Windows). Therefore, using non-ASCII\n           path names will mostly work even on platforms and file systems that\n           use legacy extended ASCII encodings. However, repositories created\n           on such systems will not work properly on UTF-8-based systems (e.g.\n           Linux, Mac, Windows) and vice versa. Additionally, many Git-based\n           tools simply assume path names to be UTF-8 and will fail to display\n           other encodings correctly.\n\n       o   Commit log messages are typically encoded in UTF-8, but other\n           extended ASCII encodings are also supported. This includes\n           ISO-8859-x, CP125x and many others, but not UTF-16/32, EBCDIC and\n           CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).\n\n       Although we encourage that the commit log messages are encoded in\n       UTF-8, both the core and Git Porcelain are designed not to force UTF-8\n       on projects. If all participants of a particular project find it more\n       convenient to use legacy encodings, Git does not forbid it. However,\n       there are a few things to keep in mind.\n\n        1. git commit and git commit-tree issues a warning if the commit log\n           message given to it does not look like a valid UTF-8 string, unless\n           you explicitly say your project uses a legacy encoding. The way to\n           say this is to have i18n.commitencoding in .git/config file, like\n           this:\n\n               [i18n]\n                       commitEncoding = ISO-8859-1\n\n           Commit objects created with the above setting record the value of\n           i18n.commitEncoding in its encoding header. This is to help other\n           people who look at them later. Lack of this header implies that the\n           commit log message is encoded in UTF-8.\n\n        2. git log, git show, git blame and friends look at the encoding\n           header of a commit object, and try to re-code the log message into\n           UTF-8 unless otherwise specified. You can specify the desired\n           output encoding with i18n.logOutputEncoding in .git/config file,\n           like this:\n\n               [i18n]\n                       logOutputEncoding = ISO-8859-1\n\n           If you do not have this configuration variable, the value of\n           i18n.commitEncoding is used instead.\n\n       Note that we deliberately chose not to re-code the commit log message\n       when a commit is made to force UTF-8 at the commit object level,\n       because re-coding to UTF-8 is not necessarily a reversible operation.\n\nCONFIGURATION\n       See git-config(1) for core variables and git-diff(1) for settings\n       related to diff generation.\n\n       format.pretty\n           Default for the --format option. (See Pretty Formats above.)\n           Defaults to medium.\n\n       i18n.logOutputEncoding\n           Encoding to use when displaying logs. (See Discussion above.)\n           Defaults to the value of i18n.commitEncoding if set, and UTF-8\n           otherwise.\n\n       log.date\n           Default format for human-readable dates. (Compare the --date\n           option.) Defaults to "default", which means to write dates like Sat\n           May 8 19:35:34 2010 -0500.\n\n           If the format is set to "auto:foo" and the pager is in use, format\n           "foo" will be the used for the date format. Otherwise "default"\n           will be used.\n\n       log.follow\n           If true, git log will act as if the --follow option was used when a\n           single <path> is given. This has the same limitations as --follow,\n           i.e. it cannot be used to follow multiple files and does not work\n           well on non-linear history.\n\n       log.showRoot\n           If false, git log and related commands will not treat the initial\n           commit as a big creation event. Any root commits in git log -p\n           output would be shown without a diff attached. The default is true.\n\n       log.showSignature\n           If true, git log and related commands will act as if the\n           --show-signature option was passed to them.\n\n       mailmap.*\n           See git-shortlog(1).\n\n       notes.displayRef\n           Which refs, in addition to the default set by core.notesRef or\n           GIT_NOTES_REF, to read notes from when showing commit messages with\n           the log family of commands. See git-notes(1).\n\n           May be an unabbreviated ref name or a glob and may be specified\n           multiple times. A warning will be issued for refs that do not\n           exist, but a glob that does not match any refs is silently ignored.\n\n           This setting can be disabled by the --no-notes option, overridden\n           by the GIT_NOTES_DISPLAY_REF environment variable, and overridden\n           by the --notes=<ref> option.\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                        GIT-LOG(1)\n')),(0,a.kt)("h2",{id:"show"},(0,a.kt)("inlineCode",{parentName:"h2"},"show")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-SHOW(1)                       Git Manual                       GIT-SHOW(1)\n\n\n\nNAME\n       git-show - \u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8868\u793a\u3059\u308b\n\nSYNOPSIS\n       git show [<options>] [<object>...]\n\n\nDESCRIPTION\n       1\u3064\u4ee5\u4e0a\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u30d6\u30ed\u30d6\u3001\u30c4\u30ea\u30fc\u3001\u30bf\u30b0\u3001\u304a\u3088\u3073\u30b3\u30df\u30c3\u30c8\uff09\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n       \u30b3\u30df\u30c3\u30c8\u306e\u5834\u5408\u3001\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u30c6\u30ad\u30b9\u30c8\u306e\u5dee\u5206\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \u307e\u305f\u3001git diff-tree --cc \u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u7279\u5225\u306a\u5f62\u5f0f\u3067\u30de\u30fc\u30b8\u30b3\u30df\u30c3\u30c8\u3092\u793a\u3057\u307e\u3059\u3002\n\n       \u30bf\u30b0\u306e\u5834\u5408\u3001\u30bf\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u53c2\u7167\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n       \u30c4\u30ea\u30fc\u306e\u5834\u5408\u306f\u3001\u540d\u524d\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff08--name-only \u3092\u6307\u5b9a\u3057\u305f git ls-tree \u3068\u540c\u7b49\uff09\u3002\n\n       \u30d7\u30ec\u30fc\u30f3\u30d6\u30ed\u30d6\u306e\u5834\u5408\u306f\u3001\u30d7\u30ec\u30fc\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \n       \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001git diff-tree \u30b3\u30de\u30f3\u30c9\u306b\u9069\u7528\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\n       \u30b3\u30df\u30c3\u30c8\u306b\u3088\u3063\u3066\u5c0e\u5165\u3055\u308c\u305f\u5909\u66f4\u306e\u8868\u793a\u65b9\u6cd5\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002\n\n       \u3053\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u30da\u30fc\u30b8\u3067\u306f\u3001\u6700\u3082\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306e\u307f\u8aac\u660e\u3057\u307e\u3059\u3002\n\nOPTIONS\n       <object>...\n           The names of objects to show (defaults to HEAD). For a more\n           complete list of ways to spell object names, see "SPECIFYING\n           REVISIONS" section in gitrevisions(7).\n\n       --pretty[=<format>], --format=<format>\n           Pretty-print the contents of the commit logs in a given format,\n           where <format> can be one of oneline, short, medium, full, fuller,\n           reference, email, raw, format:<string> and tformat:<string>. When\n           <format> is none of the above, and has %placeholder in it, it acts\n           as if --pretty=tformat:<format> were given.\n\n           See the "PRETTY FORMATS" section for some additional details for\n           each format. When =<format> part is omitted, it defaults to medium.\n\n           Note: you can specify the default pretty format in the repository\n           configuration (see git-config(1)).\n\n       --abbrev-commit\n           Instead of showing the full 40-byte hexadecimal commit object name,\n           show a prefix that names the object uniquely. "--abbrev=<n>" (which\n           also modifies diff output, if it is displayed) option can be used\n           to specify the minimum length of the prefix.\n\n           This should make "--pretty=oneline" a whole lot more readable for\n           people using 80-column terminals.\n\n       --no-abbrev-commit\n           Show the full 40-byte hexadecimal commit object name. This negates\n           --abbrev-commit, either explicit or implied by other options such\n           as "--oneline". It also overrides the log.abbrevCommit variable.\n\n       --oneline\n           This is a shorthand for "--pretty=oneline --abbrev-commit" used\n           together.\n\n       --encoding=<encoding>\n           The commit objects record the encoding used for the log message in\n           their encoding header; this option can be used to tell the command\n           to re-code the commit log message in the encoding preferred by the\n           user. For non plumbing commands this defaults to UTF-8. Note that\n           if an object claims to be encoded in X and we are outputting in X,\n           we will output the object verbatim; this means that invalid\n           sequences in the original commit may be copied to the output.\n\n       --expand-tabs=<n>, --expand-tabs, --no-expand-tabs\n           Perform a tab expansion (replace each tab with enough spaces to\n           fill to the next display column that is multiple of <n>) in the log\n           message before showing it in the output.  --expand-tabs is a\n           short-hand for --expand-tabs=8, and --no-expand-tabs is a\n           short-hand for --expand-tabs=0, which disables tab expansion.\n\n           By default, tabs are expanded in pretty formats that indent the log\n           message by 4 spaces (i.e.  medium, which is the default, full, and\n           fuller).\n\n       --notes[=<ref>]\n           Show the notes (see git-notes(1)) that annotate the commit, when\n           showing the commit log message. This is the default for git log,\n           git show and git whatchanged commands when there is no --pretty,\n           --format, or --oneline option given on the command line.\n\n           By default, the notes shown are from the notes refs listed in the\n           core.notesRef and notes.displayRef variables (or corresponding\n           environment overrides). See git-config(1) for more details.\n\n           With an optional <ref> argument, use the ref to find the notes to\n           display. The ref can specify the full refname when it begins with\n           refs/notes/; when it begins with notes/, refs/ and otherwise\n           refs/notes/ is prefixed to form a full name of the ref.\n\n           Multiple --notes options can be combined to control which notes are\n           being displayed. Examples: "--notes=foo" will show only notes from\n           "refs/notes/foo"; "--notes=foo --notes" will show both notes from\n           "refs/notes/foo" and from the default notes ref(s).\n\n       --no-notes\n           Do not show notes. This negates the above --notes option, by\n           resetting the list of notes refs from which notes are shown.\n           Options are parsed in the order given on the command line, so e.g.\n           "--notes --notes=foo --no-notes --notes=bar" will only show notes\n           from "refs/notes/bar".\n\n       --show-notes[=<ref>], --[no-]standard-notes\n           These options are deprecated. Use the above --notes/--no-notes\n           options instead.\n\n       --show-signature\n           Check the validity of a signed commit object by passing the\n           signature to gpg --verify and show the output.\n\nPRETTY FORMATS\n       If the commit is a merge, and if the pretty-format is not oneline,\n       email or raw, an additional line is inserted before the Author: line.\n       This line begins with "Merge: " and the hashes of ancestral commits are\n       printed, separated by spaces. Note that the listed commits may not\n       necessarily be the list of the direct parent commits if you have\n       limited your view of history: for example, if you are only interested\n       in changes related to a certain directory or file.\n\n       There are several built-in formats, and you can define additional\n       formats by setting a pretty.<name> config option to either another\n       format name, or a format: string, as described below (see git-\n       config(1)). Here are the details of the built-in formats:\n\n       o   oneline\n\n               <hash> <title line>\n\n           This is designed to be as compact as possible.\n\n       o   short\n\n               commit <hash>\n               Author: <author>\n\n               <title line>\n\n       o   medium\n\n               commit <hash>\n               Author: <author>\n               Date:   <author date>\n\n               <title line>\n\n               <full commit message>\n\n       o   full\n\n               commit <hash>\n               Author: <author>\n               Commit: <committer>\n\n               <title line>\n\n               <full commit message>\n\n       o   fuller\n\n               commit <hash>\n               Author:     <author>\n               AuthorDate: <author date>\n               Commit:     <committer>\n               CommitDate: <committer date>\n\n               <title line>\n\n               <full commit message>\n\n       o   reference\n\n               <abbrev hash> (<title line>, <short author date>)\n\n           This format is used to refer to another commit in a commit message\n           and is the same as --pretty=\'format:%C(auto)%h (%s, %ad)\'. By\n           default, the date is formatted with --date=short unless another\n           --date option is explicitly specified. As with any format: with\n           format placeholders, its output is not affected by other options\n           like --decorate and --walk-reflogs.\n\n       o   email\n\n               From <hash> <date>\n               From: <author>\n               Date: <author date>\n               Subject: [PATCH] <title line>\n\n               <full commit message>\n\n       o   mboxrd\n\n           Like email, but lines in the commit message starting with "From "\n           (preceded by zero or more ">") are quoted with ">" so they aren\'t\n           confused as starting a new commit.\n\n       o   raw\n\n           The raw format shows the entire commit exactly as stored in the\n           commit object. Notably, the hashes are displayed in full,\n           regardless of whether --abbrev or --no-abbrev are used, and parents\n           information show the true parent commits, without taking grafts or\n           history simplification into account. Note that this format affects\n           the way commits are displayed, but not the way the diff is shown\n           e.g. with git log --raw. To get full object names in a raw diff\n           format, use --no-abbrev.\n\n       o   format:<string>\n\n           The format:<string> format allows you to specify which information\n           you want to show. It works a little bit like printf format, with\n           the notable exception that you get a newline with %n instead of \\n.\n\n           E.g, format:"The author of %h was %an, %ar%nThe title was >>%s<<%n"\n           would show something like this:\n\n               The author of fe6e0ee was Junio C Hamano, 23 hours ago\n               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<\n\n           The placeholders are:\n\n           o   Placeholders that expand to a single literal character:\n\n               %n\n                   newline\n\n               %%\n                   a raw %\n\n               %x00\n                   print a byte from a hex code\n\n           o   Placeholders that affect formatting of later placeholders:\n\n               %Cred\n                   switch color to red\n\n               %Cgreen\n                   switch color to green\n\n               %Cblue\n                   switch color to blue\n\n               %Creset\n                   reset color\n\n               %C(...)\n                   color specification, as described under Values in the\n                   "CONFIGURATION FILE" section of git-config(1). By default,\n                   colors are shown only when enabled for log output (by\n                   color.diff, color.ui, or --color, and respecting the auto\n                   settings of the former if we are going to a terminal).\n                   %C(auto,...)  is accepted as a historical synonym for the\n                   default (e.g., %C(auto,red)). Specifying %C(always,...)\n                   will show the colors even when color is not otherwise\n                   enabled (though consider just using --color=always to\n                   enable color for the whole output, including this format\n                   and anything else git might color).  auto alone (i.e.\n                   %C(auto)) will turn on auto coloring on the next\n                   placeholders until the color is switched again.\n\n               %m\n                   left (<), right (>) or boundary (-) mark\n\n               %w([<w>[,<i1>[,<i2>]]])\n                   switch line wrapping, like the -w option of git-\n                   shortlog(1).\n\n               %<(<N>[,trunc|ltrunc|mtrunc])\n                   make the next placeholder take at least N columns, padding\n                   spaces on the right if necessary. Optionally truncate at\n                   the beginning (ltrunc), the middle (mtrunc) or the end\n                   (trunc) if the output is longer than N columns. Note that\n                   truncating only works correctly with N >= 2.\n\n               %<|(<N>)\n                   make the next placeholder take at least until Nth columns,\n                   padding spaces on the right if necessary\n\n               %>(<N>), %>|(<N>)\n                   similar to %<(<N>), %<|(<N>) respectively, but padding\n                   spaces on the left\n\n               %>>(<N>), %>>|(<N>)\n                   similar to %>(<N>), %>|(<N>) respectively, except that if\n                   the next placeholder takes more spaces than given and there\n                   are spaces on its left, use those spaces\n\n               %><(<N>), %><|(<N>)\n                   similar to %<(<N>), %<|(<N>) respectively, but padding both\n                   sides (i.e. the text is centered)\n\n           o   Placeholders that expand to information extracted from the\n               commit:\n\n               %H\n                   commit hash\n\n               %h\n                   abbreviated commit hash\n\n               %T\n                   tree hash\n\n               %t\n                   abbreviated tree hash\n\n               %P\n                   parent hashes\n\n               %p\n                   abbreviated parent hashes\n\n               %an\n                   author name\n\n               %aN\n                   author name (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %ae\n                   author email\n\n               %aE\n                   author email (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %al\n                   author email local-part (the part before the @ sign)\n\n               %aL\n                   author local-part (see %al) respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %ad\n                   author date (format respects --date= option)\n\n               %aD\n                   author date, RFC2822 style\n\n               %ar\n                   author date, relative\n\n               %at\n                   author date, UNIX timestamp\n\n               %ai\n                   author date, ISO 8601-like format\n\n               %aI\n                   author date, strict ISO 8601 format\n\n               %as\n                   author date, short format (YYYY-MM-DD)\n\n               %cn\n                   committer name\n\n               %cN\n                   committer name (respecting .mailmap, see git-shortlog(1) or\n                   git-blame(1))\n\n               %ce\n                   committer email\n\n               %cE\n                   committer email (respecting .mailmap, see git-shortlog(1)\n                   or git-blame(1))\n\n               %cl\n                   committer email local-part (the part before the @ sign)\n\n               %cL\n                   committer local-part (see %cl) respecting .mailmap, see\n                   git-shortlog(1) or git-blame(1))\n\n               %cd\n                   committer date (format respects --date= option)\n\n               %cD\n                   committer date, RFC2822 style\n\n               %cr\n                   committer date, relative\n\n               %ct\n                   committer date, UNIX timestamp\n\n               %ci\n                   committer date, ISO 8601-like format\n\n               %cI\n                   committer date, strict ISO 8601 format\n\n               %cs\n                   committer date, short format (YYYY-MM-DD)\n\n               %d\n                   ref names, like the --decorate option of git-log(1)\n\n               %D\n                   ref names without the " (", ")" wrapping.\n\n               %S\n                   ref name given on the command line by which the commit was\n                   reached (like git log --source), only works with git log\n\n               %e\n                   encoding\n\n               %s\n                   subject\n\n               %f\n                   sanitized subject line, suitable for a filename\n\n               %b\n                   body\n\n               %B\n                   raw body (unwrapped subject and body)\n\n               %N\n                   commit notes\n\n               %GG\n                   raw verification message from GPG for a signed commit\n\n               %G?\n                   show "G" for a good (valid) signature, "B" for a bad\n                   signature, "U" for a good signature with unknown validity,\n                   "X" for a good signature that has expired, "Y" for a good\n                   signature made by an expired key, "R" for a good signature\n                   made by a revoked key, "E" if the signature cannot be\n                   checked (e.g. missing key) and "N" for no signature\n\n               %GS\n                   show the name of the signer for a signed commit\n\n               %GK\n                   show the key used to sign a signed commit\n\n               %GF\n                   show the fingerprint of the key used to sign a signed\n                   commit\n\n               %GP\n                   show the fingerprint of the primary key whose subkey was\n                   used to sign a signed commit\n\n               %GT\n                   show the trust level for the key used to sign a signed\n                   commit\n\n               %gD\n                   reflog selector, e.g., refs/stash@{1} or refs/stash@{2\n                   minutes ago}; the format follows the rules described for\n                   the -g option. The portion before the @ is the refname as\n                   given on the command line (so git log -g refs/heads/main\n                   would yield refs/heads/main@{0}).\n\n               %gd\n                   shortened reflog selector; same as %gD, but the refname\n                   portion is shortened for human readability (so\n                   refs/heads/main becomes just main).\n\n               %gn\n                   reflog identity name\n\n               %gN\n                   reflog identity name (respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %ge\n                   reflog identity email\n\n               %gE\n                   reflog identity email (respecting .mailmap, see git-\n                   shortlog(1) or git-blame(1))\n\n               %gs\n                   reflog subject\n\n               %(trailers[:options])\n                   display the trailers of the body as interpreted by git-\n                   interpret-trailers(1). The trailers string may be followed\n                   by a colon and zero or more comma-separated options. If any\n                   option is provided multiple times the last occurance wins.\n\n                   The boolean options accept an optional value [=<BOOL>]. The\n                   values true, false, on, off etc. are all accepted. See the\n                   "boolean" sub-section in "EXAMPLES" in git-config(1). If a\n                   boolean option is given with no value, it\'s enabled.\n\n                   o   key=<K>: only show trailers with specified key.\n                       Matching is done case-insensitively and trailing colon\n                       is optional. If option is given multiple times trailer\n                       lines matching any of the keys are shown. This option\n                       automatically enables the only option so that\n                       non-trailer lines in the trailer block are hidden. If\n                       that is not desired it can be disabled with only=false.\n                       E.g., %(trailers:key=Reviewed-by) shows trailer lines\n                       with key Reviewed-by.\n\n                   o   only[=<BOOL>]: select whether non-trailer lines from\n                       the trailer block should be included.\n\n                   o   separator=<SEP>: specify a separator inserted between\n                       trailer lines. When this option is not given each\n                       trailer line is terminated with a line feed character.\n                       The string SEP may contain the literal formatting codes\n                       described above. To use comma as separator one must use\n                       %x2C as it would otherwise be parsed as next option.\n                       E.g., %(trailers:key=Ticket,separator=%x2C ) shows all\n                       trailer lines whose key is "Ticket" separated by a\n                       comma and a space.\n\n                   o   unfold[=<BOOL>]: make it behave as if\n                       interpret-trailer\'s --unfold option was given. E.g.,\n                       %(trailers:only,unfold=true) unfolds and shows all\n                       trailer lines.\n\n                   o   keyonly[=<BOOL>]: only show the key part of the\n                       trailer.\n\n                   o   valueonly[=<BOOL>]: only show the value part of the\n                       trailer.\n\n                   o   key_value_separator=<SEP>: specify a separator inserted\n                       between trailer lines. When this option is not given\n                       each trailer key-value pair is separated by ": ".\n                       Otherwise it shares the same semantics as\n                       separator=<SEP> above.\n\n           Note\n           Some placeholders may depend on other options given to the revision\n           traversal engine. For example, the %g* reflog options will insert\n           an empty string unless we are traversing reflog entries (e.g., by\n           git log -g). The %d and %D placeholders will use the "short"\n           decoration format if --decorate was not already provided on the\n           command line.\n\n       If you add a + (plus sign) after % of a placeholder, a line-feed is\n       inserted immediately before the expansion if and only if the\n       placeholder expands to a non-empty string.\n\n       If you add a - (minus sign) after % of a placeholder, all consecutive\n       line-feeds immediately preceding the expansion are deleted if and only\n       if the placeholder expands to an empty string.\n\n       If you add a ` ` (space) after % of a placeholder, a space is inserted\n       immediately before the expansion if and only if the placeholder expands\n       to a non-empty string.\n\n       o   tformat:\n\n           The tformat: format works exactly like format:, except that it\n           provides "terminator" semantics instead of "separator" semantics.\n           In other words, each commit has the message terminator character\n           (usually a newline) appended, rather than a separator placed\n           between entries. This means that the final entry of a single-line\n           format will be properly terminated with a new line, just as the\n           "oneline" format does. For example:\n\n               $ git log -2 --pretty=format:%h 4da45bef \\\n                 | perl -pe \'$_ .= " -- NO NEWLINE\\n" unless /\\n/\'\n               4da45be\n               7134973 -- NO NEWLINE\n\n               $ git log -2 --pretty=tformat:%h 4da45bef \\\n                 | perl -pe \'$_ .= " -- NO NEWLINE\\n" unless /\\n/\'\n               4da45be\n               7134973\n\n           In addition, any unrecognized string that has a % in it is\n           interpreted as if it has tformat: in front of it. For example,\n           these two are equivalent:\n\n               $ git log -2 --pretty=tformat:%h 4da45bef\n               $ git log -2 --pretty=%h 4da45bef\n\n\nDIFF FORMATTING\n       The options below can be used to change the way git show generates diff\n       output.\n\n       -p, -u, --patch\n           Generate patch (see section on generating patches).\n\n       -s, --no-patch\n           Suppress diff output. Useful for commands like git show that show\n           the patch by default, or to cancel the effect of --patch.\n\n       --diff-merges=(off|none|first-parent|1|separate|m|combined|c|dense-combined|cc),\n       --no-diff-merges\n           Specify diff format to be used for merge commits. Default is\n           dense-combined unless --first-parent is in use, in which case\n           first-parent is the default.\n\n           --diff-merges=(off|none), --no-diff-merges\n               Disable output of diffs for merge commits. Useful to override\n               implied value.\n\n           --diff-merges=first-parent, --diff-merges=1\n               This option makes merge commits show the full diff with respect\n               to the first parent only.\n\n           --diff-merges=separate, --diff-merges=m, -m\n               This makes merge commits show the full diff with respect to\n               each of the parents. Separate log entry and diff is generated\n               for each parent.  -m doesn\'t produce any output without -p.\n\n           --diff-merges=combined, --diff-merges=c, -c\n               With this option, diff output for a merge commit shows the\n               differences from each of the parents to the merge result\n               simultaneously instead of showing pairwise diff between a\n               parent and the result one at a time. Furthermore, it lists only\n               files which were modified from all parents.  -c implies -p.\n\n           --diff-merges=dense-combined, --diff-merges=cc, --cc\n               With this option the output produced by --diff-merges=combined\n               is further compressed by omitting uninteresting hunks whose\n               contents in the parents have only two variants and the merge\n               result picks one of them without modification.  --cc implies\n               -p.\n\n       --combined-all-paths\n           This flag causes combined diffs (used for merge commits) to list\n           the name of the file from all parents. It thus only has effect when\n           --diff-merges=[dense-]combined is in use, and is likely only useful\n           if filename changes are detected (i.e. when either rename or copy\n           detection have been requested).\n\n       -U<n>, --unified=<n>\n           Generate diffs with <n> lines of context instead of the usual\n           three. Implies --patch.\n\n       --output=<file>\n           Output to a specific file instead of stdout.\n\n       --output-indicator-new=<char>, --output-indicator-old=<char>,\n       --output-indicator-context=<char>\n           Specify the character used to indicate new, old or context lines in\n           the generated patch. Normally they are +, - and \' \' respectively.\n\n       --raw\n           For each commit, show a summary of changes using the raw diff\n           format. See the "RAW OUTPUT FORMAT" section of git-diff(1). This is\n           different from showing the log itself in raw format, which you can\n           achieve with --format=raw.\n\n       --patch-with-raw\n           Synonym for -p --raw.\n\n       -t\n           Show the tree objects in the diff output.\n\n       --indent-heuristic\n           Enable the heuristic that shifts diff hunk boundaries to make\n           patches easier to read. This is the default.\n\n       --no-indent-heuristic\n           Disable the indent heuristic.\n\n       --minimal\n           Spend extra time to make sure the smallest possible diff is\n           produced.\n\n       --patience\n           Generate a diff using the "patience diff" algorithm.\n\n       --histogram\n           Generate a diff using the "histogram diff" algorithm.\n\n       --anchored=<text>\n           Generate a diff using the "anchored diff" algorithm.\n\n           This option may be specified more than once.\n\n           If a line exists in both the source and destination, exists only\n           once, and starts with this text, this algorithm attempts to prevent\n           it from appearing as a deletion or addition in the output. It uses\n           the "patience diff" algorithm internally.\n\n       --diff-algorithm={patience|minimal|histogram|myers}\n           Choose a diff algorithm. The variants are as follows:\n\n           default, myers\n               The basic greedy diff algorithm. Currently, this is the\n               default.\n\n           minimal\n               Spend extra time to make sure the smallest possible diff is\n               produced.\n\n           patience\n               Use "patience diff" algorithm when generating patches.\n\n           histogram\n               This algorithm extends the patience algorithm to "support\n               low-occurrence common elements".\n\n           For instance, if you configured the diff.algorithm variable to a\n           non-default value and want to use the default one, then you have to\n           use --diff-algorithm=default option.\n\n       --stat[=<width>[,<name-width>[,<count>]]]\n           Generate a diffstat. By default, as much space as necessary will be\n           used for the filename part, and the rest for the graph part.\n           Maximum width defaults to terminal width, or 80 columns if not\n           connected to a terminal, and can be overridden by <width>. The\n           width of the filename part can be limited by giving another width\n           <name-width> after a comma. The width of the graph part can be\n           limited by using --stat-graph-width=<width> (affects all commands\n           generating a stat graph) or by setting diff.statGraphWidth=<width>\n           (does not affect git format-patch). By giving a third parameter\n           <count>, you can limit the output to the first <count> lines,\n           followed by ...  if there are more.\n\n           These parameters can also be set individually with\n           --stat-width=<width>, --stat-name-width=<name-width> and\n           --stat-count=<count>.\n\n       --compact-summary\n           Output a condensed summary of extended header information such as\n           file creations or deletions ("new" or "gone", optionally "+l" if\n           it\'s a symlink) and mode changes ("+x" or "-x" for adding or\n           removing executable bit respectively) in diffstat. The information\n           is put between the filename part and the graph part. Implies\n           --stat.\n\n       --numstat\n           Similar to --stat, but shows number of added and deleted lines in\n           decimal notation and pathname without abbreviation, to make it more\n           machine friendly. For binary files, outputs two - instead of saying\n           0 0.\n\n       --shortstat\n           Output only the last line of the --stat format containing total\n           number of modified files, as well as number of added and deleted\n           lines.\n\n       -X[<param1,param2,...>], --dirstat[=<param1,param2,...>]\n           Output the distribution of relative amount of changes for each\n           sub-directory. The behavior of --dirstat can be customized by\n           passing it a comma separated list of parameters. The defaults are\n           controlled by the diff.dirstat configuration variable (see git-\n           config(1)). The following parameters are available:\n\n           changes\n               Compute the dirstat numbers by counting the lines that have\n               been removed from the source, or added to the destination. This\n               ignores the amount of pure code movements within a file. In\n               other words, rearranging lines in a file is not counted as much\n               as other changes. This is the default behavior when no\n               parameter is given.\n\n           lines\n               Compute the dirstat numbers by doing the regular line-based\n               diff analysis, and summing the removed/added line counts. (For\n               binary files, count 64-byte chunks instead, since binary files\n               have no natural concept of lines). This is a more expensive\n               --dirstat behavior than the changes behavior, but it does count\n               rearranged lines within a file as much as other changes. The\n               resulting output is consistent with what you get from the other\n               --*stat options.\n\n           files\n               Compute the dirstat numbers by counting the number of files\n               changed. Each changed file counts equally in the dirstat\n               analysis. This is the computationally cheapest --dirstat\n               behavior, since it does not have to look at the file contents\n               at all.\n\n           cumulative\n               Count changes in a child directory for the parent directory as\n               well. Note that when using cumulative, the sum of the\n               percentages reported may exceed 100%. The default\n               (non-cumulative) behavior can be specified with the\n               noncumulative parameter.\n\n           <limit>\n               An integer parameter specifies a cut-off percent (3% by\n               default). Directories contributing less than this percentage of\n               the changes are not shown in the output.\n\n           Example: The following will count changed files, while ignoring\n           directories with less than 10% of the total amount of changed\n           files, and accumulating child directory counts in the parent\n           directories: --dirstat=files,10,cumulative.\n\n       --cumulative\n           Synonym for --dirstat=cumulative\n\n       --dirstat-by-file[=<param1,param2>...]\n           Synonym for --dirstat=files,param1,param2...\n\n       --summary\n           Output a condensed summary of extended header information such as\n           creations, renames and mode changes.\n\n       --patch-with-stat\n           Synonym for -p --stat.\n\n       -z\n           Separate the commits with NULs instead of with new newlines.\n\n           Also, when --raw or --numstat has been given, do not munge\n           pathnames and use NULs as output field terminators.\n\n           Without this option, pathnames with "unusual" characters are quoted\n           as explained for the configuration variable core.quotePath (see\n           git-config(1)).\n\n       --name-only\n           Show only names of changed files.\n\n       --name-status\n           Show only names and status of changed files. See the description of\n           the --diff-filter option on what the status letters mean.\n\n       --submodule[=<format>]\n           Specify how differences in submodules are shown. When specifying\n           --submodule=short the short format is used. This format just shows\n           the names of the commits at the beginning and end of the range.\n           When --submodule or --submodule=log is specified, the log format is\n           used. This format lists the commits in the range like git-\n           submodule(1) summary does. When --submodule=diff is specified, the\n           diff format is used. This format shows an inline diff of the\n           changes in the submodule contents between the commit range.\n           Defaults to diff.submodule or the short format if the config option\n           is unset.\n\n       --color[=<when>]\n           Show colored diff.  --color (i.e. without =<when>) is the same as\n           --color=always.  <when> can be one of always, never, or auto.\n\n       --no-color\n           Turn off colored diff. It is the same as --color=never.\n\n       --color-moved[=<mode>]\n           Moved lines of code are colored differently. The <mode> defaults to\n           no if the option is not given and to zebra if the option with no\n           mode is given. The mode must be one of:\n\n           no\n               Moved lines are not highlighted.\n\n           default\n               Is a synonym for zebra. This may change to a more sensible mode\n               in the future.\n\n           plain\n               Any line that is added in one location and was removed in\n               another location will be colored with color.diff.newMoved.\n               Similarly color.diff.oldMoved will be used for removed lines\n               that are added somewhere else in the diff. This mode picks up\n               any moved line, but it is not very useful in a review to\n               determine if a block of code was moved without permutation.\n\n           blocks\n               Blocks of moved text of at least 20 alphanumeric characters are\n               detected greedily. The detected blocks are painted using either\n               the color.diff.{old,new}Moved color. Adjacent blocks cannot be\n               told apart.\n\n           zebra\n               Blocks of moved text are detected as in blocks mode. The blocks\n               are painted using either the color.diff.{old,new}Moved color or\n               color.diff.{old,new}MovedAlternative. The change between the\n               two colors indicates that a new block was detected.\n\n           dimmed-zebra\n               Similar to zebra, but additional dimming of uninteresting parts\n               of moved code is performed. The bordering lines of two adjacent\n               blocks are considered interesting, the rest is uninteresting.\n               dimmed_zebra is a deprecated synonym.\n\n       --no-color-moved\n           Turn off move detection. This can be used to override configuration\n           settings. It is the same as --color-moved=no.\n\n       --color-moved-ws=<modes>\n           This configures how whitespace is ignored when performing the move\n           detection for --color-moved. These modes can be given as a comma\n           separated list:\n\n           no\n               Do not ignore whitespace when performing move detection.\n\n           ignore-space-at-eol\n               Ignore changes in whitespace at EOL.\n\n           ignore-space-change\n               Ignore changes in amount of whitespace. This ignores whitespace\n               at line end, and considers all other sequences of one or more\n               whitespace characters to be equivalent.\n\n           ignore-all-space\n               Ignore whitespace when comparing lines. This ignores\n               differences even if one line has whitespace where the other\n               line has none.\n\n           allow-indentation-change\n               Initially ignore any whitespace in the move detection, then\n               group the moved code blocks only into a block if the change in\n               whitespace is the same per line. This is incompatible with the\n               other modes.\n\n       --no-color-moved-ws\n           Do not ignore whitespace when performing move detection. This can\n           be used to override configuration settings. It is the same as\n           --color-moved-ws=no.\n\n       --word-diff[=<mode>]\n           Show a word diff, using the <mode> to delimit changed words. By\n           default, words are delimited by whitespace; see --word-diff-regex\n           below. The <mode> defaults to plain, and must be one of:\n\n           color\n               Highlight changed words using only colors. Implies --color.\n\n           plain\n               Show words as [-removed-] and {+added+}. Makes no attempts to\n               escape the delimiters if they appear in the input, so the\n               output may be ambiguous.\n\n           porcelain\n               Use a special line-based format intended for script\n               consumption. Added/removed/unchanged runs are printed in the\n               usual unified diff format, starting with a +/-/` ` character at\n               the beginning of the line and extending to the end of the line.\n               Newlines in the input are represented by a tilde ~ on a line of\n               its own.\n\n           none\n               Disable word diff again.\n\n           Note that despite the name of the first mode, color is used to\n           highlight the changed parts in all modes if enabled.\n\n       --word-diff-regex=<regex>\n           Use <regex> to decide what a word is, instead of considering runs\n           of non-whitespace to be a word. Also implies --word-diff unless it\n           was already enabled.\n\n           Every non-overlapping match of the <regex> is considered a word.\n           Anything between these matches is considered whitespace and\n           ignored(!) for the purposes of finding differences. You may want to\n           append |[^[:space:]] to your regular expression to make sure that\n           it matches all non-whitespace characters. A match that contains a\n           newline is silently truncated(!) at the newline.\n\n           For example, --word-diff-regex=.  will treat each character as a\n           word and, correspondingly, show differences character by character.\n\n           The regex can also be set via a diff driver or configuration\n           option, see gitattributes(5) or git-config(1). Giving it explicitly\n           overrides any diff driver or configuration setting. Diff drivers\n           override configuration settings.\n\n       --color-words[=<regex>]\n           Equivalent to --word-diff=color plus (if a regex was specified)\n           --word-diff-regex=<regex>.\n\n       --no-renames\n           Turn off rename detection, even when the configuration file gives\n           the default to do so.\n\n       --[no-]rename-empty\n           Whether to use empty blobs as rename source.\n\n       --check\n           Warn if changes introduce conflict markers or whitespace errors.\n           What are considered whitespace errors is controlled by\n           core.whitespace configuration. By default, trailing whitespaces\n           (including lines that consist solely of whitespaces) and a space\n           character that is immediately followed by a tab character inside\n           the initial indent of the line are considered whitespace errors.\n           Exits with non-zero status if problems are found. Not compatible\n           with --exit-code.\n\n       --ws-error-highlight=<kind>\n           Highlight whitespace errors in the context, old or new lines of the\n           diff. Multiple values are separated by comma, none resets previous\n           values, default reset the list to new and all is a shorthand for\n           old,new,context. When this option is not given, and the\n           configuration variable diff.wsErrorHighlight is not set, only\n           whitespace errors in new lines are highlighted. The whitespace\n           errors are colored with color.diff.whitespace.\n\n       --full-index\n           Instead of the first handful of characters, show the full pre- and\n           post-image blob object names on the "index" line when generating\n           patch format output.\n\n       --binary\n           In addition to --full-index, output a binary diff that can be\n           applied with git-apply. Implies --patch.\n\n       --abbrev[=<n>]\n           Instead of showing the full 40-byte hexadecimal object name in\n           diff-raw format output and diff-tree header lines, show the\n           shortest prefix that is at least <n> hexdigits long that uniquely\n           refers the object. In diff-patch output format, --full-index takes\n           higher precedence, i.e. if --full-index is specified, full blob\n           names will be shown regardless of --abbrev. Non default number of\n           digits can be specified with --abbrev=<n>.\n\n       -B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]\n           Break complete rewrite changes into pairs of delete and create.\n           This serves two purposes:\n\n           It affects the way a change that amounts to a total rewrite of a\n           file not as a series of deletion and insertion mixed together with\n           a very few lines that happen to match textually as the context, but\n           as a single deletion of everything old followed by a single\n           insertion of everything new, and the number m controls this aspect\n           of the -B option (defaults to 60%).  -B/70% specifies that less\n           than 30% of the original should remain in the result for Git to\n           consider it a total rewrite (i.e. otherwise the resulting patch\n           will be a series of deletion and insertion mixed together with\n           context lines).\n\n           When used with -M, a totally-rewritten file is also considered as\n           the source of a rename (usually -M only considers a file that\n           disappeared as the source of a rename), and the number n controls\n           this aspect of the -B option (defaults to 50%).  -B20% specifies\n           that a change with addition and deletion compared to 20% or more of\n           the file\'s size are eligible for being picked up as a possible\n           source of a rename to another file.\n\n       -M[<n>], --find-renames[=<n>]\n           If generating diffs, detect and report renames for each commit. For\n           following files across renames while traversing history, see\n           --follow. If n is specified, it is a threshold on the similarity\n           index (i.e. amount of addition/deletions compared to the file\'s\n           size). For example, -M90% means Git should consider a delete/add\n           pair to be a rename if more than 90% of the file hasn\'t changed.\n           Without a % sign, the number is to be read as a fraction, with a\n           decimal point before it. I.e., -M5 becomes 0.5, and is thus the\n           same as -M50%. Similarly, -M05 is the same as -M5%. To limit\n           detection to exact renames, use -M100%. The default similarity\n           index is 50%.\n\n       -C[<n>], --find-copies[=<n>]\n           Detect copies as well as renames. See also --find-copies-harder. If\n           n is specified, it has the same meaning as for -M<n>.\n\n       --find-copies-harder\n           For performance reasons, by default, -C option finds copies only if\n           the original file of the copy was modified in the same changeset.\n           This flag makes the command inspect unmodified files as candidates\n           for the source of copy. This is a very expensive operation for\n           large projects, so use it with caution. Giving more than one -C\n           option has the same effect.\n\n       -D, --irreversible-delete\n           Omit the preimage for deletes, i.e. print only the header but not\n           the diff between the preimage and /dev/null. The resulting patch is\n           not meant to be applied with patch or git apply; this is solely for\n           people who want to just concentrate on reviewing the text after the\n           change. In addition, the output obviously lacks enough information\n           to apply such a patch in reverse, even manually, hence the name of\n           the option.\n\n           When used together with -B, omit also the preimage in the deletion\n           part of a delete/create pair.\n\n       -l<num>\n           The -M and -C options require O(n^2) processing time where n is the\n           number of potential rename/copy targets. This option prevents\n           rename/copy detection from running if the number of rename/copy\n           targets exceeds the specified number.\n\n       --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]\n           Select only files that are Added (A), Copied (C), Deleted (D),\n           Modified (M), Renamed (R), have their type (i.e. regular file,\n           symlink, submodule, ...) changed (T), are Unmerged (U), are Unknown\n           (X), or have had their pairing Broken (B). Any combination of the\n           filter characters (including none) can be used. When *\n           (All-or-none) is added to the combination, all paths are selected\n           if there is any file that matches other criteria in the comparison;\n           if there is no file that matches other criteria, nothing is\n           selected.\n\n           Also, these upper-case letters can be downcased to exclude. E.g.\n           --diff-filter=ad excludes added and deleted paths.\n\n           Note that not all diffs can feature all types. For instance, diffs\n           from the index to the working tree can never have Added entries\n           (because the set of paths included in the diff is limited by what\n           is in the index). Similarly, copied and renamed entries cannot\n           appear if detection for those types is disabled.\n\n       -S<string>\n           Look for differences that change the number of occurrences of the\n           specified string (i.e. addition/deletion) in a file. Intended for\n           the scripter\'s use.\n\n           It is useful when you\'re looking for an exact block of code (like a\n           struct), and want to know the history of that block since it first\n           came into being: use the feature iteratively to feed the\n           interesting block in the preimage back into -S, and keep going\n           until you get the very first version of the block.\n\n           Binary files are searched as well.\n\n       -G<regex>\n           Look for differences whose patch text contains added/removed lines\n           that match <regex>.\n\n           To illustrate the difference between -S<regex> --pickaxe-regex and\n           -G<regex>, consider a commit with the following diff in the same\n           file:\n\n               +    return frotz(nitfol, two->ptr, 1, 0);\n               ...\n               -    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n           While git log -G"frotz\\(nitfol" will show this commit, git log\n           -S"frotz\\(nitfol" --pickaxe-regex will not (because the number of\n           occurrences of that string did not change).\n\n           Unless --text is supplied patches of binary files without a\n           textconv filter will be ignored.\n\n           See the pickaxe entry in gitdiffcore(7) for more information.\n\n       --find-object=<object-id>\n           Look for differences that change the number of occurrences of the\n           specified object. Similar to -S, just the argument is different in\n           that it doesn\'t search for a specific string but for a specific\n           object id.\n\n           The object can be a blob or a submodule commit. It implies the -t\n           option in git-log to also find trees.\n\n       --pickaxe-all\n           When -S or -G finds a change, show all the changes in that\n           changeset, not just the files that contain the change in <string>.\n\n       --pickaxe-regex\n           Treat the <string> given to -S as an extended POSIX regular\n           expression to match.\n\n       -O<orderfile>\n           Control the order in which files appear in the output. This\n           overrides the diff.orderFile configuration variable (see git-\n           config(1)). To cancel diff.orderFile, use -O/dev/null.\n\n           The output order is determined by the order of glob patterns in\n           <orderfile>. All files with pathnames that match the first pattern\n           are output first, all files with pathnames that match the second\n           pattern (but not the first) are output next, and so on. All files\n           with pathnames that do not match any pattern are output last, as if\n           there was an implicit match-all pattern at the end of the file. If\n           multiple pathnames have the same rank (they match the same pattern\n           but no earlier patterns), their output order relative to each other\n           is the normal order.\n\n           <orderfile> is parsed as follows:\n\n           o   Blank lines are ignored, so they can be used as separators for\n               readability.\n\n           o   Lines starting with a hash ("#") are ignored, so they can be\n               used for comments. Add a backslash ("\\") to the beginning of\n               the pattern if it starts with a hash.\n\n           o   Each other line contains a single pattern.\n\n           Patterns have the same syntax and semantics as patterns used for\n           fnmatch(3) without the FNM_PATHNAME flag, except a pathname also\n           matches a pattern if removing any number of the final pathname\n           components matches the pattern. For example, the pattern "foo*bar"\n           matches "fooasdfbar" and "foo/bar/baz/asdf" but not "foobarx".\n\n       -R\n           Swap two inputs; that is, show differences from index or on-disk\n           file to tree contents.\n\n       --relative[=<path>], --no-relative\n           When run from a subdirectory of the project, it can be told to\n           exclude changes outside the directory and show pathnames relative\n           to it with this option. When you are not in a subdirectory (e.g. in\n           a bare repository), you can name which subdirectory to make the\n           output relative to by giving a <path> as an argument.\n           --no-relative can be used to countermand both diff.relative config\n           option and previous --relative.\n\n       -a, --text\n           Treat all files as text.\n\n       --ignore-cr-at-eol\n           Ignore carriage-return at the end of line when doing a comparison.\n\n       --ignore-space-at-eol\n           Ignore changes in whitespace at EOL.\n\n       -b, --ignore-space-change\n           Ignore changes in amount of whitespace. This ignores whitespace at\n           line end, and considers all other sequences of one or more\n           whitespace characters to be equivalent.\n\n       -w, --ignore-all-space\n           Ignore whitespace when comparing lines. This ignores differences\n           even if one line has whitespace where the other line has none.\n\n       --ignore-blank-lines\n           Ignore changes whose lines are all blank.\n\n       -I<regex>, --ignore-matching-lines=<regex>\n           Ignore changes whose all lines match <regex>. This option may be\n           specified more than once.\n\n       --inter-hunk-context=<lines>\n           Show the context between diff hunks, up to the specified number of\n           lines, thereby fusing hunks that are close to each other. Defaults\n           to diff.interHunkContext or 0 if the config option is unset.\n\n       -W, --function-context\n           Show whole function as context lines for each change. The function\n           names are determined in the same way as git diff works out patch\n           hunk headers (see Defining a custom hunk-header in\n           gitattributes(5)).\n\n       --ext-diff\n           Allow an external diff helper to be executed. If you set an\n           external diff driver with gitattributes(5), you need to use this\n           option with git-log(1) and friends.\n\n       --no-ext-diff\n           Disallow external diff drivers.\n\n       --textconv, --no-textconv\n           Allow (or disallow) external text conversion filters to be run when\n           comparing binary files. See gitattributes(5) for details. Because\n           textconv filters are typically a one-way conversion, the resulting\n           diff is suitable for human consumption, but cannot be applied. For\n           this reason, textconv filters are enabled by default only for git-\n           diff(1) and git-log(1), but not for git-format-patch(1) or diff\n           plumbing commands.\n\n       --ignore-submodules[=<when>]\n           Ignore changes to submodules in the diff generation. <when> can be\n           either "none", "untracked", "dirty" or "all", which is the default.\n           Using "none" will consider the submodule modified when it either\n           contains untracked or modified files or its HEAD differs from the\n           commit recorded in the superproject and can be used to override any\n           settings of the ignore option in git-config(1) or gitmodules(5).\n           When "untracked" is used submodules are not considered dirty when\n           they only contain untracked content (but they are still scanned for\n           modified content). Using "dirty" ignores all changes to the work\n           tree of submodules, only changes to the commits stored in the\n           superproject are shown (this was the behavior until 1.7.0). Using\n           "all" hides all changes to submodules.\n\n       --src-prefix=<prefix>\n           Show the given source prefix instead of "a/".\n\n       --dst-prefix=<prefix>\n           Show the given destination prefix instead of "b/".\n\n       --no-prefix\n           Do not show any source or destination prefix.\n\n       --line-prefix=<prefix>\n           Prepend an additional prefix to every line of output.\n\n       --ita-invisible-in-index\n           By default entries added by "git add -N" appear as an existing\n           empty file in "git diff" and a new file in "git diff --cached".\n           This option makes the entry appear as a new file in "git diff" and\n           non-existent in "git diff --cached". This option could be reverted\n           with --ita-visible-in-index. Both options are experimental and\n           could be removed in future.\n\n       For more detailed explanation on these common options, see also\n       gitdiffcore(7).\n\nGENERATING PATCH TEXT WITH -P\n       Running git-diff(1), git-log(1), git-show(1), git-diff-index(1), git-\n       diff-tree(1), or git-diff-files(1) with the -p option produces patch\n       text. You can customize the creation of patch text via the\n       GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables (see\n       git(1)).\n\n       What the -p option produces is slightly different from the traditional\n       diff format:\n\n        1. It is preceded with a "git diff" header that looks like this:\n\n               diff --git a/file1 b/file2\n\n           The a/ and b/ filenames are the same unless rename/copy is\n           involved. Especially, even for a creation or a deletion, /dev/null\n           is not used in place of the a/ or b/ filenames.\n\n           When rename/copy is involved, file1 and file2 show the name of the\n           source file of the rename/copy and the name of the file that\n           rename/copy produces, respectively.\n\n        2. It is followed by one or more extended header lines:\n\n               old mode <mode>\n               new mode <mode>\n               deleted file mode <mode>\n               new file mode <mode>\n               copy from <path>\n               copy to <path>\n               rename from <path>\n               rename to <path>\n               similarity index <number>\n               dissimilarity index <number>\n               index <hash>..<hash> <mode>\n\n           File modes are printed as 6-digit octal numbers including the file\n           type and file permission bits.\n\n           Path names in extended headers do not include the a/ and b/\n           prefixes.\n\n           The similarity index is the percentage of unchanged lines, and the\n           dissimilarity index is the percentage of changed lines. It is a\n           rounded down integer, followed by a percent sign. The similarity\n           index value of 100% is thus reserved for two equal files, while\n           100% dissimilarity means that no line from the old file made it\n           into the new one.\n\n           The index line includes the blob object names before and after the\n           change. The <mode> is included if the file mode does not change;\n           otherwise, separate lines indicate the old and the new mode.\n\n        3. Pathnames with "unusual" characters are quoted as explained for the\n           configuration variable core.quotePath (see git-config(1)).\n\n        4. All the file1 files in the output refer to files before the commit,\n           and all the file2 files refer to files after the commit. It is\n           incorrect to apply each change to each file sequentially. For\n           example, this patch will swap a and b:\n\n               diff --git a/a b/b\n               rename from a\n               rename to b\n               diff --git a/b b/a\n               rename from b\n               rename to a\n\nCOMBINED DIFF FORMAT\n       Any diff-generating command can take the -c or --cc option to produce a\n       combined diff when showing a merge. This is the default format when\n       showing merges with git-diff(1) or git-show(1). Note also that you can\n       give suitable --diff-merges option to any of these commands to force\n       generation of diffs in specific format.\n\n       A "combined diff" format looks like this:\n\n           diff --combined describe.c\n           index fabadb8,cc95eb0..4866510\n           --- a/describe.c\n           +++ b/describe.c\n           @@@ -98,20 -98,12 +98,20 @@@\n                   return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n             }\n\n           - static void describe(char *arg)\n            -static void describe(struct commit *cmit, int last_one)\n           ++static void describe(char *arg, int last_one)\n             {\n            +      unsigned char sha1[20];\n            +      struct commit *cmit;\n                   struct commit_list *list;\n                   static int initialized = 0;\n                   struct commit_name *n;\n\n            +      if (get_sha1(arg, sha1) < 0)\n            +              usage(describe_usage);\n            +      cmit = lookup_commit_reference(sha1);\n            +      if (!cmit)\n            +              usage(describe_usage);\n            +\n                   if (!initialized) {\n                           initialized = 1;\n                           for_each_ref(get_name);\n\n\n\n        1. It is preceded with a "git diff" header, that looks like this (when\n           the -c option is used):\n\n               diff --combined file\n\n           or like this (when the --cc option is used):\n\n               diff --cc file\n\n        2. It is followed by one or more extended header lines (this example\n           shows a merge with two parents):\n\n               index <hash>,<hash>..<hash>\n               mode <mode>,<mode>..<mode>\n               new file mode <mode>\n               deleted file mode <mode>,<mode>\n\n           The mode <mode>,<mode>..<mode> line appears only if at least one of\n           the <mode> is different from the rest. Extended headers with\n           information about detected contents movement (renames and copying\n           detection) are designed to work with diff of two <tree-ish> and are\n           not used by combined diff format.\n\n        3. It is followed by two-line from-file/to-file header\n\n               --- a/file\n               +++ b/file\n\n           Similar to two-line header for traditional unified diff format,\n           /dev/null is used to signal created or deleted files.\n\n           However, if the --combined-all-paths option is provided, instead of\n           a two-line from-file/to-file you get a N+1 line from-file/to-file\n           header, where N is the number of parents in the merge commit\n\n               --- a/file\n               --- a/file\n               --- a/file\n               +++ b/file\n\n           This extended format can be useful if rename or copy detection is\n           active, to allow you to see the original name of the file in\n           different parents.\n\n        4. Chunk header format is modified to prevent people from accidentally\n           feeding it to patch -p1. Combined diff format was created for\n           review of merge commit changes, and was not meant to be applied.\n           The change is similar to the change in the extended index header:\n\n               @@@ <from-file-range> <from-file-range> <to-file-range> @@@\n\n           There are (number of parents + 1) @ characters in the chunk header\n           for combined diff format.\n\n       Unlike the traditional unified diff format, which shows two files A and\n       B with a single column that has - (minus -- appears in A but removed in\n       B), + (plus -- missing in A but added to B), or " " (space --\n       unchanged) prefix, this format compares two or more files file1,\n       file2,... with one file X, and shows how X differs from each of fileN.\n       One column for each of fileN is prepended to the output line to note\n       how X\'s line is different from it.\n\n       A - character in the column N means that the line appears in fileN but\n       it does not appear in the result. A + character in the column N means\n       that the line appears in the result, and fileN does not have that line\n       (in other words, the line was added, from the point of view of that\n       parent).\n\n       In the above example output, the function signature was changed from\n       both files (hence two - removals from both file1 and file2, plus ++ to\n       mean one line that was added does not appear in either file1 or file2).\n       Also eight other lines are the same from file1 but do not appear in\n       file2 (hence prefixed with +).\n\n       When shown by git diff-tree -c, it compares the parents of a merge\n       commit with the merge result (i.e. file1..fileN are the parents). When\n       shown by git diff-files -c, it compares the two unresolved merge\n       parents with the working tree file (i.e. file1 is stage 2 aka "our\n       version", file2 is stage 3 aka "their version").\n\nEXAMPLES\n       git show v1.0.0\n           Shows the tag v1.0.0, along with the object the tags points at.\n\n       git show v1.0.0^{tree}\n           Shows the tree pointed to by the tag v1.0.0.\n\n       git show -s --format=%s v1.0.0^{commit}\n           Shows the subject of the commit pointed to by the tag v1.0.0.\n\n       git show next~10:Documentation/README\n           Shows the contents of the file Documentation/README as they were\n           current in the 10th last commit of the branch next.\n\n       git show main:Makefile main:t/Makefile\n           Concatenates the contents of said Makefiles in the head of the\n           branch main.\n\nDISCUSSION\n       Git is to some extent character encoding agnostic.\n\n       o   The contents of the blob objects are uninterpreted sequences of\n           bytes. There is no encoding translation at the core level.\n\n       o   Path names are encoded in UTF-8 normalization form C. This applies\n           to tree objects, the index file, ref names, as well as path names\n           in command line arguments, environment variables and config files\n           (.git/config (see git-config(1)), gitignore(5), gitattributes(5)\n           and gitmodules(5)).\n\n           Note that Git at the core level treats path names simply as\n           sequences of non-NUL bytes, there are no path name encoding\n           conversions (except on Mac and Windows). Therefore, using non-ASCII\n           path names will mostly work even on platforms and file systems that\n           use legacy extended ASCII encodings. However, repositories created\n           on such systems will not work properly on UTF-8-based systems (e.g.\n           Linux, Mac, Windows) and vice versa. Additionally, many Git-based\n           tools simply assume path names to be UTF-8 and will fail to display\n           other encodings correctly.\n\n       o   Commit log messages are typically encoded in UTF-8, but other\n           extended ASCII encodings are also supported. This includes\n           ISO-8859-x, CP125x and many others, but not UTF-16/32, EBCDIC and\n           CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).\n\n       Although we encourage that the commit log messages are encoded in\n       UTF-8, both the core and Git Porcelain are designed not to force UTF-8\n       on projects. If all participants of a particular project find it more\n       convenient to use legacy encodings, Git does not forbid it. However,\n       there are a few things to keep in mind.\n\n        1. git commit and git commit-tree issues a warning if the commit log\n           message given to it does not look like a valid UTF-8 string, unless\n           you explicitly say your project uses a legacy encoding. The way to\n           say this is to have i18n.commitencoding in .git/config file, like\n           this:\n\n               [i18n]\n                       commitEncoding = ISO-8859-1\n\n           Commit objects created with the above setting record the value of\n           i18n.commitEncoding in its encoding header. This is to help other\n           people who look at them later. Lack of this header implies that the\n           commit log message is encoded in UTF-8.\n\n        2. git log, git show, git blame and friends look at the encoding\n           header of a commit object, and try to re-code the log message into\n           UTF-8 unless otherwise specified. You can specify the desired\n           output encoding with i18n.logOutputEncoding in .git/config file,\n           like this:\n\n               [i18n]\n                       logOutputEncoding = ISO-8859-1\n\n           If you do not have this configuration variable, the value of\n           i18n.commitEncoding is used instead.\n\n       Note that we deliberately chose not to re-code the commit log message\n       when a commit is made to force UTF-8 at the commit object level,\n       because re-coding to UTF-8 is not necessarily a reversible operation.\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                       GIT-SHOW(1)\n')),(0,a.kt)("h2",{id:"status"},(0,a.kt)("inlineCode",{parentName:"h2"},"status")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-STATUS(1)                     Git Manual                     GIT-STATUS(1)\n\n\n\nNAME\n       git-status - \u4f5c\u696d\u30c4\u30ea\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u8868\u793a\u3059\u308b\n\nSYNOPSIS\n       git status [<options>...] [--] [<pathspec>...]\n\n\nDESCRIPTION\n       \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb\u3068\u73fe\u5728\u306eHEAD\u30b3\u30df\u30c3\u30c8\u306e\u9593\u306b\u9055\u3044\u304c\u3042\u308b\u30d1\u30b9\u3001\n       \u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u9593\u306b\u9055\u3044\u304c\u3042\u308b\u30d1\u30b9\u3001\n       \u304a\u3088\u3073Git\u306b\u3088\u3063\u3066\u8ffd\u8de1\u3055\u308c\u306a\u3044\uff08\u305d\u3057\u3066 gitignore(5) \u306b\u3088\u3063\u3066\u7121\u8996\u3055\u308c\u306a\u3044\uff09\u4f5c\u696d\u30c4\u30ea\u30fc\u5185\u306e\u30d1\u30b9\n       \u3092\u8868\u793a\u3057\u307e\u3059\u3002\n       1\u3064\u76ee\u306f\u3001git commit \u3092\u5b9f\u884c\u3057\u3066\u30b3\u30df\u30c3\u30c8\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n       2\u756a\u76ee\u30683\u756a\u76ee\u306f\u3001git commit \u3092\u5b9f\u884c\u3059\u308b\u524d\u306b git add \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u30b3\u30df\u30c3\u30c8\u3067\u304d\u308b\u3082\u306e\u3067\u3059\u3002\n\nOPTIONS\n       -s, --short\n           Give the output in the short-format.\n\n       -b, --branch\n           Show the branch and tracking info even in short-format.\n\n       --show-stash\n           Show the number of entries currently stashed away.\n\n       --porcelain[=<version>]\n           Give the output in an easy-to-parse format for scripts. This is\n           similar to the short output, but will remain stable across Git\n           versions and regardless of user configuration. See below for\n           details.\n\n           The version parameter is used to specify the format version. This\n           is optional and defaults to the original version v1 format.\n\n       --long\n           Give the output in the long-format. This is the default.\n\n       -v, --verbose\n           In addition to the names of files that have been changed, also show\n           the textual changes that are staged to be committed (i.e., like the\n           output of git diff --cached). If -v is specified twice, then also\n           show the changes in the working tree that have not yet been staged\n           (i.e., like the output of git diff).\n\n       -u[<mode>], --untracked-files[=<mode>]\n           Show untracked files.\n\n           The mode parameter is used to specify the handling of untracked\n           files. It is optional: it defaults to all, and if specified, it\n           must be stuck to the option (e.g.  -uno, but not -u no).\n\n           The possible options are:\n\n           o   no - Show no untracked files.\n\n           o   normal - Shows untracked files and directories.\n\n           o   all - Also shows individual files in untracked directories.\n\n           When -u option is not used, untracked files and directories are\n           shown (i.e. the same as specifying normal), to help you avoid\n           forgetting to add newly created files. Because it takes extra work\n           to find untracked files in the filesystem, this mode may take some\n           time in a large working tree. Consider enabling untracked cache and\n           split index if supported (see git update-index --untracked-cache\n           and git update-index --split-index), Otherwise you can use no to\n           have git status return more quickly without showing untracked\n           files.\n\n           The default can be changed using the status.showUntrackedFiles\n           configuration variable documented in git-config(1).\n\n       --ignore-submodules[=<when>]\n           Ignore changes to submodules when looking for changes. <when> can\n           be either "none", "untracked", "dirty" or "all", which is the\n           default. Using "none" will consider the submodule modified when it\n           either contains untracked or modified files or its HEAD differs\n           from the commit recorded in the superproject and can be used to\n           override any settings of the ignore option in git-config(1) or\n           gitmodules(5). When "untracked" is used submodules are not\n           considered dirty when they only contain untracked content (but they\n           are still scanned for modified content). Using "dirty" ignores all\n           changes to the work tree of submodules, only changes to the commits\n           stored in the superproject are shown (this was the behavior before\n           1.7.0). Using "all" hides all changes to submodules (and suppresses\n           the output of submodule summaries when the config option\n           status.submoduleSummary is set).\n\n       --ignored[=<mode>]\n           Show ignored files as well.\n\n           The mode parameter is used to specify the handling of ignored\n           files. It is optional: it defaults to traditional.\n\n           The possible options are:\n\n           o   traditional - Shows ignored files and directories, unless\n               --untracked-files=all is specified, in which case individual\n               files in ignored directories are displayed.\n\n           o   no - Show no ignored files.\n\n           o   matching - Shows ignored files and directories matching an\n               ignore pattern.\n\n           When matching mode is specified, paths that explicitly match an\n           ignored pattern are shown. If a directory matches an ignore\n           pattern, then it is shown, but not paths contained in the ignored\n           directory. If a directory does not match an ignore pattern, but all\n           contents are ignored, then the directory is not shown, but all\n           contents are shown.\n\n       -z\n           Terminate entries with NUL, instead of LF. This implies the\n           --porcelain=v1 output format if no other format is given.\n\n       --column[=<options>], --no-column\n           Display untracked files in columns. See configuration variable\n           column.status for option syntax.--column and --no-column without\n           options are equivalent to always and never respectively.\n\n       --ahead-behind, --no-ahead-behind\n           Display or do not display detailed ahead/behind counts for the\n           branch relative to its upstream branch. Defaults to true.\n\n       --renames, --no-renames\n           Turn on/off rename detection regardless of user configuration. See\n           also git-diff(1) --no-renames.\n\n       --find-renames[=<n>]\n           Turn on rename detection, optionally setting the similarity\n           threshold. See also git-diff(1) --find-renames.\n\n       <pathspec>...\n           See the pathspec entry in gitglossary(7).\n\nOUTPUT\n       The output from this command is designed to be used as a commit\n       template comment. The default, long format, is designed to be human\n       readable, verbose and descriptive. Its contents and format are subject\n       to change at any time.\n\n       The paths mentioned in the output, unlike many other Git commands, are\n       made relative to the current directory if you are working in a\n       subdirectory (this is on purpose, to help cutting and pasting). See the\n       status.relativePaths config option below.\n\n   Short Format\n       In the short-format, the status of each path is shown as one of these\n       forms\n\n           XY PATH\n           XY ORIG_PATH -> PATH\n\n       where ORIG_PATH is where the renamed/copied contents came from.\n       ORIG_PATH is only shown when the entry is renamed or copied. The XY is\n       a two-letter status code.\n\n       The fields (including the ->) are separated from each other by a single\n       space. If a filename contains whitespace or other nonprintable\n       characters, that field will be quoted in the manner of a C string\n       literal: surrounded by ASCII double quote (34) characters, and with\n       interior special characters backslash-escaped.\n\n       There are three different types of states that are shown using this\n       format, and each one uses the XY syntax differently:\n\n       o   When a merge is occurring and the merge was successful, or outside\n           of a merge situation, X shows the status of the index and Y shows\n           the status of the working tree.\n\n       o   When a merge conflict has occurred and has not yet been resolved, X\n           and Y show the state introduced by each head of the merge, relative\n           to the common ancestor. These paths are said to be unmerged.\n\n       o   When a path is untracked, X and Y are always the same, since they\n           are unknown to the index.  ??  is used for untracked paths. Ignored\n           files are not listed unless --ignored is used; if it is, ignored\n           files are indicated by !!.\n\n       Note that the term merge here also includes rebases using the default\n       --merge strategy, cherry-picks, and anything else using the merge\n       machinery.\n\n       In the following table, these three classes are shown in separate\n       sections, and these characters are used for X and Y fields for the\n       first two sections that show tracked paths:\n\n       o   \' \' = unmodified\n\n       o   M = modified\n\n       o   A = added\n\n       o   D = deleted\n\n       o   R = renamed\n\n       o   C = copied\n\n       o   U = updated but unmerged\n\n           X          Y     Meaning\n           -------------------------------------------------\n                    [AMD]   not updated\n           M        [ MD]   updated in index\n           A        [ MD]   added to index\n           D                deleted from index\n           R        [ MD]   renamed in index\n           C        [ MD]   copied in index\n           [MARC]           index and work tree matches\n           [ MARC]     M    work tree changed since index\n           [ MARC]     D    deleted in work tree\n           [ D]        R    renamed in work tree\n           [ D]        C    copied in work tree\n           -------------------------------------------------\n           D           D    unmerged, both deleted\n           A           U    unmerged, added by us\n           U           D    unmerged, deleted by them\n           U           A    unmerged, added by them\n           D           U    unmerged, deleted by us\n           A           A    unmerged, both added\n           U           U    unmerged, both modified\n           -------------------------------------------------\n           ?           ?    untracked\n           !           !    ignored\n           -------------------------------------------------\n\n       Submodules have more state and instead report M the submodule has a\n       different HEAD than recorded in the index m the submodule has modified\n       content ? the submodule has untracked files since modified content or\n       untracked files in a submodule cannot be added via git add in the\n       superproject to prepare a commit.\n\n       m and ? are applied recursively. For example if a nested submodule in a\n       submodule contains an untracked file, this is reported as ? as well.\n\n       If -b is used the short-format status is preceded by a line\n\n           ## branchname tracking info\n\n   Porcelain Format Version 1\n       Version 1 porcelain format is similar to the short format, but is\n       guaranteed not to change in a backwards-incompatible way between Git\n       versions or based on user configuration. This makes it ideal for\n       parsing by scripts. The description of the short format above also\n       describes the porcelain format, with a few exceptions:\n\n        1. The user\'s color.status configuration is not respected; color will\n           always be off.\n\n        2. The user\'s status.relativePaths configuration is not respected;\n           paths shown will always be relative to the repository root.\n\n       There is also an alternate -z format recommended for machine parsing.\n       In that format, the status field is the same, but some other things\n       change. First, the -> is omitted from rename entries and the field\n       order is reversed (e.g from -> to becomes to from). Second, a NUL\n       (ASCII 0) follows each filename, replacing space as a field separator\n       and the terminating newline (but a space still separates the status\n       field from the first filename). Third, filenames containing special\n       characters are not specially formatted; no quoting or\n       backslash-escaping is performed.\n\n       Any submodule changes are reported as modified M instead of m or single\n       ?.\n\n   Porcelain Format Version 2\n       Version 2 format adds more detailed information about the state of the\n       worktree and changed items. Version 2 also defines an extensible set of\n       easy to parse optional headers.\n\n       Header lines start with "#" and are added in response to specific\n       command line arguments. Parsers should ignore headers they don\'t\n       recognize.\n\n       Branch Headers\n           If --branch is given, a series of header lines are printed with\n           information about the current branch.\n\n               Line                                     Notes\n               ------------------------------------------------------------\n               # branch.oid <commit> | (initial)        Current commit.\n               # branch.head <branch> | (detached)      Current branch.\n               # branch.upstream <upstream_branch>      If upstream is set.\n               # branch.ab +<ahead> -<behind>           If upstream is set and\n                                                        the commit is present.\n               ------------------------------------------------------------\n\n       Changed Tracked Entries\n           Following the headers, a series of lines are printed for tracked\n           entries. One of three different line formats may be used to\n           describe an entry depending on the type of change. Tracked entries\n           are printed in an undefined order; parsers should allow for a\n           mixture of the 3 line types in any order.\n\n           Ordinary changed entries have the following format:\n\n               1 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <path>\n\n           Renamed or copied entries have the following format:\n\n               2 <XY> <sub> <mH> <mI> <mW> <hH> <hI> <X><score> <path><sep><origPath>\n\n               Field       Meaning\n               --------------------------------------------------------\n               <XY>        A 2 character field containing the staged and\n                           unstaged XY values described in the short format,\n                           with unchanged indicated by a "." rather than\n                           a space.\n               <sub>       A 4 character field describing the submodule state.\n                           "N..." when the entry is not a submodule.\n                           "S<c><m><u>" when the entry is a submodule.\n                           <c> is "C" if the commit changed; otherwise ".".\n                           <m> is "M" if it has tracked changes; otherwise ".".\n                           <u> is "U" if there are untracked changes; otherwise ".".\n               <mH>        The octal file mode in HEAD.\n               <mI>        The octal file mode in the index.\n               <mW>        The octal file mode in the worktree.\n               <hH>        The object name in HEAD.\n               <hI>        The object name in the index.\n               <X><score>  The rename or copy score (denoting the percentage\n                           of similarity between the source and target of the\n                           move or copy). For example "R100" or "C75".\n               <path>      The pathname.  In a renamed/copied entry, this\n                           is the target path.\n               <sep>       When the `-z` option is used, the 2 pathnames are separated\n                           with a NUL (ASCII 0x00) byte; otherwise, a tab (ASCII 0x09)\n                           byte separates them.\n               <origPath>  The pathname in the commit at HEAD or in the index.\n                           This is only present in a renamed/copied entry, and\n                           tells where the renamed/copied contents came from.\n               --------------------------------------------------------\n\n           Unmerged entries have the following format; the first character is\n           a "u" to distinguish from ordinary changed entries.\n\n               u <xy> <sub> <m1> <m2> <m3> <mW> <h1> <h2> <h3> <path>\n\n               Field       Meaning\n               --------------------------------------------------------\n               <XY>        A 2 character field describing the conflict type\n                           as described in the short format.\n               <sub>       A 4 character field describing the submodule state\n                           as described above.\n               <m1>        The octal file mode in stage 1.\n               <m2>        The octal file mode in stage 2.\n               <m3>        The octal file mode in stage 3.\n               <mW>        The octal file mode in the worktree.\n               <h1>        The object name in stage 1.\n               <h2>        The object name in stage 2.\n               <h3>        The object name in stage 3.\n               <path>      The pathname.\n               --------------------------------------------------------\n\n       Other Items\n           Following the tracked entries (and if requested), a series of lines\n           will be printed for untracked and then ignored items found in the\n           worktree.\n\n           Untracked items have the following format:\n\n               ? <path>\n\n           Ignored items have the following format:\n\n               ! <path>\n\n       Pathname Format Notes and -z\n           When the -z option is given, pathnames are printed as is and\n           without any quoting and lines are terminated with a NUL (ASCII\n           0x00) byte.\n\n           Without the -z option, pathnames with "unusual" characters are\n           quoted as explained for the configuration variable core.quotePath\n           (see git-config(1)).\n\nCONFIGURATION\n       The command honors color.status (or status.color -- they mean the same\n       thing and the latter is kept for backward compatibility) and\n       color.status.<slot> configuration variables to colorize its output.\n\n       If the config variable status.relativePaths is set to false, then all\n       paths shown are relative to the repository root, not to the current\n       directory.\n\n       If status.submoduleSummary is set to a non zero number or true\n       (identical to -1 or an unlimited number), the submodule summary will be\n       enabled for the long format and a summary of commits for modified\n       submodules will be shown (see --summary-limit option of git-\n       submodule(1)). Please note that the summary output from the status\n       command will be suppressed for all submodules when\n       diff.ignoreSubmodules is set to all or only for those submodules where\n       submodule.<name>.ignore=all. To also view the summary for ignored\n       submodules you can either use the --ignore-submodules=dirty command\n       line option or the git submodule summary command, which shows a similar\n       output but does not honor these settings.\n\nBACKGROUND REFRESH\n       By default, git status will automatically refresh the index, updating\n       the cached stat information from the working tree and writing out the\n       result. Writing out the updated index is an optimization that isn\'t\n       strictly necessary (status computes the values for itself, but writing\n       them out is just to save subsequent programs from repeating our\n       computation). When status is run in the background, the lock held\n       during the write may conflict with other simultaneous processes,\n       causing them to fail. Scripts running status in the background should\n       consider using git --no-optional-locks status (see git(1) for details).\n\nSEE ALSO\n       gitignore(5)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                     GIT-STATUS(1)\n')),(0,a.kt)("h2",{id:"branch"},(0,a.kt)("inlineCode",{parentName:"h2"},"branch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-BRANCH(1)                     Git Manual                     GIT-BRANCH(1)\n\n\n\nNAME\n       git-branch - \u30d6\u30e9\u30f3\u30c1\u3092\u4e00\u89a7\u8868\u793a\u3001\u4f5c\u6210\u3001\u307e\u305f\u306f\u524a\u9664\u3059\u308b\n\nSYNOPSIS\n       git branch [--color[=<when>] | --no-color] [--show-current]\n               [-v [--abbrev=<n> | --no-abbrev]]\n               [--column[=<options>] | --no-column] [--sort=<key>]\n               [--merged [<commit>]] [--no-merged [<commit>]]\n               [--contains [<commit>]] [--no-contains [<commit>]]\n               [--points-at <object>] [--format=<format>]\n               [(-r | --remotes) | (-a | --all)]\n               [--list] [<pattern>...]\n       git branch [--track | --no-track] [-f] <branchname> [<start-point>]\n       git branch (--set-upstream-to=<upstream> | -u <upstream>) [<branchname>]\n       git branch --unset-upstream [<branchname>]\n       git branch (-m | -M) [<oldbranch>] <newbranch>\n       git branch (-c | -C) [<oldbranch>] <newbranch>\n       git branch (-d | -D) [-r] <branchname>...\n       git branch --edit-description [<branchname>]\n\n\nDESCRIPTION\n       --list \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u307e\u305f\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u65e2\u5b58\u306e\u30d6\u30e9\u30f3\u30c1\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306f\u7dd1\u8272\u3067\u5f37\u8abf\u8868\u793a\u3055\u308c\u3001\u30a2\u30b9\u30bf\u30ea\u30b9\u30af\u3067\u30de\u30fc\u30af\u3055\u308c\u307e\u3059\u3002\n       \u30ea\u30f3\u30af\u3055\u308c\u305f\u30ef\u30fc\u30af\u30c4\u30ea\u30fc\u3067\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u306f\u3001\u30b7\u30a2\u30f3\u3067\u5f37\u8abf\u8868\u793a\u3055\u308c\u3001\u30d7\u30e9\u30b9\u8a18\u53f7\u3067\u30de\u30fc\u30af\u3055\u308c\u307e\u3059\u3002\n       \u30aa\u30d7\u30b7\u30e7\u30f3 -r \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u3001\n       \u30aa\u30d7\u30b7\u30e7\u30f3 -a \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30ed\u30fc\u30ab\u30eb\u30d6\u30e9\u30f3\u30c1\u3068\u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u306e\u4e21\u65b9\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \n       <pattern> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u51fa\u529b\u3092\u4e00\u81f4\u3059\u308b\u30d6\u30e9\u30f3\u30c1\u306b\u5236\u9650\u3059\u308b\u305f\u3081\u306e\n       \u30b7\u30a7\u30eb\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n       \u8907\u6570\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u3044\u305a\u308c\u304b\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u3068\u30d6\u30e9\u30f3\u30c1\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       \n       <pattern> \u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306f\u3001--list \u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n       \u305d\u3046\u3057\u306a\u3044\u3068\u3001\u30b3\u30de\u30f3\u30c9\u304c\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n       \n       --contains \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u540d\u524d\u4ed8\u304d\u30b3\u30df\u30c3\u30c8\u3092\u542b\u3080\u30d6\u30e9\u30f3\u30c1\uff08\u3064\u307e\u308a\u3001\u30c1\u30c3\u30d7\u30b3\u30df\u30c3\u30c8\u304c\n       \u540d\u524d\u4ed8\u304d\u30b3\u30df\u30c3\u30c8\u306e\u5b50\u5b6b\u3067\u3042\u308b\u30d6\u30e9\u30f3\u30c1\uff09\u306e\u307f\u304c\u8868\u793a\u3055\u308c\u3001--no-contains \u306f\u305d\u308c\u3092\u53cd\u8ee2\u3057\u307e\u3059\u3002\n       --merged \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u540d\u524d\u4ed8\u304d\u30b3\u30df\u30c3\u30c8\u306b\u30de\u30fc\u30b8\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\uff08\u3064\u307e\u308a\u3001\u540d\u524d\u4ed8\u304d\u30b3\u30df\u30c3\u30c8\u304b\u3089\n       \u30c1\u30c3\u30d7\u30b3\u30df\u30c3\u30c8\u306b\u5230\u9054\u3067\u304d\u308b\u30d6\u30e9\u30f3\u30c1\uff09\u306e\u307f\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       --no-merged \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6307\u5b9a\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u306b\u30de\u30fc\u30b8\u3055\u308c\u3066\u3044\u306a\u3044\u30d6\u30e9\u30f3\u30c1\u306e\u307f\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n       <commit> \u5f15\u6570\u304c\u6b20\u843d\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HEAD\uff08\u3064\u307e\u308a\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n       \n       \u30b3\u30de\u30f3\u30c9\u306e2\u756a\u76ee\u306e\u5f62\u5f0f\u306f\u3001\u73fe\u5728\u306e HEAD\u3001\u307e\u305f\u306f\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f <start-point> \u3092\u6307\u3059\n       <branchname> \u3068\u3044\u3046\u540d\u524d\u306e\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n       \u7279\u5225\u306a\u5834\u5408\u3068\u3057\u3066\u3001<start-point> \u306e\u5834\u5408\u3001\u30de\u30fc\u30b8\u30d9\u30fc\u30b9\u304c1\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306f\u3001\n       A \u3068 B \u306e\u30de\u30fc\u30b8\u30d9\u30fc\u30b9\u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3068\u3057\u3066\u300cA...B\u300d\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n        A \u3068 B \u306e\u6700\u59271\u3064\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HEAD \u306b\u306a\u308a\u307e\u3059\u3002\n       \n       \u3053\u308c\u306b\u3088\u308a\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304c\u305d\u308c\u306b\u5207\u308a\u66ff\u308f\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n       \u300cgitswitch <newbranch>\u300d\u3092\u4f7f\u7528\u3057\u3066\u3001\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002\n       \n       \u30ed\u30fc\u30ab\u30eb\u30d6\u30e9\u30f3\u30c1\u304c\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u958b\u59cb\u3055\u308c\u308b\u3068\u3001\n       Git\u306f\u30d6\u30e9\u30f3\u30c1\uff08\u5177\u4f53\u7684\u306b\u306f branch.<name>.remote \u304a\u3088\u3073 branch.<name>.merge \u69cb\u6210\u30a8\u30f3\u30c8\u30ea\uff09\n       \u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u3001git pull \u304c\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u9069\u5207\u306b\u30de\u30fc\u30b8\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n       \u3053\u306e\u52d5\u4f5c\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306e branch.autoSetupMerge \u69cb\u6210\u30d5\u30e9\u30b0\u3092\u4ecb\u3057\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n       \u3053\u306e\u8a2d\u5b9a\u306f\u3001-track \u304a\u3088\u3073 --no-track \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3067\u304d\u3001\n       \u5f8c\u3067 git branch--set-upstream-to \u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n       \n       -m \u307e\u305f\u306f -M \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001<oldbranch> \u306e\u540d\u524d\u304c <newbranch> \u306b\u5909\u66f4\u3055\u308c\u307e\u3059\u3002\n       <oldbranch> \u306b\u5bfe\u5fdc\u3059\u308b reflog \u304c\u3042\u308b\u5834\u5408\u306f\u3001<newbranch> \u306b\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u3001\n       \u30d6\u30e9\u30f3\u30c1\u306e\u540d\u524d\u5909\u66f4\u3092\u8a18\u61b6\u3059\u308b\u305f\u3081\u306b reflog \u30a8\u30f3\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n       <newbranch> \u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001-M \u3092\u4f7f\u7528\u3057\u3066\u540d\u524d\u306e\u5909\u66f4\u3092\u5f37\u5236\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n       \n       -c \u304a\u3088\u3073 -C \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9\u306f\u3001-m \u304a\u3088\u3073 -M \u3068\u307e\u3063\u305f\u304f\u540c\u3058\u3067\u3059\u304c\u3001\n       \u30d6\u30e9\u30f3\u30c1\u306e\u540d\u524d\u304c\u5909\u66f4\u3055\u308c\u308b\u4ee3\u308f\u308a\u306b\u3001\u69cb\u6210\u304a\u3088\u3073 reflog \u3068\u3068\u3082\u306b\u65b0\u3057\u3044\u540d\u524d\u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002\n       \n       -d \u307e\u305f\u306f -D \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001<branchname> \u304c\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n       \u524a\u9664\u3059\u308b\u30d6\u30e9\u30f3\u30c1\u3092\u8907\u6570\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u30d6\u30e9\u30f3\u30c1\u306b\u73fe\u5728 reflog \u304c\u3042\u308b\u5834\u5408\u3001reflog \u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n       \n       -r \u3092 -d \u3068\u4e00\u7dd2\u306b\u4f7f\u7528\u3057\u3066\u3001\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n       \u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u3092\u524a\u9664\u3059\u308b\u306e\u306f\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u5b58\u5728\u3057\u306a\u304f\u306a\u3063\u305f\u5834\u5408\u3001\n       \u307e\u305f\u306f git fetch \u304c\u518d\u5ea6\u30d5\u30a7\u30c3\u30c1\u3057\u306a\u3044\u3088\u3046\u306b\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u610f\u5473\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n       \u5ec3\u6b62\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ea\u30e2\u30fc\u30c8\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u30d6\u30e9\u30f3\u30c1\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001git-remote(1) \u306e\n       prune \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nOPTIONS\n       -d, --delete\n           Delete a branch. The branch must be fully merged in its upstream\n           branch, or in HEAD if no upstream was set with --track or\n           --set-upstream-to.\n\n       -D\n           Shortcut for --delete --force.\n\n       --create-reflog\n           Create the branch\'s reflog. This activates recording of all changes\n           made to the branch ref, enabling use of date based sha1 expressions\n           such as "<branchname>@{yesterday}". Note that in non-bare\n           repositories, reflogs are usually enabled by default by the\n           core.logAllRefUpdates config option. The negated form\n           --no-create-reflog only overrides an earlier --create-reflog, but\n           currently does not negate the setting of core.logAllRefUpdates.\n\n       -f, --force\n           Reset <branchname> to <startpoint>, even if <branchname> exists\n           already. Without -f, git branch refuses to change an existing\n           branch. In combination with -d (or --delete), allow deleting the\n           branch irrespective of its merged status. In combination with -m\n           (or --move), allow renaming the branch even if the new branch name\n           already exists, the same applies for -c (or --copy).\n\n       -m, --move\n           Move/rename a branch and the corresponding reflog.\n\n       -M\n           Shortcut for --move --force.\n\n       -c, --copy\n           Copy a branch and the corresponding reflog.\n\n       -C\n           Shortcut for --copy --force.\n\n       --color[=<when>]\n           Color branches to highlight current, local, and remote-tracking\n           branches. The value must be always (the default), never, or auto.\n\n       --no-color\n           Turn off branch colors, even when the configuration file gives the\n           default to color output. Same as --color=never.\n\n       -i, --ignore-case\n           Sorting and filtering branches are case insensitive.\n\n       --column[=<options>], --no-column\n           Display branch listing in columns. See configuration variable\n           column.branch for option syntax.--column and --no-column without\n           options are equivalent to always and never respectively.\n\n           This option is only applicable in non-verbose mode.\n\n       -r, --remotes\n           List or delete (if used with -d) the remote-tracking branches.\n           Combine with --list to match the optional pattern(s).\n\n       -a, --all\n           List both remote-tracking branches and local branches. Combine with\n           --list to match optional pattern(s).\n\n       -l, --list\n           List branches. With optional <pattern>..., e.g.  git branch --list\n           \'maint-*\', list only the branches that match the pattern(s).\n\n       --show-current\n           Print the name of the current branch. In detached HEAD state,\n           nothing is printed.\n\n       -v, -vv, --verbose\n           When in list mode, show sha1 and commit subject line for each head,\n           along with relationship to upstream branch (if any). If given\n           twice, print the path of the linked worktree (if any) and the name\n           of the upstream branch, as well (see also git remote show\n           <remote>). Note that the current worktree\'s HEAD will not have its\n           path printed (it will always be your current directory).\n\n       -q, --quiet\n           Be more quiet when creating or deleting a branch, suppressing\n           non-error messages.\n\n       --abbrev=<n>\n           In the verbose listing that show the commit object name, show the\n           shortest prefix that is at least <n> hexdigits long that uniquely\n           refers the object. The default value is 7 and can be overridden by\n           the core.abbrev config option.\n\n       --no-abbrev\n           Display the full sha1s in the output listing rather than\n           abbreviating them.\n\n       -t, --track\n           When creating a new branch, set up branch.<name>.remote and\n           branch.<name>.merge configuration entries to mark the start-point\n           branch as "upstream" from the new branch. This configuration will\n           tell git to show the relationship between the two branches in git\n           status and git branch -v. Furthermore, it directs git pull without\n           arguments to pull from the upstream when the new branch is checked\n           out.\n\n           This behavior is the default when the start point is a\n           remote-tracking branch. Set the branch.autoSetupMerge configuration\n           variable to false if you want git switch, git checkout and git\n           branch to always behave as if --no-track were given. Set it to\n           always if you want this behavior when the start-point is either a\n           local or remote-tracking branch.\n\n       --no-track\n           Do not set up "upstream" configuration, even if the\n           branch.autoSetupMerge configuration variable is true.\n\n       --set-upstream\n           As this option had confusing syntax, it is no longer supported.\n           Please use --track or --set-upstream-to instead.\n\n       -u <upstream>, --set-upstream-to=<upstream>\n           Set up <branchname>\'s tracking information so <upstream> is\n           considered <branchname>\'s upstream branch. If no <branchname> is\n           specified, then it defaults to the current branch.\n\n       --unset-upstream\n           Remove the upstream information for <branchname>. If no branch is\n           specified it defaults to the current branch.\n\n       --edit-description\n           Open an editor and edit the text to explain what the branch is for,\n           to be used by various other commands (e.g.  format-patch,\n           request-pull, and merge (if enabled)). Multi-line explanations may\n           be used.\n\n       --contains [<commit>]\n           Only list branches which contain the specified commit (HEAD if not\n           specified). Implies --list.\n\n       --no-contains [<commit>]\n           Only list branches which don\'t contain the specified commit (HEAD\n           if not specified). Implies --list.\n\n       --merged [<commit>]\n           Only list branches whose tips are reachable from the specified\n           commit (HEAD if not specified). Implies --list.\n\n       --no-merged [<commit>]\n           Only list branches whose tips are not reachable from the specified\n           commit (HEAD if not specified). Implies --list.\n\n       <branchname>\n           The name of the branch to create or delete. The new branch name\n           must pass all checks defined by git-check-ref-format(1). Some of\n           these checks may restrict the characters allowed in a branch name.\n\n       <start-point>\n           The new branch head will point to this commit. It may be given as a\n           branch name, a commit-id, or a tag. If this option is omitted, the\n           current HEAD will be used instead.\n\n       <oldbranch>\n           The name of an existing branch to rename.\n\n       <newbranch>\n           The new name for an existing branch. The same restrictions as for\n           <branchname> apply.\n\n       --sort=<key>\n           Sort based on the key given. Prefix - to sort in descending order\n           of the value. You may use the --sort=<key> option multiple times,\n           in which case the last key becomes the primary key. The keys\n           supported are the same as those in git for-each-ref. Sort order\n           defaults to the value configured for the branch.sort variable if\n           exists, or to sorting based on the full refname (including refs/...\n           prefix). This lists detached HEAD (if present) first, then local\n           branches and finally remote-tracking branches. See git-config(1).\n\n       --points-at <object>\n           Only list branches of the given object.\n\n       --format <format>\n           A string that interpolates %(fieldname) from a branch ref being\n           shown and the object it points at. The format is the same as that\n           of git-for-each-ref(1).\n\nCONFIGURATION\n       pager.branch is only respected when listing branches, i.e., when --list\n       is used or implied. The default is to use a pager. See git-config(1).\n\nEXAMPLES\n       Start development from a known tag\n\n               $ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6\n               $ cd my2.6\n               $ git branch my2.6.14 v2.6.14   (1)\n               $ git switch my2.6.14\n\n           1. This step and the next one could be combined into a single step\n           with "checkout -b my2.6.14 v2.6.14".\n\n       Delete an unneeded branch\n\n               $ git clone git://git.kernel.org/.../git.git my.git\n               $ cd my.git\n               $ git branch -d -r origin/todo origin/html origin/man   (1)\n               $ git branch -D test                                    (2)\n\n           1. Delete the remote-tracking branches "todo", "html" and "man".\n           The next fetch or pull will create them again unless you configure\n           them not to. See git-fetch(1).\n           2. Delete the "test" branch even if the "main" branch (or\n           whichever branch is currently checked out) does not have all\n           commits from the test branch.\n\n       Listing branches from a specific remote\n\n               $ git branch -r -l \'<remote>/<pattern>\'                 (1)\n               $ git for-each-ref \'refs/remotes/<remote>/<pattern>\'    (2)\n\n           1. Using -a would conflate <remote> with any local branches you\n           happen to have been prefixed with the same <remote> pattern.\n           2. for-each-ref can take a wide range of options. See git-for-each-\n           ref(1)\n\n       Patterns will normally need quoting.\n\nNOTES\n       If you are creating a branch that you want to switch to immediately, it\n       is easier to use the "git switch" command with its -c option to do the\n       same thing with a single command.\n\n       The options --contains, --no-contains, --merged and --no-merged serve\n       four related but different purposes:\n\n       o   --contains <commit> is used to find all branches which will need\n           special attention if <commit> were to be rebased or amended, since\n           those branches contain the specified <commit>.\n\n       o   --no-contains <commit> is the inverse of that, i.e. branches that\n           don\'t contain the specified <commit>.\n\n       o   --merged is used to find all branches which can be safely deleted,\n           since those branches are fully contained by HEAD.\n\n       o   --no-merged is used to find branches which are candidates for\n           merging into HEAD, since those branches are not fully contained by\n           HEAD.\n\n       When combining multiple --contains and --no-contains filters, only\n       references that contain at least one of the --contains commits and\n       contain none of the --no-contains commits are shown.\n\n       When combining multiple --merged and --no-merged filters, only\n       references that are reachable from at least one of the --merged commits\n       and from none of the --no-merged commits are shown.\n\nSEE ALSO\n       git-check-ref-format(1), git-fetch(1), git-remote(1), "Understanding\n       history: What is a branch?"[1] in the Git User\'s Manual.\n\nGIT\n       Part of the git(1) suite\n\nNOTES\n        1. "Understanding history: What is a branch?"\n           git-htmldocs/user-manual.html#what-is-a-branch\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                     GIT-BRANCH(1)\n')),(0,a.kt)("h2",{id:"commit"},(0,a.kt)("inlineCode",{parentName:"h2"},"commit")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-COMMIT(1)                     Git Manual                     GIT-COMMIT(1)\n\n\n\nNAME\n       git-commit - \u30ea\u30dd\u30b8\u30c8\u30ea\u3078\u306e\u5909\u66f4\u3092\u8a18\u9332\u3059\u308b\n\nSYNOPSIS\n       git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n                  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n                  [-S[<keyid>]] [--] [<pathspec>...]\n\n\nDESCRIPTION\n       \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u73fe\u5728\u306e\u5185\u5bb9\u3068\u5909\u66f4\u3092\u8aac\u660e\u3059\u308b\u6307\u5b9a\u3055\u308c\u305f\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u542b\u3080\u65b0\u3057\u3044\u30b3\u30df\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n       \u65b0\u3057\u3044\u30b3\u30df\u30c3\u30c8\u306f HEAD \u306e\u76f4\u63a5\u306e\u5b50\u3067\u3042\u308a\u3001\u901a\u5e38\u306f\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u3067\u3042\u308a\u3001\n       \u30d6\u30e9\u30f3\u30c1\u306f\u305d\u308c\u3092\u6307\u3059\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\uff08\u30d6\u30e9\u30f3\u30c1\u304c\u4f5c\u696d\u30c4\u30ea\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3092\u9664\u304d\u307e\u3059\u3002\n       \u3053\u306e\u5834\u5408\u3001HEAD \u306f git-checkout(1) \u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u300c\u30c7\u30bf\u30c3\u30c1\u300d\u3055\u308c\u307e\u3059\uff09\u3002\n\n       \u30b3\u30df\u30c3\u30c8\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\uff1a\n           \n        1. commit\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001git-add(1) \u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5909\u66f4\u3092\u6bb5\u968e\u7684\u306b\u300c\u8ffd\u52a0\u300d\u3057\u307e\u3059\n           \uff08\u6ce8\uff1a\u5909\u66f4\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u300c\u8ffd\u52a0\u300d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002\n           \n        2. commit \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001git-rm(1) \u3092\u4f7f\u7528\u3057\u3066\n           \u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n           \n        3. \u30d5\u30a1\u30a4\u30eb\u3092 commit \u30b3\u30de\u30f3\u30c9\u306e\u5f15\u6570\u3068\u3057\u3066\u30ea\u30b9\u30c8\u3059\u308b\uff08--interactive \u307e\u305f\u306f --patch \u30b9\u30a4\u30c3\u30c1\u306a\u3057\uff09\u3002\n           \u3053\u306e\u5834\u5408\u3001\u30b3\u30df\u30c3\u30c8\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u3055\u308c\u305f\u5909\u66f4\u3092\u7121\u8996\u3057\u3001\n           \u4ee3\u308f\u308a\u306b\u30ea\u30b9\u30c8\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8a18\u9332\u3057\u307e\u3059\n           \uff08\u3053\u308c\u306f\u3059\u3067\u306b Git \u306b\u77e5\u3089\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002\n\n        4. \u30b3\u30df\u30c3\u30c8\u30b3\u30de\u30f3\u30c9\u3067 -a \u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u7528\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u65e2\u77e5\u306e\u30d5\u30a1\u30a4\u30eb\n           \uff08\u3064\u307e\u308a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u65e2\u306b\u30ea\u30b9\u30c8\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\uff09\n           \u304b\u3089\u306e\u5909\u66f4\u3092\u81ea\u52d5\u7684\u306b\u300cadd\u300d\u3057\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\n           \u81ea\u52d5\u7684\u306b\u300crm\u300d\u3057\u307e\u3059\u3002\n           \u6b21\u306b\u5b9f\u969b\u306e\u30b3\u30df\u30c3\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n           \n        5. --interactive \u307e\u305f\u306f --patch \u30b9\u30a4\u30c3\u30c1\u3092 commit \u30b3\u30de\u30f3\u30c9\u3068\u3068\u3082\u306b\u4f7f\u7528\u3057\u3066\u3001\n           \u64cd\u4f5c\u3092\u5b8c\u4e86\u3059\u308b\u524d\u306b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u5185\u5bb9\u306b\u52a0\u3048\u3066\u3001\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u30cf\u30f3\u30af\u3092\n           \u30b3\u30df\u30c3\u30c8\u306e\u4e00\u90e8\u306b\u3059\u308b\u304b\u30921\u3064\u305a\u3064\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n           \u3053\u308c\u3089\u306e\u30e2\u30fc\u30c9\u306e\u64cd\u4f5c\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001git-add(1) \u306e\u300cInteractive Mode\u300d\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n       \n       --dry-run \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30bb\u30c3\u30c8\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30d1\u30b9\uff09\u3092\n       \u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u30b3\u30df\u30c3\u30c8\u3067\u4e0a\u8a18\u306e\u3044\u305a\u308c\u304b\u306b\u542b\u307e\u308c\u308b\u3082\u306e\u306e\u6982\u8981\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n       \n       \u30b3\u30df\u30c3\u30c8\u3092\u884c\u3044\u3001\u305d\u306e\u76f4\u5f8c\u306b\u9593\u9055\u3044\u3092\u898b\u3064\u3051\u305f\u5834\u5408\u306f\u3001git reset \u3092\u4f7f\u7528\u3057\u3066\u56de\u5fa9\u3067\u304d\u307e\u3059\u3002\n\nOPTIONS\n       -a, --all\n           Tell the command to automatically stage files that have been\n           modified and deleted, but new files you have not told Git about are\n           not affected.\n\n       -p, --patch\n           Use the interactive patch selection interface to chose which\n           changes to commit. See git-add(1) for details.\n\n       -C <commit>, --reuse-message=<commit>\n           Take an existing commit object, and reuse the log message and the\n           authorship information (including the timestamp) when creating the\n           commit.\n\n       -c <commit>, --reedit-message=<commit>\n           Like -C, but with -c the editor is invoked, so that the user can\n           further edit the commit message.\n\n       --fixup=<commit>\n           Construct a commit message for use with rebase --autosquash. The\n           commit message will be the subject line from the specified commit\n           with a prefix of "fixup! ". See git-rebase(1) for details.\n\n       --squash=<commit>\n           Construct a commit message for use with rebase --autosquash. The\n           commit message subject line is taken from the specified commit with\n           a prefix of "squash! ". Can be used with additional commit message\n           options (-m/-c/-C/-F). See git-rebase(1) for details.\n\n       --reset-author\n           When used with -C/-c/--amend options, or when committing after a\n           conflicting cherry-pick, declare that the authorship of the\n           resulting commit now belongs to the committer. This also renews the\n           author timestamp.\n\n       --short\n           When doing a dry-run, give the output in the short-format. See git-\n           status(1) for details. Implies --dry-run.\n\n       --branch\n           Show the branch and tracking info even in short-format.\n\n       --porcelain\n           When doing a dry-run, give the output in a porcelain-ready format.\n           See git-status(1) for details. Implies --dry-run.\n\n       --long\n           When doing a dry-run, give the output in the long-format. Implies\n           --dry-run.\n\n       -z, --null\n           When showing short or porcelain status output, print the filename\n           verbatim and terminate the entries with NUL, instead of LF. If no\n           format is given, implies the --porcelain output format. Without the\n           -z option, filenames with "unusual" characters are quoted as\n           explained for the configuration variable core.quotePath (see git-\n           config(1)).\n\n       -F <file>, --file=<file>\n           Take the commit message from the given file. Use - to read the\n           message from the standard input.\n\n       --author=<author>\n           Override the commit author. Specify an explicit author using the\n           standard A U Thor <author@example.com> format. Otherwise <author>\n           is assumed to be a pattern and is used to search for an existing\n           commit by that author (i.e. rev-list --all -i --author=<author>);\n           the commit author is then copied from the first such commit found.\n\n       --date=<date>\n           Override the author date used in the commit.\n\n       -m <msg>, --message=<msg>\n           Use the given <msg> as the commit message. If multiple -m options\n           are given, their values are concatenated as separate paragraphs.\n\n           The -m option is mutually exclusive with -c, -C, and -F.\n\n       -t <file>, --template=<file>\n           When editing the commit message, start the editor with the contents\n           in the given file. The commit.template configuration variable is\n           often used to give this option implicitly to the command. This\n           mechanism can be used by projects that want to guide participants\n           with some hints on what to write in the message in what order. If\n           the user exits the editor without editing the message, the commit\n           is aborted. This has no effect when a message is given by other\n           means, e.g. with the -m or -F options.\n\n       -s, --signoff, --no-signoff\n           Add a Signed-off-by trailer by the committer at the end of the\n           commit log message. The meaning of a signoff depends on the project\n           to which you\'re committing. For example, it may certify that the\n           committer has the rights to submit the work under the project\'s\n           license or agrees to some contributor representation, such as a\n           Developer Certificate of Origin. (See\n           http://developercertificate.org for the one used by the Linux\n           kernel and Git projects.) Consult the documentation or leadership\n           of the project to which you\'re contributing to understand how the\n           signoffs are used in that project.\n\n           The --no-signoff option can be used to countermand an earlier\n           --signoff option on the command line.\n\n       -n, --no-verify\n           This option bypasses the pre-commit and commit-msg hooks. See also\n           githooks(5).\n\n       --allow-empty\n           Usually recording a commit that has the exact same tree as its sole\n           parent commit is a mistake, and the command prevents you from\n           making such a commit. This option bypasses the safety, and is\n           primarily for use by foreign SCM interface scripts.\n\n       --allow-empty-message\n           Like --allow-empty this command is primarily for use by foreign SCM\n           interface scripts. It allows you to create a commit with an empty\n           commit message without using plumbing commands like git-commit-\n           tree(1).\n\n       --cleanup=<mode>\n           This option determines how the supplied commit message should be\n           cleaned up before committing. The <mode> can be strip, whitespace,\n           verbatim, scissors or default.\n\n           strip\n               Strip leading and trailing empty lines, trailing whitespace,\n               commentary and collapse consecutive empty lines.\n\n           whitespace\n               Same as strip except #commentary is not removed.\n\n           verbatim\n               Do not change the message at all.\n\n           scissors\n               Same as whitespace except that everything from (and including)\n               the line found below is truncated, if the message is to be\n               edited. "#" can be customized with core.commentChar.\n\n                   # ------------------------ >8 ------------------------\n\n           default\n               Same as strip if the message is to be edited. Otherwise\n               whitespace.\n\n           The default can be changed by the commit.cleanup configuration\n           variable (see git-config(1)).\n\n       -e, --edit\n           The message taken from file with -F, command line with -m, and from\n           commit object with -C are usually used as the commit log message\n           unmodified. This option lets you further edit the message taken\n           from these sources.\n\n       --no-edit\n           Use the selected commit message without launching an editor. For\n           example, git commit --amend --no-edit amends a commit without\n           changing its commit message.\n\n       --amend\n           Replace the tip of the current branch by creating a new commit. The\n           recorded tree is prepared as usual (including the effect of the -i\n           and -o options and explicit pathspec), and the message from the\n           original commit is used as the starting point, instead of an empty\n           message, when no other message is specified from the command line\n           via options such as -m, -F, -c, etc. The new commit has the same\n           parents and author as the current one (the --reset-author option\n           can countermand this).\n\n           It is a rough equivalent for:\n\n                       $ git reset --soft HEAD^\n                       $ ... do something else to come up with the right tree ...\n                       $ git commit -c ORIG_HEAD\n\n           but can be used to amend a merge commit.\n\n           You should understand the implications of rewriting history if you\n           amend a commit that has already been published. (See the\n           "RECOVERING FROM UPSTREAM REBASE" section in git-rebase(1).)\n\n       --no-post-rewrite\n           Bypass the post-rewrite hook.\n\n       -i, --include\n           Before making a commit out of staged contents so far, stage the\n           contents of paths given on the command line as well. This is\n           usually not what you want unless you are concluding a conflicted\n           merge.\n\n       -o, --only\n           Make a commit by taking the updated working tree contents of the\n           paths specified on the command line, disregarding any contents that\n           have been staged for other paths. This is the default mode of\n           operation of git commit if any paths are given on the command line,\n           in which case this option can be omitted. If this option is\n           specified together with --amend, then no paths need to be\n           specified, which can be used to amend the last commit without\n           committing changes that have already been staged. If used together\n           with --allow-empty paths are also not required, and an empty commit\n           will be created.\n\n       --pathspec-from-file=<file>\n           Pathspec is passed in <file> instead of commandline args. If <file>\n           is exactly - then standard input is used. Pathspec elements are\n           separated by LF or CR/LF. Pathspec elements can be quoted as\n           explained for the configuration variable core.quotePath (see git-\n           config(1)). See also --pathspec-file-nul and global\n           --literal-pathspecs.\n\n       --pathspec-file-nul\n           Only meaningful with --pathspec-from-file. Pathspec elements are\n           separated with NUL character and all other characters are taken\n           literally (including newlines and quotes).\n\n       -u[<mode>], --untracked-files[=<mode>]\n           Show untracked files.\n\n           The mode parameter is optional (defaults to all), and is used to\n           specify the handling of untracked files; when -u is not used, the\n           default is normal, i.e. show untracked files and directories.\n\n           The possible options are:\n\n           o   no - Show no untracked files\n\n           o   normal - Shows untracked files and directories\n\n           o   all - Also shows individual files in untracked directories.\n\n           The default can be changed using the status.showUntrackedFiles\n           configuration variable documented in git-config(1).\n\n       -v, --verbose\n           Show unified diff between the HEAD commit and what would be\n           committed at the bottom of the commit message template to help the\n           user describe the commit by reminding what changes the commit has.\n           Note that this diff output doesn\'t have its lines prefixed with #.\n           This diff will not be a part of the commit message. See the\n           commit.verbose configuration variable in git-config(1).\n\n           If specified twice, show in addition the unified diff between what\n           would be committed and the worktree files, i.e. the unstaged\n           changes to tracked files.\n\n       -q, --quiet\n           Suppress commit summary message.\n\n       --dry-run\n           Do not create a commit, but show a list of paths that are to be\n           committed, paths with local changes that will be left uncommitted\n           and paths that are untracked.\n\n       --status\n           Include the output of git-status(1) in the commit message template\n           when using an editor to prepare the commit message. Defaults to on,\n           but can be used to override configuration variable commit.status.\n\n       --no-status\n           Do not include the output of git-status(1) in the commit message\n           template when using an editor to prepare the default commit\n           message.\n\n       -S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign\n           GPG-sign commits. The keyid argument is optional and defaults to\n           the committer identity; if specified, it must be stuck to the\n           option without a space.  --no-gpg-sign is useful to countermand\n           both commit.gpgSign configuration variable, and earlier --gpg-sign.\n\n       --\n           Do not interpret any more arguments as options.\n\n       <pathspec>...\n           When pathspec is given on the command line, commit the contents of\n           the files that match the pathspec without recording the changes\n           already added to the index. The contents of these files are also\n           staged for the next commit on top of what have been staged before.\n\n           For more details, see the pathspec entry in gitglossary(7).\n\nEXAMPLES\n       When recording your own work, the contents of modified files in your\n       working tree are temporarily stored to a staging area called the\n       "index" with git add. A file can be reverted back, only in the index\n       but not in the working tree, to that of the last commit with git\n       restore --staged <file>, which effectively reverts git add and prevents\n       the changes to this file from participating in the next commit. After\n       building the state to be committed incrementally with these commands,\n       git commit (without any pathname parameter) is used to record what has\n       been staged so far. This is the most basic form of the command. An\n       example:\n\n           $ edit hello.c\n           $ git rm goodbye.c\n           $ git add hello.c\n           $ git commit\n\n\n       Instead of staging files after each individual change, you can tell git\n       commit to notice the changes to the files whose contents are tracked in\n       your working tree and do corresponding git add and git rm for you. That\n       is, this example does the same as the earlier example if there is no\n       other change in your working tree:\n\n           $ edit hello.c\n           $ rm goodbye.c\n           $ git commit -a\n\n\n       The command git commit -a first looks at your working tree, notices\n       that you have modified hello.c and removed goodbye.c, and performs\n       necessary git add and git rm for you.\n\n       After staging changes to many files, you can alter the order the\n       changes are recorded in, by giving pathnames to git commit. When\n       pathnames are given, the command makes a commit that only records the\n       changes made to the named paths:\n\n           $ edit hello.c hello.h\n           $ git add hello.c hello.h\n           $ edit Makefile\n           $ git commit Makefile\n\n\n       This makes a commit that records the modification to Makefile. The\n       changes staged for hello.c and hello.h are not included in the\n       resulting commit. However, their changes are not lost -- they are still\n       staged and merely held back. After the above sequence, if you do:\n\n           $ git commit\n\n\n       this second commit would record the changes to hello.c and hello.h as\n       expected.\n\n       After a merge (initiated by git merge or git pull) stops because of\n       conflicts, cleanly merged paths are already staged to be committed for\n       you, and paths that conflicted are left in unmerged state. You would\n       have to first check which paths are conflicting with git status and\n       after fixing them manually in your working tree, you would stage the\n       result as usual with git add:\n\n           $ git status | grep unmerged\n           unmerged: hello.c\n           $ edit hello.c\n           $ git add hello.c\n\n\n       After resolving conflicts and staging the result, git ls-files -u would\n       stop mentioning the conflicted path. When you are done, run git commit\n       to finally record the merge:\n\n           $ git commit\n\n\n       As with the case to record your own changes, you can use -a option to\n       save typing. One difference is that during a merge resolution, you\n       cannot use git commit with pathnames to alter the order the changes are\n       committed, because the merge should be recorded as a single commit. In\n       fact, the command refuses to run when given pathnames (but see -i\n       option).\n\nCOMMIT INFORMATION\n       Author and committer information is taken from the following\n       environment variables, if set:\n\n           GIT_AUTHOR_NAME\n           GIT_AUTHOR_EMAIL\n           GIT_AUTHOR_DATE\n           GIT_COMMITTER_NAME\n           GIT_COMMITTER_EMAIL\n           GIT_COMMITTER_DATE\n\n       (nb "<", ">" and "\\n"s are stripped)\n\n       The author and committer names are by convention some form of a\n       personal name (that is, the name by which other humans refer to you),\n       although Git does not enforce or require any particular form. Arbitrary\n       Unicode may be used, subject to the constraints listed above. This name\n       has no effect on authentication; for that, see the credential.username\n       variable in git-config(1).\n\n       In case (some of) these environment variables are not set, the\n       information is taken from the configuration items user.name and\n       user.email, or, if not present, the environment variable EMAIL, or, if\n       that is not set, system user name and the hostname used for outgoing\n       mail (taken from /etc/mailname and falling back to the fully qualified\n       hostname when that file does not exist).\n\n       The author.name and committer.name and their corresponding email\n       options override user.name and user.email if set and are overridden\n       themselves by the environment variables.\n\n       The typical usage is to set just the user.name and user.email\n       variables; the other options are provided for more complex use cases.\n\nDATE FORMATS\n       The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables and the\n       --date option support the following date formats:\n\n       Git internal format\n           It is <unix timestamp> <time zone offset>, where <unix timestamp>\n           is the number of seconds since the UNIX epoch.  <time zone offset>\n           is a positive or negative offset from UTC. For example CET (which\n           is 1 hour ahead of UTC) is +0100.\n\n       RFC 2822\n           The standard email format as described by RFC 2822, for example\n           Thu, 07 Apr 2005 22:13:13 +0200.\n\n       ISO 8601\n           Time and date specified by the ISO 8601 standard, for example\n           2005-04-07T22:13:13. The parser accepts a space instead of the T\n           character as well. Fractional parts of a second will be ignored,\n           for example 2005-04-07T22:13:13.019 will be treated as\n           2005-04-07T22:13:13.\n\n               Note\n               In addition, the date part is accepted in the following\n               formats: YYYY.MM.DD, MM/DD/YYYY and DD.MM.YYYY.\n\nDISCUSSION\n       Though not required, it\'s a good idea to begin the commit message with\n       a single short (less than 50 character) line summarizing the change,\n       followed by a blank line and then a more thorough description. The text\n       up to the first blank line in a commit message is treated as the commit\n       title, and that title is used throughout Git. For example, git-format-\n       patch(1) turns a commit into email, and it uses the title on the\n       Subject line and the rest of the commit in the body.\n\n       Git is to some extent character encoding agnostic.\n\n       o   The contents of the blob objects are uninterpreted sequences of\n           bytes. There is no encoding translation at the core level.\n\n       o   Path names are encoded in UTF-8 normalization form C. This applies\n           to tree objects, the index file, ref names, as well as path names\n           in command line arguments, environment variables and config files\n           (.git/config (see git-config(1)), gitignore(5), gitattributes(5)\n           and gitmodules(5)).\n\n           Note that Git at the core level treats path names simply as\n           sequences of non-NUL bytes, there are no path name encoding\n           conversions (except on Mac and Windows). Therefore, using non-ASCII\n           path names will mostly work even on platforms and file systems that\n           use legacy extended ASCII encodings. However, repositories created\n           on such systems will not work properly on UTF-8-based systems (e.g.\n           Linux, Mac, Windows) and vice versa. Additionally, many Git-based\n           tools simply assume path names to be UTF-8 and will fail to display\n           other encodings correctly.\n\n       o   Commit log messages are typically encoded in UTF-8, but other\n           extended ASCII encodings are also supported. This includes\n           ISO-8859-x, CP125x and many others, but not UTF-16/32, EBCDIC and\n           CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).\n\n       Although we encourage that the commit log messages are encoded in\n       UTF-8, both the core and Git Porcelain are designed not to force UTF-8\n       on projects. If all participants of a particular project find it more\n       convenient to use legacy encodings, Git does not forbid it. However,\n       there are a few things to keep in mind.\n\n        1. git commit and git commit-tree issues a warning if the commit log\n           message given to it does not look like a valid UTF-8 string, unless\n           you explicitly say your project uses a legacy encoding. The way to\n           say this is to have i18n.commitencoding in .git/config file, like\n           this:\n\n               [i18n]\n                       commitEncoding = ISO-8859-1\n\n           Commit objects created with the above setting record the value of\n           i18n.commitEncoding in its encoding header. This is to help other\n           people who look at them later. Lack of this header implies that the\n           commit log message is encoded in UTF-8.\n\n        2. git log, git show, git blame and friends look at the encoding\n           header of a commit object, and try to re-code the log message into\n           UTF-8 unless otherwise specified. You can specify the desired\n           output encoding with i18n.logOutputEncoding in .git/config file,\n           like this:\n\n               [i18n]\n                       logOutputEncoding = ISO-8859-1\n\n           If you do not have this configuration variable, the value of\n           i18n.commitEncoding is used instead.\n\n       Note that we deliberately chose not to re-code the commit log message\n       when a commit is made to force UTF-8 at the commit object level,\n       because re-coding to UTF-8 is not necessarily a reversible operation.\n\nENVIRONMENT AND CONFIGURATION VARIABLES\n       The editor used to edit the commit log message will be chosen from the\n       GIT_EDITOR environment variable, the core.editor configuration\n       variable, the VISUAL environment variable, or the EDITOR environment\n       variable (in that order). See git-var(1) for details.\n\nHOOKS\n       This command can run commit-msg, prepare-commit-msg, pre-commit,\n       post-commit and post-rewrite hooks. See githooks(5) for more\n       information.\n\nFILES\n       $GIT_DIR/COMMIT_EDITMSG\n           This file contains the commit message of a commit in progress. If\n           git commit exits due to an error before creating a commit, any\n           commit message that has been provided by the user (e.g., in an\n           editor session) will be available in this file, but will be\n           overwritten by the next invocation of git commit.\n\nSEE ALSO\n       git-add(1), git-rm(1), git-mv(1), git-merge(1), git-commit-tree(1)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                     GIT-COMMIT(1)\n')),(0,a.kt)("h2",{id:"merge"},(0,a.kt)("inlineCode",{parentName:"h2"},"merge")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-MERGE(1)                      Git Manual                      GIT-MERGE(1)\n\n\n\nNAME\n       git-merge - 2\u3064\u4ee5\u4e0a\u306e\u958b\u767a\u5c65\u6b74\u3092\u7d50\u5408\u3059\u308b\n\nSYNOPSIS\n       git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n               [--no-verify] [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]\n               [--[no-]allow-unrelated-histories]\n               [--[no-]rerere-autoupdate] [-m <msg>] [-F <file>] [<commit>...]\n       git merge (--continue | --abort | --quit)\n\n\nDESCRIPTION\n       \u540d\u524d\u4ed8\u304d\u30b3\u30df\u30c3\u30c8\u304b\u3089\u306e\u5909\u66f4\u3092\uff08\u5c65\u6b74\u304c\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u5206\u5c90\u3057\u305f\u305f\u3081\uff09\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\n       \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001git pull \u304c\u5225\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u306e\u5909\u66f4\u3092\u7d44\u307f\u8fbc\u3080\u305f\u3081\u306b\u4f7f\u7528\u3057\u3001\n       \u624b\u52d5\u30671\u3064\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u5225\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u5909\u66f4\u3092\u30de\u30fc\u30b8\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n       \n       \u6b21\u306e\u5c65\u6b74\u304c\u5b58\u5728\u3057\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u304c\u300cmain\u300d\u3067\u3042\u308b\u3068\u60f3\u5b9a\u3057\u307e\u3059\uff1a\n\n                     A---B---C topic\n                    /\n               D---E---F---G main\n\n       \n       \u6b21\u306b\u3001\u300cgit merge topic\u300d\u306f\u3001\u30de\u30b9\u30bf\u30fc\uff08\u3064\u307e\u308a\u3001E\uff09\u304b\u3089\u5206\u5c90\u3057\u3066\u304b\u3089\u73fe\u5728\u306e\u30b3\u30df\u30c3\u30c8\uff08C\uff09\u307e\u3067\u30de\u30b9\u30bf\u30fc\u306e\n       \u4e0a\u306b\u3042\u308b topic \u30d6\u30e9\u30f3\u30c1\u3067\u884c\u308f\u308c\u305f\u5909\u66f4\u3092\u518d\u751f\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u30012\u3064\u306e\u89aa\u30b3\u30df\u30c3\u30c8\u306e\u540d\u524d\u3068\n       \u5909\u66f4\u3092\u8aac\u660e\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u5171\u306b\u65b0\u3057\u3044\u30b3\u30df\u30c3\u30c8\u306b\u8a18\u9332\u3057\u307e\u3059\u3002\n\n                     A---B---C topic\n                    /         \\\n               D---E---F---G---H main\n\n       \n       2\u756a\u76ee\u306e\u69cb\u6587\uff08\u300c"git merge --abort\u300d\uff09\u306f\u3001\u30de\u30fc\u30b8\u306b\u3088\u3063\u3066\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u304c\u767a\u751f\u3057\u305f\u5f8c\u306b\u306e\u307f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n       git merge --abort \u306f\u30de\u30fc\u30b8\u30d7\u30ed\u30bb\u30b9\u3092\u4e2d\u6b62\u3057\u3001\u30de\u30fc\u30b8\u524d\u306e\u72b6\u614b\u3092\u518d\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\n       \u305f\u3060\u3057\u3001\u30de\u30fc\u30b8\u306e\u958b\u59cb\u6642\u306b\u30b3\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u66f4\u304c\u3042\u3063\u305f\u5834\u5408\uff08\u7279\u306b\u3001\u30de\u30fc\u30b8\u306e\u958b\u59cb\u5f8c\u306b\u305d\u308c\u3089\u306e\u5909\u66f4\u304c\n       \u3055\u3089\u306b\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\uff09\u3001git merge --abort \u306f\u3001\u5143\u306e\uff08\u30de\u30fc\u30b8\u524d\u306e\uff09\u5909\u66f4\u3092\u518d\u69cb\u7bc9\u3067\u304d\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n       \u3057\u305f\u304c\u3063\u3066\uff1a\n       \n       \u8b66\u544a\uff1a\u91cd\u8981\u306a\u30b3\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u66f4\u3092\u4f7f\u7528\u3057\u3066 git merge \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u306f\u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u3002\n       \u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u5143\u306b\u623b\u3059\u306e\u304c\u96e3\u3057\u3044\u72b6\u614b\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n       \n       3\u756a\u76ee\u306e\u69cb\u6587\uff08\u300cgit merge --continue\u300d\uff09\u306f\u3001\u30de\u30fc\u30b8\u306b\u3088\u3063\u3066\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u304c\u767a\u751f\u3057\u305f\u5f8c\u306b\u306e\u307f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n\nOPTIONS\n       --commit, --no-commit\n           Perform the merge and commit the result. This option can be used to\n           override --no-commit.\n\n           With --no-commit perform the merge and stop just before creating a\n           merge commit, to give the user a chance to inspect and further\n           tweak the merge result before committing.\n\n           Note that fast-forward updates do not create a merge commit and\n           therefore there is no way to stop those merges with --no-commit.\n           Thus, if you want to ensure your branch is not changed or updated\n           by the merge command, use --no-ff with --no-commit.\n\n       --edit, -e, --no-edit\n           Invoke an editor before committing successful mechanical merge to\n           further edit the auto-generated merge message, so that the user can\n           explain and justify the merge. The --no-edit option can be used to\n           accept the auto-generated message (this is generally discouraged).\n           The --edit (or -e) option is still useful if you are giving a draft\n           message with the -m option from the command line and want to edit\n           it in the editor.\n\n           Older scripts may depend on the historical behaviour of not\n           allowing the user to edit the merge log message. They will see an\n           editor opened when they run git merge. To make it easier to adjust\n           such scripts to the updated behaviour, the environment variable\n           GIT_MERGE_AUTOEDIT can be set to no at the beginning of them.\n\n       --cleanup=<mode>\n           This option determines how the merge message will be cleaned up\n           before committing. See git-commit(1) for more details. In addition,\n           if the <mode> is given a value of scissors, scissors will be\n           appended to MERGE_MSG before being passed on to the commit\n           machinery in the case of a merge conflict.\n\n       --ff, --no-ff, --ff-only\n           Specifies how a merge is handled when the merged-in history is\n           already a descendant of the current history.  --ff is the default\n           unless merging an annotated (and possibly signed) tag that is not\n           stored in its natural place in the refs/tags/ hierarchy, in which\n           case --no-ff is assumed.\n\n           With --ff, when possible resolve the merge as a fast-forward (only\n           update the branch pointer to match the merged branch; do not create\n           a merge commit). When not possible (when the merged-in history is\n           not a descendant of the current history), create a merge commit.\n\n           With --no-ff, create a merge commit in all cases, even when the\n           merge could instead be resolved as a fast-forward.\n\n           With --ff-only, resolve the merge as a fast-forward when possible.\n           When not possible, refuse to merge and exit with a non-zero status.\n\n       -S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign\n           GPG-sign the resulting merge commit. The keyid argument is optional\n           and defaults to the committer identity; if specified, it must be\n           stuck to the option without a space.  --no-gpg-sign is useful to\n           countermand both commit.gpgSign configuration variable, and earlier\n           --gpg-sign.\n\n       --log[=<n>], --no-log\n           In addition to branch names, populate the log message with one-line\n           descriptions from at most <n> actual commits that are being merged.\n           See also git-fmt-merge-msg(1).\n\n           With --no-log do not list one-line descriptions from the actual\n           commits being merged.\n\n       --signoff, --no-signoff\n           Add a Signed-off-by trailer by the committer at the end of the\n           commit log message. The meaning of a signoff depends on the project\n           to which you\'re committing. For example, it may certify that the\n           committer has the rights to submit the work under the project\'s\n           license or agrees to some contributor representation, such as a\n           Developer Certificate of Origin. (See\n           http://developercertificate.org for the one used by the Linux\n           kernel and Git projects.) Consult the documentation or leadership\n           of the project to which you\'re contributing to understand how the\n           signoffs are used in that project.\n\n           The --no-signoff option can be used to countermand an earlier\n           --signoff option on the command line.\n\n       --stat, -n, --no-stat\n           Show a diffstat at the end of the merge. The diffstat is also\n           controlled by the configuration option merge.stat.\n\n           With -n or --no-stat do not show a diffstat at the end of the\n           merge.\n\n       --squash, --no-squash\n           Produce the working tree and index state as if a real merge\n           happened (except for the merge information), but do not actually\n           make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to\n           cause the next git commit command to create a merge commit). This\n           allows you to create a single commit on top of the current branch\n           whose effect is the same as merging another branch (or more in case\n           of an octopus).\n\n           With --no-squash perform the merge and commit the result. This\n           option can be used to override --squash.\n\n           With --squash, --commit is not allowed, and will fail.\n\n       --no-verify\n           This option bypasses the pre-merge and commit-msg hooks. See also\n           githooks(5).\n\n       -s <strategy>, --strategy=<strategy>\n           Use the given merge strategy; can be supplied more than once to\n           specify them in the order they should be tried. If there is no -s\n           option, a built-in list of strategies is used instead (git\n           merge-recursive when merging a single head, git merge-octopus\n           otherwise).\n\n       -X <option>, --strategy-option=<option>\n           Pass merge strategy specific option through to the merge strategy.\n\n       --verify-signatures, --no-verify-signatures\n           Verify that the tip commit of the side branch being merged is\n           signed with a valid key, i.e. a key that has a valid uid: in the\n           default trust model, this means the signing key has been signed by\n           a trusted key. If the tip commit of the side branch is not signed\n           with a valid key, the merge is aborted.\n\n       --summary, --no-summary\n           Synonyms to --stat and --no-stat; these are deprecated and will be\n           removed in the future.\n\n       -q, --quiet\n           Operate quietly. Implies --no-progress.\n\n       -v, --verbose\n           Be verbose.\n\n       --progress, --no-progress\n           Turn progress on/off explicitly. If neither is specified, progress\n           is shown if standard error is connected to a terminal. Note that\n           not all merge strategies may support progress reporting.\n\n       --autostash, --no-autostash\n           Automatically create a temporary stash entry before the operation\n           begins, and apply it after the operation ends. This means that you\n           can run the operation on a dirty worktree. However, use with care:\n           the final stash application after a successful merge might result\n           in non-trivial conflicts.\n\n       --allow-unrelated-histories\n           By default, git merge command refuses to merge histories that do\n           not share a common ancestor. This option can be used to override\n           this safety when merging histories of two projects that started\n           their lives independently. As that is a very rare occasion, no\n           configuration variable to enable this by default exists and will\n           not be added.\n\n       -m <msg>\n           Set the commit message to be used for the merge commit (in case one\n           is created).\n\n           If --log is specified, a shortlog of the commits being merged will\n           be appended to the specified message.\n\n           The git fmt-merge-msg command can be used to give a good default\n           for automated git merge invocations. The automated message can\n           include the branch description.\n\n       -F <file>, --file=<file>\n           Read the commit message to be used for the merge commit (in case\n           one is created).\n\n           If --log is specified, a shortlog of the commits being merged will\n           be appended to the specified message.\n\n       --rerere-autoupdate, --no-rerere-autoupdate\n           Allow the rerere mechanism to update the index with the result of\n           auto-conflict resolution if possible.\n\n       --overwrite-ignore, --no-overwrite-ignore\n           Silently overwrite ignored files from the merge result. This is the\n           default behavior. Use --no-overwrite-ignore to abort.\n\n       --abort\n           Abort the current conflict resolution process, and try to\n           reconstruct the pre-merge state. If an autostash entry is present,\n           apply it to the worktree.\n\n           If there were uncommitted worktree changes present when the merge\n           started, git merge --abort will in some cases be unable to\n           reconstruct these changes. It is therefore recommended to always\n           commit or stash your changes before running git merge.\n\n           git merge --abort is equivalent to git reset --merge when\n           MERGE_HEAD is present unless MERGE_AUTOSTASH is also present in\n           which case git merge --abort applies the stash entry to the\n           worktree whereas git reset --merge will save the stashed changes in\n           the stash list.\n\n       --quit\n           Forget about the current merge in progress. Leave the index and the\n           working tree as-is. If MERGE_AUTOSTASH is present, the stash entry\n           will be saved to the stash list.\n\n       --continue\n           After a git merge stops due to conflicts you can conclude the merge\n           by running git merge --continue (see "HOW TO RESOLVE CONFLICTS"\n           section below).\n\n       <commit>...\n           Commits, usually other branch heads, to merge into our branch.\n           Specifying more than one commit will create a merge with more than\n           two parents (affectionately called an Octopus merge).\n\n           If no commit is given from the command line, merge the\n           remote-tracking branches that the current branch is configured to\n           use as its upstream. See also the configuration section of this\n           manual page.\n\n           When FETCH_HEAD (and no other commit) is specified, the branches\n           recorded in the .git/FETCH_HEAD file by the previous invocation of\n           git fetch for merging are merged to the current branch.\n\nPRE-MERGE CHECKS\n       Before applying outside changes, you should get your own work in good\n       shape and committed locally, so it will not be clobbered if there are\n       conflicts. See also git-stash(1). git pull and git merge will stop\n       without doing anything when local uncommitted changes overlap with\n       files that git pull/git merge may need to update.\n\n       To avoid recording unrelated changes in the merge commit, git pull and\n       git merge will also abort if there are any changes registered in the\n       index relative to the HEAD commit. (Special narrow exceptions to this\n       rule may exist depending on which merge strategy is in use, but\n       generally, the index must match HEAD.)\n\n       If all named commits are already ancestors of HEAD, git merge will exit\n       early with the message "Already up to date."\n\nFAST-FORWARD MERGE\n       Often the current branch head is an ancestor of the named commit. This\n       is the most common case especially when invoked from git pull: you are\n       tracking an upstream repository, you have committed no local changes,\n       and now you want to update to a newer upstream revision. In this case,\n       a new commit is not needed to store the combined history; instead, the\n       HEAD (along with the index) is updated to point at the named commit,\n       without creating an extra merge commit.\n\n       This behavior can be suppressed with the --no-ff option.\n\nTRUE MERGE\n       Except in a fast-forward merge (see above), the branches to be merged\n       must be tied together by a merge commit that has both of them as its\n       parents.\n\n       A merged version reconciling the changes from all branches to be merged\n       is committed, and your HEAD, index, and working tree are updated to it.\n       It is possible to have modifications in the working tree as long as\n       they do not overlap; the update will preserve them.\n\n       When it is not obvious how to reconcile the changes, the following\n       happens:\n\n        1. The HEAD pointer stays the same.\n\n        2. The MERGE_HEAD ref is set to point to the other branch head.\n\n        3. Paths that merged cleanly are updated both in the index file and in\n           your working tree.\n\n        4. For conflicting paths, the index file records up to three versions:\n           stage 1 stores the version from the common ancestor, stage 2 from\n           HEAD, and stage 3 from MERGE_HEAD (you can inspect the stages with\n           git ls-files -u). The working tree files contain the result of the\n           "merge" program; i.e. 3-way merge results with familiar conflict\n           markers <<< === >>>.\n\n        5. No other changes are made. In particular, the local modifications\n           you had before you started merge will stay the same and the index\n           entries for them stay as they were, i.e. matching HEAD.\n\n       If you tried a merge which resulted in complex conflicts and want to\n       start over, you can recover with git merge --abort.\n\nMERGING TAG\n       When merging an annotated (and possibly signed) tag, Git always creates\n       a merge commit even if a fast-forward merge is possible, and the commit\n       message template is prepared with the tag message. Additionally, if the\n       tag is signed, the signature check is reported as a comment in the\n       message template. See also git-tag(1).\n\n       When you want to just integrate with the work leading to the commit\n       that happens to be tagged, e.g. synchronizing with an upstream release\n       point, you may not want to make an unnecessary merge commit.\n\n       In such a case, you can "unwrap" the tag yourself before feeding it to\n       git merge, or pass --ff-only when you do not have any work on your own.\n       e.g.\n\n           git fetch origin\n           git merge v1.2.3^0\n           git merge --ff-only v1.2.3\n\n\nHOW CONFLICTS ARE PRESENTED\n       During a merge, the working tree files are updated to reflect the\n       result of the merge. Among the changes made to the common ancestor\'s\n       version, non-overlapping ones (that is, you changed an area of the file\n       while the other side left that area intact, or vice versa) are\n       incorporated in the final result verbatim. When both sides made changes\n       to the same area, however, Git cannot randomly pick one side over the\n       other, and asks you to resolve it by leaving what both sides did to\n       that area.\n\n       By default, Git uses the same style as the one used by the "merge"\n       program from the RCS suite to present such a conflicted hunk, like\n       this:\n\n           Here are lines that are either unchanged from the common\n           ancestor, or cleanly resolved because only one side changed.\n           <<<<<<< yours:sample.txt\n           Conflict resolution is hard;\n           let\'s go shopping.\n           =======\n           Git makes conflict resolution easy.\n           >>>>>>> theirs:sample.txt\n           And here is another line that is cleanly resolved or unmodified.\n\n\n       The area where a pair of conflicting changes happened is marked with\n       markers <<<<<<<, =======, and >>>>>>>. The part before the ======= is\n       typically your side, and the part afterwards is typically their side.\n\n       The default format does not show what the original said in the\n       conflicting area. You cannot tell how many lines are deleted and\n       replaced with Barbie\'s remark on your side. The only thing you can tell\n       is that your side wants to say it is hard and you\'d prefer to go\n       shopping, while the other side wants to claim it is easy.\n\n       An alternative style can be used by setting the "merge.conflictStyle"\n       configuration variable to "diff3". In "diff3" style, the above conflict\n       may look like this:\n\n           Here are lines that are either unchanged from the common\n           ancestor, or cleanly resolved because only one side changed.\n           <<<<<<< yours:sample.txt\n           Conflict resolution is hard;\n           let\'s go shopping.\n           |||||||\n           Conflict resolution is hard.\n           =======\n           Git makes conflict resolution easy.\n           >>>>>>> theirs:sample.txt\n           And here is another line that is cleanly resolved or unmodified.\n\n\n       In addition to the <<<<<<<, =======, and >>>>>>> markers, it uses\n       another ||||||| marker that is followed by the original text. You can\n       tell that the original just stated a fact, and your side simply gave in\n       to that statement and gave up, while the other side tried to have a\n       more positive attitude. You can sometimes come up with a better\n       resolution by viewing the original.\n\nHOW TO RESOLVE CONFLICTS\n       After seeing a conflict, you can do two things:\n\n       o   Decide not to merge. The only clean-ups you need are to reset the\n           index file to the HEAD commit to reverse 2. and to clean up working\n           tree changes made by 2. and 3.; git merge --abort can be used for\n           this.\n\n       o   Resolve the conflicts. Git will mark the conflicts in the working\n           tree. Edit the files into shape and git add them to the index. Use\n           git commit or git merge --continue to seal the deal. The latter\n           command checks whether there is a (interrupted) merge in progress\n           before calling git commit.\n\n       You can work through the conflict with a number of tools:\n\n       o   Use a mergetool.  git mergetool to launch a graphical mergetool\n           which will work you through the merge.\n\n       o   Look at the diffs.  git diff will show a three-way diff,\n           highlighting changes from both the HEAD and MERGE_HEAD versions.\n\n       o   Look at the diffs from each branch.  git log --merge -p <path> will\n           show diffs first for the HEAD version and then the MERGE_HEAD\n           version.\n\n       o   Look at the originals.  git show :1:filename shows the common\n           ancestor, git show :2:filename shows the HEAD version, and git show\n           :3:filename shows the MERGE_HEAD version.\n\nEXAMPLES\n       o   Merge branches fixes and enhancements on top of the current branch,\n           making an octopus merge:\n\n               $ git merge fixes enhancements\n\n\n       o   Merge branch obsolete into the current branch, using ours merge\n           strategy:\n\n               $ git merge -s ours obsolete\n\n\n       o   Merge branch maint into the current branch, but do not make a new\n           commit automatically:\n\n               $ git merge --no-commit maint\n\n           This can be used when you want to include further changes to the\n           merge, or want to write your own merge commit message.\n\n           You should refrain from abusing this option to sneak substantial\n           changes into a merge commit. Small fixups like bumping\n           release/version name would be acceptable.\n\nMERGE STRATEGIES\n       The merge mechanism (git merge and git pull commands) allows the\n       backend merge strategies to be chosen with -s option. Some strategies\n       can also take their own options, which can be passed by giving\n       -X<option> arguments to git merge and/or git pull.\n\n       resolve\n           This can only resolve two heads (i.e. the current branch and\n           another branch you pulled from) using a 3-way merge algorithm. It\n           tries to carefully detect criss-cross merge ambiguities and is\n           considered generally safe and fast.\n\n       recursive\n           This can only resolve two heads using a 3-way merge algorithm. When\n           there is more than one common ancestor that can be used for 3-way\n           merge, it creates a merged tree of the common ancestors and uses\n           that as the reference tree for the 3-way merge. This has been\n           reported to result in fewer merge conflicts without causing\n           mismerges by tests done on actual merge commits taken from Linux\n           2.6 kernel development history. Additionally this can detect and\n           handle merges involving renames, but currently cannot make use of\n           detected copies. This is the default merge strategy when pulling or\n           merging one branch.\n\n           The recursive strategy can take the following options:\n\n           ours\n               This option forces conflicting hunks to be auto-resolved\n               cleanly by favoring our version. Changes from the other tree\n               that do not conflict with our side are reflected in the merge\n               result. For a binary file, the entire contents are taken from\n               our side.\n\n               This should not be confused with the ours merge strategy, which\n               does not even look at what the other tree contains at all. It\n               discards everything the other tree did, declaring our history\n               contains all that happened in it.\n\n           theirs\n               This is the opposite of ours; note that, unlike ours, there is\n               no theirs merge strategy to confuse this merge option with.\n\n           patience\n               With this option, merge-recursive spends a little extra time to\n               avoid mismerges that sometimes occur due to unimportant\n               matching lines (e.g., braces from distinct functions). Use this\n               when the branches to be merged have diverged wildly. See also\n               git-diff(1) --patience.\n\n           diff-algorithm=[patience|minimal|histogram|myers]\n               Tells merge-recursive to use a different diff algorithm, which\n               can help avoid mismerges that occur due to unimportant matching\n               lines (such as braces from distinct functions). See also git-\n               diff(1) --diff-algorithm.\n\n           ignore-space-change, ignore-all-space, ignore-space-at-eol,\n           ignore-cr-at-eol\n               Treats lines with the indicated type of whitespace change as\n               unchanged for the sake of a three-way merge. Whitespace changes\n               mixed with other changes to a line are not ignored. See also\n               git-diff(1) -b, -w, --ignore-space-at-eol, and\n               --ignore-cr-at-eol.\n\n               o   If their version only introduces whitespace changes to a\n                   line, our version is used;\n\n               o   If our version introduces whitespace changes but their\n                   version includes a substantial change, their version is\n                   used;\n\n               o   Otherwise, the merge proceeds in the usual way.\n\n           renormalize\n               This runs a virtual check-out and check-in of all three stages\n               of a file when resolving a three-way merge. This option is\n               meant to be used when merging branches with different clean\n               filters or end-of-line normalization rules. See "Merging\n               branches with differing checkin/checkout attributes" in\n               gitattributes(5) for details.\n\n           no-renormalize\n               Disables the renormalize option. This overrides the\n               merge.renormalize configuration variable.\n\n           no-renames\n               Turn off rename detection. This overrides the merge.renames\n               configuration variable. See also git-diff(1) --no-renames.\n\n           find-renames[=<n>]\n               Turn on rename detection, optionally setting the similarity\n               threshold. This is the default. This overrides the\n               merge.renames configuration variable. See also git-diff(1)\n               --find-renames.\n\n           rename-threshold=<n>\n               Deprecated synonym for find-renames=<n>.\n\n           subtree[=<path>]\n               This option is a more advanced form of subtree strategy, where\n               the strategy makes a guess on how two trees must be shifted to\n               match with each other when merging. Instead, the specified path\n               is prefixed (or stripped from the beginning) to make the shape\n               of two trees to match.\n\n       octopus\n           This resolves cases with more than two heads, but refuses to do a\n           complex merge that needs manual resolution. It is primarily meant\n           to be used for bundling topic branch heads together. This is the\n           default merge strategy when pulling or merging more than one\n           branch.\n\n       ours\n           This resolves any number of heads, but the resulting tree of the\n           merge is always that of the current branch head, effectively\n           ignoring all changes from all other branches. It is meant to be\n           used to supersede old development history of side branches. Note\n           that this is different from the -Xours option to the recursive\n           merge strategy.\n\n       subtree\n           This is a modified recursive strategy. When merging trees A and B,\n           if B corresponds to a subtree of A, B is first adjusted to match\n           the tree structure of A, instead of reading the trees at the same\n           level. This adjustment is also done to the common ancestor tree.\n\n       With the strategies that use 3-way merge (including the default,\n       recursive), if a change is made on both branches, but later reverted on\n       one of the branches, that change will be present in the merged result;\n       some people find this behavior confusing. It occurs because only the\n       heads and the merge base are considered when performing a merge, not\n       the individual commits. The merge algorithm therefore considers the\n       reverted change as no change at all, and substitutes the changed\n       version instead.\n\nCONFIGURATION\n       merge.conflictStyle\n           Specify the style in which conflicted hunks are written out to\n           working tree files upon merge. The default is "merge", which shows\n           a <<<<<<< conflict marker, changes made by one side, a =======\n           marker, changes made by the other side, and then a >>>>>>> marker.\n           An alternate style, "diff3", adds a ||||||| marker and the original\n           text before the ======= marker.\n\n       merge.defaultToUpstream\n           If merge is called without any commit argument, merge the upstream\n           branches configured for the current branch by using their last\n           observed values stored in their remote-tracking branches. The\n           values of the branch.<current branch>.merge that name the branches\n           at the remote named by branch.<current branch>.remote are\n           consulted, and then they are mapped via remote.<remote>.fetch to\n           their corresponding remote-tracking branches, and the tips of these\n           tracking branches are merged.\n\n       merge.ff\n           By default, Git does not create an extra merge commit when merging\n           a commit that is a descendant of the current commit. Instead, the\n           tip of the current branch is fast-forwarded. When set to false,\n           this variable tells Git to create an extra merge commit in such a\n           case (equivalent to giving the --no-ff option from the command\n           line). When set to only, only such fast-forward merges are allowed\n           (equivalent to giving the --ff-only option from the command line).\n\n       merge.verifySignatures\n           If true, this is equivalent to the --verify-signatures command line\n           option. See git-merge(1) for details.\n\n       merge.branchdesc\n           In addition to branch names, populate the log message with the\n           branch description text associated with them. Defaults to false.\n\n       merge.log\n           In addition to branch names, populate the log message with at most\n           the specified number of one-line descriptions from the actual\n           commits that are being merged. Defaults to false, and true is a\n           synonym for 20.\n\n       merge.suppressDest\n           By adding a glob that matches the names of integration branches to\n           this multi-valued configuration variable, the default merge message\n           computed for merges into these integration branches will omit "into\n           <branch name>" from its title.\n\n           An element with an empty value can be used to clear the list of\n           globs accumulated from previous configuration entries. When there\n           is no merge.suppressDest variable defined, the default value of\n           main is used for backward compatibility.\n\n       merge.renameLimit\n           The number of files to consider when performing rename detection\n           during a merge; if not specified, defaults to the value of\n           diff.renameLimit. This setting has no effect if rename detection is\n           turned off.\n\n       merge.renames\n           Whether Git detects renames. If set to "false", rename detection is\n           disabled. If set to "true", basic rename detection is enabled.\n           Defaults to the value of diff.renames.\n\n       merge.directoryRenames\n           Whether Git detects directory renames, affecting what happens at\n           merge time to new files added to a directory on one side of history\n           when that directory was renamed on the other side of history. If\n           merge.directoryRenames is set to "false", directory rename\n           detection is disabled, meaning that such new files will be left\n           behind in the old directory. If set to "true", directory rename\n           detection is enabled, meaning that such new files will be moved\n           into the new directory. If set to "conflict", a conflict will be\n           reported for such paths. If merge.renames is false,\n           merge.directoryRenames is ignored and treated as false. Defaults to\n           "conflict".\n\n       merge.renormalize\n           Tell Git that canonical representation of files in the repository\n           has changed over time (e.g. earlier commits record text files with\n           CRLF line endings, but recent ones use LF line endings). In such a\n           repository, Git can convert the data recorded in commits to a\n           canonical form before performing a merge to reduce unnecessary\n           conflicts. For more information, see section "Merging branches with\n           differing checkin/checkout attributes" in gitattributes(5).\n\n       merge.stat\n           Whether to print the diffstat between ORIG_HEAD and the merge\n           result at the end of the merge. True by default.\n\n       merge.autoStash\n           When set to true, automatically create a temporary stash entry\n           before the operation begins, and apply it after the operation ends.\n           This means that you can run merge on a dirty worktree. However, use\n           with care: the final stash application after a successful merge\n           might result in non-trivial conflicts. This option can be\n           overridden by the --no-autostash and --autostash options of git-\n           merge(1). Defaults to false.\n\n       merge.tool\n           Controls which merge tool is used by git-mergetool(1). The list\n           below shows the valid built-in values. Any other value is treated\n           as a custom merge tool and requires that a corresponding\n           mergetool.<tool>.cmd variable is defined.\n\n       merge.guitool\n           Controls which merge tool is used by git-mergetool(1) when the\n           -g/--gui flag is specified. The list below shows the valid built-in\n           values. Any other value is treated as a custom merge tool and\n           requires that a corresponding mergetool.<guitool>.cmd variable is\n           defined.\n\n           o   araxis\n\n           o   bc\n\n           o   bc3\n\n           o   bc4\n\n           o   codecompare\n\n           o   deltawalker\n\n           o   diffmerge\n\n           o   diffuse\n\n           o   ecmerge\n\n           o   emerge\n\n           o   examdiff\n\n           o   guiffy\n\n           o   gvimdiff\n\n           o   gvimdiff2\n\n           o   gvimdiff3\n\n           o   kdiff3\n\n           o   meld\n\n           o   nvimdiff\n\n           o   nvimdiff2\n\n           o   nvimdiff3\n\n           o   opendiff\n\n           o   p4merge\n\n           o   smerge\n\n           o   tkdiff\n\n           o   tortoisemerge\n\n           o   vimdiff\n\n           o   vimdiff2\n\n           o   vimdiff3\n\n           o   winmerge\n\n           o   xxdiff\n\n       merge.verbosity\n           Controls the amount of output shown by the recursive merge\n           strategy. Level 0 outputs nothing except a final error message if\n           conflicts were detected. Level 1 outputs only conflicts, 2 outputs\n           conflicts and file changes. Level 5 and above outputs debugging\n           information. The default is level 2. Can be overridden by the\n           GIT_MERGE_VERBOSITY environment variable.\n\n       merge.<driver>.name\n           Defines a human-readable name for a custom low-level merge driver.\n           See gitattributes(5) for details.\n\n       merge.<driver>.driver\n           Defines the command that implements a custom low-level merge\n           driver. See gitattributes(5) for details.\n\n       merge.<driver>.recursive\n           Names a low-level merge driver to be used when performing an\n           internal merge between common ancestors. See gitattributes(5) for\n           details.\n\n       branch.<name>.mergeOptions\n           Sets default options for merging into branch <name>. The syntax and\n           supported options are the same as those of git merge, but option\n           values containing whitespace characters are currently not\n           supported.\n\nSEE ALSO\n       git-fmt-merge-msg(1), git-pull(1), gitattributes(5), git-reset(1), git-\n       diff(1), git-ls-files(1), git-add(1), git-rm(1), git-mergetool(1)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                      GIT-MERGE(1)\n')),(0,a.kt)("h2",{id:"rebase"},(0,a.kt)("inlineCode",{parentName:"h2"},"rebase")),(0,a.kt)("admonition",{title:"\u30ea\u30d9\u30fc\u30b9\u306e\u7981\u6b62\u4e8b\u9805",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"\u300c\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u305f\u30b3\u30df\u30c3\u30c8\u300d\u3092\u30ea\u30d9\u30fc\u30b9\u3059\u308b\u306e\u306f\u7d76\u5bfe\u306b\u3057\u306a\u3044\u3053\u3068\u3002\u30ed\u30fc\u30ab\u30eb\u3068\u30ea\u30e2\u30fc\u30c8\u3067\u4e0d\u6574\u5408\u306b\u306a\u308a\u3001\u305d\u306e\u5f8c\u306e\u30d7\u30c3\u30b7\u30e5\u304c\u5931\u6557\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-REBASE(1)                     Git Manual                     GIT-REBASE(1)\n\n\n\nNAME\n       git-rebase - \u5225\u306e\u30d9\u30fc\u30b9\u30c1\u30c3\u30d7\u306e\u4e0a\u306b\u30b3\u30df\u30c3\u30c8\u3092\u518d\u9069\u7528\u3059\u308b\n\nSYNOPSIS\n       git rebase [-i | --interactive] [<options>] [--exec <cmd>]\n               [--onto <newbase> | --keep-base] [<upstream> [<branch>]]\n       git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>]\n               --root [<branch>]\n       git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)\n\n\nDESCRIPTION       \n       <branch> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001git rebase \u306f\u4ed6\u306e\u51e6\u7406\u3092\u884c\u3046\u524d\u306b\u81ea\u52d5\u7684\u306b\n       git switch <branch> \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n       \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u6b8b\u308a\u307e\u3059\u3002\n       \n       <upstream> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001branch.<name> .remote \u304a\u3088\u3073\n       branch.<name>.merge \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u69cb\u6210\u3055\u308c\u305f\u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\uff08\u8a73\u7d30\u306f git-config(1) \u3092\u53c2\u7167\uff09\u304c\n       \u4f7f\u7528\u3055\u308c\u3001--fork-point \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\n       \u73fe\u5728\u30d6\u30e9\u30f3\u30c1\u3092\u4f7f\u7528\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u307e\u305f\u306f\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u69cb\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\n       \u30ea\u30d9\u30fc\u30b9\u306f\u4e2d\u6b62\u3055\u308c\u307e\u3059\u3002\n       \n       \u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u3067\u30b3\u30df\u30c3\u30c8\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u305f\u304c <upstream> \u306b\u306a\u3044\u3059\u3079\u3066\u306e\u5909\u66f4\u306f\u3001\u4e00\u6642\u9818\u57df\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\n       \u3053\u308c\u306f\u3001git log <upstream>..HEAD\u3067\u8868\u793a\u3055\u308c\u308b\u306e\u3068\u540c\u3058\u30b3\u30df\u30c3\u30c8\u306e\u30bb\u30c3\u30c8\u3067\u3059\u3002\n       \u307e\u305f\u306f\u3001--fork-point \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u5834\u5408\u306f\u3001git log\'fork_point\'..HEAD \u3092\u4f7f\u7528\u3057\u307e\u3059\n       \uff08\u4ee5\u4e0b\u306e --fork-point \u306e\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n       \u307e\u305f\u306f\u3001--root \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001git log HEAD \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n       \n       \u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306f <upstream> \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u3001--onto \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\n       <newbase> \u306b\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002\n       \u3053\u308c\u306f\u3001git reset --hard <upstream>\uff08\u307e\u305f\u306f <newbase>\uff09\u3068\u307e\u3063\u305f\u304f\u540c\u3058\u52b9\u679c\u304c\u3042\u308a\u307e\u3059\u3002\n       ORIG_HEAD \u306f\u3001\u30ea\u30bb\u30c3\u30c8\u524d\u306b\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u3092\u6307\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n       \n       \u4ee5\u524d\u306b\u4e00\u6642\u9818\u57df\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30b3\u30df\u30c3\u30c8\u306f\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b1\u3064\u305a\u3064\u9806\u756a\u306b\u518d\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n       HEAD..<upstream> \u3067\u306e\u30b3\u30df\u30c3\u30c8\u3068\u540c\u3058\u30c6\u30ad\u30b9\u30c8\u5909\u66f4\u3092\u5c0e\u5165\u3059\u308b HEAD \u3067\u306e\u30b3\u30df\u30c3\u30c8\u306f\u7701\u7565\u3055\u308c\u308b\u3053\u3068\u306b\n       \u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u3064\u307e\u308a\u3001\u30d1\u30c3\u30c1\u306f\u7570\u306a\u308b\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u307e\u305f\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u308b\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\n       \u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3059\u3067\u306b\u53d7\u3051\u5165\u308c\u3089\u308c\u3066\u3044\u307e\u3059\uff09\u3002\n       \n       \u30de\u30fc\u30b8\u304c\u5931\u6557\u3059\u308b\u3068\u3001\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5b8c\u5168\u306b\u81ea\u52d5\u5316\u3055\u308c\u306a\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n       \u3053\u306e\u3088\u3046\u306a\u30de\u30fc\u30b8\u306e\u5931\u6557\u3092\u89e3\u6c7a\u3057\u3001git rebase --continue \u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n       \u3082\u30461\u3064\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3001git rebase --skip \u3092\u4f7f\u7528\u3057\u3066\u30de\u30fc\u30b8\u306e\u5931\u6557\u3092\u5f15\u304d\u8d77\u3053\u3057\u305f\u30b3\u30df\u30c3\u30c8\u3092\n       \u30d0\u30a4\u30d1\u30b9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n       \u5143\u306e <branch> \u3092\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3057\u3001.git/rebase-apply \u4f5c\u696d\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u3001\n       \u4ee3\u308f\u308a\u306b\u30b3\u30de\u30f3\u30c9 git rebase --abort \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n       \u6b21\u306e\u5c65\u6b74\u304c\u5b58\u5728\u3057\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u304c\u300ctopic\u300d\u3067\u3042\u308b\u3068\u60f3\u5b9a\u3057\u307e\u3059\uff1a\n\n                     A---B---C topic\n                    /\n               D---E---F---G main\n\n\n       \u3053\u306e\u6642\u70b9\u304b\u3089\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u306e\u3044\u305a\u308c\u304b\u306e\u7d50\u679c\uff1a\n\n           git rebase main\n           git rebase main topic\n\n       \u3053\u3046\u306a\u308a\u307e\u3059:\n\n                             A\'--B\'--C\' topic\n                            /\n               D---E---F---G main\n\n\n       \u6ce8\uff1a\u5f8c\u8005\u306e\u5f62\u5f0f\u306f\u3001git checkout topic \u306e\u7701\u7565\u5f62\u3067\u3042\u308a\u3001\u305d\u306e\u5f8c\u306b git rebase main \u304c\u7d9a\u304d\u307e\u3059\u3002\n       \u30ea\u30d9\u30fc\u30b9\u304c\u7d42\u4e86\u3059\u308b\u3068\u3001topic \u306f\u30c1\u30a7\u30c3\u30af\u30a2\u30a6\u30c8\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u306e\u307e\u307e\u306b\u306a\u308a\u307e\u3059\u3002\n       \n       \u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u30d6\u30e9\u30f3\u30c1\u306b\u3001\u884c\u3063\u305f\u5909\u66f4\u304c\u3059\u3067\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\uff08\u305f\u3068\u3048\u3070\u3001\u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u9069\u7528\u3055\u308c\u305f\n       \u30d1\u30c3\u30c1\u3092\u30e1\u30fc\u30eb\u3067\u9001\u4fe1\u3057\u305f\u305f\u3081\uff09\u3001\u305d\u306e\u30b3\u30df\u30c3\u30c8\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\n       \u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u5c65\u6b74\u3067 git rebase main \u3092\u5b9f\u884c\u3057\u307e\u3059\n       \uff08A\' \u3068 A \u306f\u540c\u3058\u5909\u66f4\u30bb\u30c3\u30c8\u3092\u5c0e\u5165\u3057\u307e\u3059\u304c\u3001\u30b3\u30df\u30c3\u30bf\u30fc\u60c5\u5831\u306f\u7570\u306a\u308a\u307e\u3059\uff09\uff1a\n\n                     A---B---C topic\n                    /\n               D---E---A\'---F main\n\n\n       \u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:\n\n                              B\'---C\' topic\n                             /\n               D---E---A\'---F main\n\n\n       \u3053\u308c\u306f\u3001rebase --onto \u3092\u4f7f\u7528\u3057\u3066\u3001topic \u30d6\u30e9\u30f3\u30c1\u3092\u5f8c\u8005\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u30d5\u30a9\u30fc\u30af\u3057\u305f\u3075\u308a\u3092\u3059\u308b\u305f\u3081\u306b\u3001\n       \u3042\u308b\u30d6\u30e9\u30f3\u30c1\u306b\u57fa\u3065\u3044\u3066 topic \u30d6\u30e9\u30f3\u30c1\u3092\u5225\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u79fb\u690d\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n       \n       \u307e\u305a\u3001topic \u304c next \u30d6\u30e9\u30f3\u30c1\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002\n       \u305f\u3068\u3048\u3070\u3001topic \u3067\u958b\u767a\u3055\u308c\u305f\u6a5f\u80fd\u306f\u3001next \u306b\u898b\u3089\u308c\u308b\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\n               o---o---o---o---o  main\n                    \\\n                     o---o---o---o---o  next\n                                      \\\n                                       o---o---o  topic\n\n       \n       main \u30d6\u30e9\u30f3\u30c1\u304b\u3089 topic \u3092\u30d5\u30a9\u30fc\u30af\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n       \u305f\u3068\u3048\u3070\u3001topic \u304c\u4f9d\u5b58\u3059\u308b\u6a5f\u80fd\u304c\u3088\u308a\u5b89\u5b9a\u3057\u305f main \u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3055\u308c\u305f\u305f\u3081\u3067\u3059\u3002\n       \u30c4\u30ea\u30fc\u3092\u6b21\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u307e\u3059\uff1a\n\n               o---o---o---o---o  main\n                   |            \\\n                   |             o\'--o\'--o\'  topic\n                    \\\n                     o---o---o---o---o  next\n\n\n       \u3053\u308c\u306f\u3001\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\uff1a\n\n           git rebase --onto main next topic\n       \n       --onto \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5225\u306e\u4f8b\u306f\u3001\u30d6\u30e9\u30f3\u30c1\u306e\u4e00\u90e8\u3092\u30ea\u30d9\u30fc\u30b9\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306e\u5834\u5408\uff1a\n\n                                       H---I---J topicB\n                                      /\n                             E---F---G  topicA\n                            /\n               A---B---C---D  main\n\n\n       \u6b21\u306e\u30b3\u30de\u30f3\u30c9\n\n           git rebase --onto main topicA topicB\n\n       \u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\n                            H\'--I\'--J\'  topicB\n                           /\n                           | E---F---G  topicA\n                           |/\n               A---B---C---D  main\n\n\n       \u3053\u308c\u306f\u3001topicB \u304c topicA \u306b\u4f9d\u5b58\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\n       A range of commits could also be removed with rebase. If we have the\n       following situation:\n       \n       \u30b3\u30df\u30c3\u30c8\u306e\u7bc4\u56f2\u306f\u3001\u30ea\u30d9\u30fc\u30b9\u3067\u524a\u9664\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306e\u5834\u5408\uff1a\n\n               E---F---G---H---I---J  topicA\n\n\n       \u6b21\u306e\u30b3\u30de\u30f3\u30c9\n\n           git rebase --onto topicA~5 topicA~3 topicA\n\n       \u30b3\u30df\u30c3\u30c8 F \u3068 G \u304c\u524a\u9664\u3055\u308c\u307e\u3059\uff1a\n\n               E---H\'---I\'---J\'  topicA\n\n       \n       \u3053\u308c\u306f\u3001F \u3068 G \u306b\u4f55\u3089\u304b\u306e\u6b20\u9665\u304c\u3042\u308b\u5834\u5408\u3001\u307e\u305f\u306f topicA \u306e\u4e00\u90e8\u306b\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u5834\u5408\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n       --onto \u304a\u3088\u3073 <upstream> \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5f15\u6570\u306f\u3001\u4efb\u610f\u306e\u6709\u52b9\u306a commit-ish \u306b\u3059\u308b\u3053\u3068\u304c\n       \u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n       \u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001git rebase \u306f\u6700\u521d\u306e\u554f\u984c\u306e\u3042\u308b\u30b3\u30df\u30c3\u30c8\u3067\u505c\u6b62\u3057\u3001\n       \u30c4\u30ea\u30fc\u306b\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u30de\u30fc\u30ab\u30fc\u3092\u6b8b\u3057\u307e\u3059\u3002\n       git diff \u3092\u4f7f\u7528\u3057\u3066\u30de\u30fc\u30ab\u30fc\uff08<<<<<<\uff09\u3092\u898b\u3064\u3051\u3001\u7de8\u96c6\u3057\u3066\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3092\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n       \u7de8\u96c6\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u304c\u89e3\u6c7a\u3055\u308c\u305f\u3053\u3068\u3092 Git \u306b\u901a\u77e5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n       \u901a\u5e38\u3001\u3053\u308c\u306f\u6b21\u306e\u65b9\u6cd5\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n           git add <filename>\n\n       \u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3092\u624b\u52d5\u3067\u89e3\u6c7a\u3057\u3001\u5fc5\u8981\u306a\u89e3\u6c7a\u7b56\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u66f4\u65b0\u3057\u305f\u5f8c\u3001\n       \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30ea\u30d9\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9\u3092\u7d9a\u884c\u3067\u304d\u307e\u3059\u3002\n\n           git rebase --continue\n\n       \u6216\u3044\u306f\u3001git rebase \u3067\u5143\u306b\u623b\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n           git rebase --abort\n\nCONFIGURATION\n       rebase.useBuiltin\n           Unused configuration variable. Used in Git versions 2.20 and 2.21\n           as an escape hatch to enable the legacy shellscript implementation\n           of rebase. Now the built-in rewrite of it in C is always used.\n           Setting this will emit a warning, to alert any remaining users that\n           setting this now does nothing.\n\n       rebase.backend\n           Default backend to use for rebasing. Possible choices are apply or\n           merge. In the future, if the merge backend gains all remaining\n           capabilities of the apply backend, this setting may become unused.\n\n       rebase.stat\n           Whether to show a diffstat of what changed upstream since the last\n           rebase. False by default.\n\n       rebase.autoSquash\n           If set to true enable --autosquash option by default.\n\n       rebase.autoStash\n           When set to true, automatically create a temporary stash entry\n           before the operation begins, and apply it after the operation ends.\n           This means that you can run rebase on a dirty worktree. However,\n           use with care: the final stash application after a successful\n           rebase might result in non-trivial conflicts. This option can be\n           overridden by the --no-autostash and --autostash options of git-\n           rebase(1). Defaults to false.\n\n       rebase.missingCommitsCheck\n           If set to "warn", git rebase -i will print a warning if some\n           commits are removed (e.g. a line was deleted), however the rebase\n           will still proceed. If set to "error", it will print the previous\n           warning and stop the rebase, git rebase --edit-todo can then be\n           used to correct the error. If set to "ignore", no checking is done.\n           To drop a commit without warning or error, use the drop command in\n           the todo list. Defaults to "ignore".\n\n       rebase.instructionFormat\n           A format string, as specified in git-log(1), to be used for the\n           todo list during an interactive rebase. The format will\n           automatically have the long commit hash prepended to the format.\n\n       rebase.abbreviateCommands\n           If set to true, git rebase will use abbreviated command names in\n           the todo list resulting in something like this:\n\n                       p deadbee The oneline of the commit\n                       p fa1afe1 The oneline of the next commit\n                       ...\n\n           instead of:\n\n                       pick deadbee The oneline of the commit\n                       pick fa1afe1 The oneline of the next commit\n                       ...\n\n           Defaults to false.\n\n       rebase.rescheduleFailedExec\n           Automatically reschedule exec commands that failed. This only makes\n           sense in interactive mode (or when an --exec option was provided).\n           This is the same as specifying the --reschedule-failed-exec option.\n\n       sequence.editor\n           Text editor used by git rebase -i for editing the rebase\n           instruction file. The value is meant to be interpreted by the shell\n           when it is used. It can be overridden by the GIT_SEQUENCE_EDITOR\n           environment variable. When not configured the default commit\n           message editor is used instead.\n\nOPTIONS\n       --onto <newbase>\n           Starting point at which to create the new commits. If the --onto\n           option is not specified, the starting point is <upstream>. May be\n           any valid commit, and not just an existing branch name.\n\n           As a special case, you may use "A...B" as a shortcut for the merge\n           base of A and B if there is exactly one merge base. You can leave\n           out at most one of A and B, in which case it defaults to HEAD.\n\n       --keep-base\n           Set the starting point at which to create the new commits to the\n           merge base of <upstream> <branch>. Running git rebase --keep-base\n           <upstream> <branch> is equivalent to running git rebase --onto\n           <upstream>... <upstream>.\n\n           This option is useful in the case where one is developing a feature\n           on top of an upstream branch. While the feature is being worked on,\n           the upstream branch may advance and it may not be the best idea to\n           keep rebasing on top of the upstream but to keep the base commit\n           as-is.\n\n           Although both this option and --fork-point find the merge base\n           between <upstream> and <branch>, this option uses the merge base as\n           the starting point on which new commits will be created, whereas\n           --fork-point uses the merge base to determine the set of commits\n           which will be rebased.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       <upstream>\n           Upstream branch to compare against. May be any valid commit, not\n           just an existing branch name. Defaults to the configured upstream\n           for the current branch.\n\n       <branch>\n           Working branch; defaults to HEAD.\n\n       --continue\n           Restart the rebasing process after having resolved a merge\n           conflict.\n\n       --abort\n           Abort the rebase operation and reset HEAD to the original branch.\n           If <branch> was provided when the rebase operation was started,\n           then HEAD will be reset to <branch>. Otherwise HEAD will be reset\n           to where it was when the rebase operation was started.\n\n       --quit\n           Abort the rebase operation but HEAD is not reset back to the\n           original branch. The index and working tree are also left unchanged\n           as a result. If a temporary stash entry was created using\n           --autostash, it will be saved to the stash list.\n\n       --apply\n           Use applying strategies to rebase (calling git-am internally). This\n           option may become a no-op in the future once the merge backend\n           handles everything the apply one does.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --empty={drop,keep,ask}\n           How to handle commits that are not empty to start and are not clean\n           cherry-picks of any upstream commit, but which become empty after\n           rebasing (because they contain a subset of already upstream\n           changes). With drop (the default), commits that become empty are\n           dropped. With keep, such commits are kept. With ask (implied by\n           --interactive), the rebase will halt when an empty commit is\n           applied allowing you to choose whether to drop it, edit files more,\n           or just commit the empty changes. Other options, like --exec, will\n           use the default of drop unless -i/--interactive is explicitly\n           specified.\n\n           Note that commits which start empty are kept (unless\n           --no-keep-empty is specified), and commits which are clean\n           cherry-picks (as determined by git log --cherry-mark ...) are\n           detected and dropped as a preliminary step (unless\n           --reapply-cherry-picks is passed).\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --no-keep-empty, --keep-empty\n           Do not keep commits that start empty before the rebase (i.e. that\n           do not change anything from its parent) in the result. The default\n           is to keep commits which start empty, since creating such commits\n           requires passing the --allow-empty override flag to git commit,\n           signifying that a user is very intentionally creating such a commit\n           and thus wants to keep it.\n\n           Usage of this flag will probably be rare, since you can get rid of\n           commits that start empty by just firing up an interactive rebase\n           and removing the lines corresponding to the commits you don\'t want.\n           This flag exists as a convenient shortcut, such as for cases where\n           external tools generate many empty commits and you want them all\n           removed.\n\n           For commits which do not start empty but become empty after\n           rebasing, see the --empty flag.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --reapply-cherry-picks, --no-reapply-cherry-picks\n           Reapply all clean cherry-picks of any upstream commit instead of\n           preemptively dropping them. (If these commits then become empty\n           after rebasing, because they contain a subset of already upstream\n           changes, the behavior towards them is controlled by the --empty\n           flag.)\n\n           By default (or if --no-reapply-cherry-picks is given), these\n           commits will be automatically dropped. Because this necessitates\n           reading all upstream commits, this can be expensive in repos with a\n           large number of upstream commits that need to be read.\n\n           --reapply-cherry-picks allows rebase to forgo reading all upstream\n           commits, potentially improving performance.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --allow-empty-message\n           No-op. Rebasing commits with an empty message used to fail and this\n           option would override that behavior, allowing commits with empty\n           messages to be rebased. Now commits with an empty message do not\n           cause rebasing to halt.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --skip\n           Restart the rebasing process by skipping the current patch.\n\n       --edit-todo\n           Edit the todo list during an interactive rebase.\n\n       --show-current-patch\n           Show the current patch in an interactive rebase or when rebase is\n           stopped because of conflicts. This is the equivalent of git show\n           REBASE_HEAD.\n\n       -m, --merge\n           Use merging strategies to rebase. When the recursive (default)\n           merge strategy is used, this allows rebase to be aware of renames\n           on the upstream side. This is the default.\n\n           Note that a rebase merge works by replaying each commit from the\n           working branch on top of the <upstream> branch. Because of this,\n           when a merge conflict happens, the side reported as ours is the\n           so-far rebased series, starting with <upstream>, and theirs is the\n           working branch. In other words, the sides are swapped.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       -s <strategy>, --strategy=<strategy>\n           Use the given merge strategy. If there is no -s option git\n           merge-recursive is used instead. This implies --merge.\n\n           Because git rebase replays each commit from the working branch on\n           top of the <upstream> branch using the given strategy, using the\n           ours strategy simply empties all patches from the <branch>, which\n           makes little sense.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       -X <strategy-option>, --strategy-option=<strategy-option>\n           Pass the <strategy-option> through to the merge strategy. This\n           implies --merge and, if no strategy has been specified, -s\n           recursive. Note the reversal of ours and theirs as noted above for\n           the -m option.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --rerere-autoupdate, --no-rerere-autoupdate\n           Allow the rerere mechanism to update the index with the result of\n           auto-conflict resolution if possible.\n\n       -S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign\n           GPG-sign commits. The keyid argument is optional and defaults to\n           the committer identity; if specified, it must be stuck to the\n           option without a space.  --no-gpg-sign is useful to countermand\n           both commit.gpgSign configuration variable, and earlier --gpg-sign.\n\n       -q, --quiet\n           Be quiet. Implies --no-stat.\n\n       -v, --verbose\n           Be verbose. Implies --stat.\n\n       --stat\n           Show a diffstat of what changed upstream since the last rebase. The\n           diffstat is also controlled by the configuration option\n           rebase.stat.\n\n       -n, --no-stat\n           Do not show a diffstat as part of the rebase process.\n\n       --no-verify\n           This option bypasses the pre-rebase hook. See also githooks(5).\n\n       --verify\n           Allows the pre-rebase hook to run, which is the default. This\n           option can be used to override --no-verify. See also githooks(5).\n\n       -C<n>\n           Ensure at least <n> lines of surrounding context match before and\n           after each change. When fewer lines of surrounding context exist\n           they all must match. By default no context is ever ignored. Implies\n           --apply.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --no-ff, --force-rebase, -f\n           Individually replay all rebased commits instead of fast-forwarding\n           over the unchanged ones. This ensures that the entire history of\n           the rebased branch is composed of new commits.\n\n           You may find this helpful after reverting a topic branch merge, as\n           this option recreates the topic branch with fresh commits so it can\n           be remerged successfully without needing to "revert the reversion"\n           (see the revert-a-faulty-merge How-To[1] for details).\n\n       --fork-point, --no-fork-point\n           Use reflog to find a better common ancestor between <upstream> and\n           <branch> when calculating which commits have been introduced by\n           <branch>.\n\n           When --fork-point is active, fork_point will be used instead of\n           <upstream> to calculate the set of commits to rebase, where\n           fork_point is the result of git merge-base --fork-point <upstream>\n           <branch> command (see git-merge-base(1)). If fork_point ends up\n           being empty, the <upstream> will be used as a fallback.\n\n           If <upstream> is given on the command line, then the default is\n           --no-fork-point, otherwise the default is --fork-point.\n\n           If your branch was based on <upstream> but <upstream> was rewound\n           and your branch contains commits which were dropped, this option\n           can be used with --keep-base in order to drop those commits from\n           your branch.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --ignore-whitespace\n           Ignore whitespace differences when trying to reconcile differences.\n           Currently, each backend implements an approximation of this\n           behavior:\n\n           apply backend: When applying a patch, ignore changes in whitespace\n           in context lines. Unfortunately, this means that if the "old" lines\n           being replaced by the patch differ only in whitespace from the\n           existing file, you will get a merge conflict instead of a\n           successful patch application.\n\n           merge backend: Treat lines with only whitespace changes as\n           unchanged when merging. Unfortunately, this means that any patch\n           hunks that were intended to modify whitespace and nothing else will\n           be dropped, even if the other side had no changes that conflicted.\n\n       --whitespace=<option>\n           This flag is passed to the git apply program (see git-apply(1))\n           that applies the patch. Implies --apply.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --committer-date-is-author-date\n           Instead of using the current time as the committer date, use the\n           author date of the commit being rebased as the committer date. This\n           option implies --force-rebase.\n\n       --ignore-date, --reset-author-date\n           Instead of using the author date of the original commit, use the\n           current time as the author date of the rebased commit. This option\n           implies --force-rebase.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --signoff\n           Add a Signed-off-by trailer to all the rebased commits. Note that\n           if --interactive is given then only commits marked to be picked,\n           edited or reworded will have the trailer added.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       -i, --interactive\n           Make a list of the commits which are about to be rebased. Let the\n           user edit that list before rebasing. This mode can also be used to\n           split commits (see SPLITTING COMMITS below).\n\n           The commit list format can be changed by setting the configuration\n           option rebase.instructionFormat. A customized instruction format\n           will automatically have the long commit hash prepended to the\n           format.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       -r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)]\n           By default, a rebase will simply drop merge commits from the todo\n           list, and put the rebased commits into a single, linear branch.\n           With --rebase-merges, the rebase will instead try to preserve the\n           branching structure within the commits that are to be rebased, by\n           recreating the merge commits. Any resolved merge conflicts or\n           manual amendments in these merge commits will have to be\n           resolved/re-applied manually.\n\n           By default, or when no-rebase-cousins was specified, commits which\n           do not have <upstream> as direct ancestor will keep their original\n           branch point, i.e. commits that would be excluded by git-log(1)\'s\n           --ancestry-path option will keep their original ancestry by\n           default. If the rebase-cousins mode is turned on, such commits are\n           instead rebased onto <upstream> (or <onto>, if specified).\n\n           The --rebase-merges mode is similar in spirit to the deprecated\n           --preserve-merges but works with interactive rebases, where commits\n           can be reordered, inserted and dropped at will.\n\n           It is currently only possible to recreate the merge commits using\n           the recursive merge strategy; Different merge strategies can be\n           used only via explicit exec git merge -s <strategy> [...]\n           commands.\n\n           See also REBASING MERGES and INCOMPATIBLE OPTIONS below.\n\n       -p, --preserve-merges\n           [DEPRECATED: use --rebase-merges instead] Recreate merge commits\n           instead of flattening the history by replaying commits a merge\n           commit introduces. Merge conflict resolutions or manual amendments\n           to merge commits are not preserved.\n\n           This uses the --interactive machinery internally, but combining it\n           with the --interactive option explicitly is generally not a good\n           idea unless you know what you are doing (see BUGS below).\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       -x <cmd>, --exec <cmd>\n           Append "exec <cmd>" after each line creating a commit in the final\n           history. <cmd> will be interpreted as one or more shell commands.\n           Any command that fails will interrupt the rebase, with exit code 1.\n\n           You may execute several commands by either using one instance of\n           --exec with several commands:\n\n               git rebase -i --exec "cmd1 && cmd2 && ..."\n\n           or by giving more than one --exec:\n\n               git rebase -i --exec "cmd1" --exec "cmd2" --exec ...\n\n           If --autosquash is used, "exec" lines will not be appended for the\n           intermediate commits, and will only appear at the end of each\n           squash/fixup series.\n\n           This uses the --interactive machinery internally, but it can be run\n           without an explicit --interactive.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --root\n           Rebase all commits reachable from <branch>, instead of limiting\n           them with an <upstream>. This allows you to rebase the root\n           commit(s) on a branch. When used with --onto, it will skip changes\n           already contained in <newbase> (instead of <upstream>) whereas\n           without --onto it will operate on every change. When used together\n           with both --onto and --preserve-merges, all root commits will be\n           rewritten to have <newbase> as parent instead.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --autosquash, --no-autosquash\n           When the commit log message begins with "squash! ..." (or "fixup!\n           ..."), and there is already a commit in the todo list that matches\n           the same ..., automatically modify the todo list of rebase -i so\n           that the commit marked for squashing comes right after the commit\n           to be modified, and change the action of the moved commit from pick\n           to squash (or fixup). A commit matches the ...  if the commit\n           subject matches, or if the ...  refers to the commit\'s hash. As a\n           fall-back, partial matches of the commit subject work, too. The\n           recommended way to create fixup/squash commits is by using the\n           --fixup/--squash options of git-commit(1).\n\n           If the --autosquash option is enabled by default using the\n           configuration variable rebase.autoSquash, this option can be used\n           to override and disable this setting.\n\n           See also INCOMPATIBLE OPTIONS below.\n\n       --autostash, --no-autostash\n           Automatically create a temporary stash entry before the operation\n           begins, and apply it after the operation ends. This means that you\n           can run rebase on a dirty worktree. However, use with care: the\n           final stash application after a successful rebase might result in\n           non-trivial conflicts.\n\n       --reschedule-failed-exec, --no-reschedule-failed-exec\n           Automatically reschedule exec commands that failed. This only makes\n           sense in interactive mode (or when an --exec option was provided).\n\nINCOMPATIBLE OPTIONS\n       The following options:\n\n       o   --apply\n\n       o   --whitespace\n\n       o   -C\n\n       are incompatible with the following options:\n\n       o   --merge\n\n       o   --strategy\n\n       o   --strategy-option\n\n       o   --allow-empty-message\n\n       o   --[no-]autosquash\n\n       o   --rebase-merges\n\n       o   --preserve-merges\n\n       o   --interactive\n\n       o   --exec\n\n       o   --no-keep-empty\n\n       o   --empty=\n\n       o   --reapply-cherry-picks\n\n       o   --edit-todo\n\n       o   --root when used in combination with --onto\n\n       In addition, the following pairs of options are incompatible:\n\n       o   --preserve-merges and --interactive\n\n       o   --preserve-merges and --signoff\n\n       o   --preserve-merges and --rebase-merges\n\n       o   --preserve-merges and --empty=\n\n       o   --preserve-merges and --ignore-whitespace\n\n       o   --preserve-merges and --committer-date-is-author-date\n\n       o   --preserve-merges and --ignore-date\n\n       o   --keep-base and --onto\n\n       o   --keep-base and --root\n\n       o   --fork-point and --root\n\nBEHAVIORAL DIFFERENCES\n       git rebase has two primary backends: apply and merge. (The apply\n       backend used to be known as the am backend, but the name led to\n       confusion as it looks like a verb instead of a noun. Also, the merge\n       backend used to be known as the interactive backend, but it is now used\n       for non-interactive cases as well. Both were renamed based on\n       lower-level functionality that underpinned each.) There are some subtle\n       differences in how these two backends behave:\n\n   Empty commits\n       The apply backend unfortunately drops intentionally empty commits, i.e.\n       commits that started empty, though these are rare in practice. It also\n       drops commits that become empty and has no option for controlling this\n       behavior.\n\n       The merge backend keeps intentionally empty commits by default (though\n       with -i they are marked as empty in the todo list editor, or they can\n       be dropped automatically with --no-keep-empty).\n\n       Similar to the apply backend, by default the merge backend drops\n       commits that become empty unless -i/--interactive is specified (in\n       which case it stops and asks the user what to do). The merge backend\n       also has an --empty={drop,keep,ask} option for changing the behavior of\n       handling commits that become empty.\n\n   Directory rename detection\n       Due to the lack of accurate tree information (arising from constructing\n       fake ancestors with the limited information available in patches),\n       directory rename detection is disabled in the apply backend. Disabled\n       directory rename detection means that if one side of history renames a\n       directory and the other adds new files to the old directory, then the\n       new files will be left behind in the old directory without any warning\n       at the time of rebasing that you may want to move these files into the\n       new directory.\n\n       Directory rename detection works with the merge backend to provide you\n       warnings in such cases.\n\n   Context\n       The apply backend works by creating a sequence of patches (by calling\n       format-patch internally), and then applying the patches in sequence\n       (calling am internally). Patches are composed of multiple hunks, each\n       with line numbers, a context region, and the actual changes. The line\n       numbers have to be taken with some fuzz, since the other side will\n       likely have inserted or deleted lines earlier in the file. The context\n       region is meant to help find how to adjust the line numbers in order to\n       apply the changes to the right lines. However, if multiple areas of the\n       code have the same surrounding lines of context, the wrong one can be\n       picked. There are real-world cases where this has caused commits to be\n       reapplied incorrectly with no conflicts reported. Setting diff.context\n       to a larger value may prevent such types of problems, but increases the\n       chance of spurious conflicts (since it will require more lines of\n       matching context to apply).\n\n       The merge backend works with a full copy of each relevant file,\n       insulating it from these types of problems.\n\n   Labelling of conflicts markers\n       When there are content conflicts, the merge machinery tries to annotate\n       each side\'s conflict markers with the commits where the content came\n       from. Since the apply backend drops the original information about the\n       rebased commits and their parents (and instead generates new fake\n       commits based off limited information in the generated patches), those\n       commits cannot be identified; instead it has to fall back to a commit\n       summary. Also, when merge.conflictStyle is set to diff3, the apply\n       backend will use "constructed merge base" to label the content from the\n       merge base, and thus provide no information about the merge base commit\n       whatsoever.\n\n       The merge backend works with the full commits on both sides of history\n       and thus has no such limitations.\n\n   Hooks\n       The apply backend has not traditionally called the post-commit hook,\n       while the merge backend has. Both have called the post-checkout hook,\n       though the merge backend has squelched its output. Further, both\n       backends only call the post-checkout hook with the starting point\n       commit of the rebase, not the intermediate commits nor the final\n       commit. In each case, the calling of these hooks was by accident of\n       implementation rather than by design (both backends were originally\n       implemented as shell scripts and happened to invoke other commands like\n       git checkout or git commit that would call the hooks). Both backends\n       should have the same behavior, though it is not entirely clear which,\n       if any, is correct. We will likely make rebase stop calling either of\n       these hooks in the future.\n\n   Interruptability\n       The apply backend has safety problems with an ill-timed interrupt; if\n       the user presses Ctrl-C at the wrong time to try to abort the rebase,\n       the rebase can enter a state where it cannot be aborted with a\n       subsequent git rebase --abort. The merge backend does not appear to\n       suffer from the same shortcoming. (See\n       https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/ for\n       details.)\n\n   Commit Rewording\n       When a conflict occurs while rebasing, rebase stops and asks the user\n       to resolve. Since the user may need to make notable changes while\n       resolving conflicts, after conflicts are resolved and the user has run\n       git rebase --continue, the rebase should open an editor and ask the\n       user to update the commit message. The merge backend does this, while\n       the apply backend blindly applies the original commit message.\n\n   Miscellaneous differences\n       There are a few more behavioral differences that most folks would\n       probably consider inconsequential but which are mentioned for\n       completeness:\n\n       o   Reflog: The two backends will use different wording when describing\n           the changes made in the reflog, though both will make use of the\n           word "rebase".\n\n       o   Progress, informational, and error messages: The two backends\n           provide slightly different progress and informational messages.\n           Also, the apply backend writes error messages (such as "Your files\n           would be overwritten...") to stdout, while the merge backend writes\n           them to stderr.\n\n       o   State directories: The two backends keep their state in different\n           directories under .git/\n\nMERGE STRATEGIES\n       The merge mechanism (git merge and git pull commands) allows the\n       backend merge strategies to be chosen with -s option. Some strategies\n       can also take their own options, which can be passed by giving\n       -X<option> arguments to git merge and/or git pull.\n\n       resolve\n           This can only resolve two heads (i.e. the current branch and\n           another branch you pulled from) using a 3-way merge algorithm. It\n           tries to carefully detect criss-cross merge ambiguities and is\n           considered generally safe and fast.\n\n       recursive\n           This can only resolve two heads using a 3-way merge algorithm. When\n           there is more than one common ancestor that can be used for 3-way\n           merge, it creates a merged tree of the common ancestors and uses\n           that as the reference tree for the 3-way merge. This has been\n           reported to result in fewer merge conflicts without causing\n           mismerges by tests done on actual merge commits taken from Linux\n           2.6 kernel development history. Additionally this can detect and\n           handle merges involving renames, but currently cannot make use of\n           detected copies. This is the default merge strategy when pulling or\n           merging one branch.\n\n           The recursive strategy can take the following options:\n\n           ours\n               This option forces conflicting hunks to be auto-resolved\n               cleanly by favoring our version. Changes from the other tree\n               that do not conflict with our side are reflected in the merge\n               result. For a binary file, the entire contents are taken from\n               our side.\n\n               This should not be confused with the ours merge strategy, which\n               does not even look at what the other tree contains at all. It\n               discards everything the other tree did, declaring our history\n               contains all that happened in it.\n\n           theirs\n               This is the opposite of ours; note that, unlike ours, there is\n               no theirs merge strategy to confuse this merge option with.\n\n           patience\n               With this option, merge-recursive spends a little extra time to\n               avoid mismerges that sometimes occur due to unimportant\n               matching lines (e.g., braces from distinct functions). Use this\n               when the branches to be merged have diverged wildly. See also\n               git-diff(1) --patience.\n\n           diff-algorithm=[patience|minimal|histogram|myers]\n               Tells merge-recursive to use a different diff algorithm, which\n               can help avoid mismerges that occur due to unimportant matching\n               lines (such as braces from distinct functions). See also git-\n               diff(1) --diff-algorithm.\n\n           ignore-space-change, ignore-all-space, ignore-space-at-eol,\n           ignore-cr-at-eol\n               Treats lines with the indicated type of whitespace change as\n               unchanged for the sake of a three-way merge. Whitespace changes\n               mixed with other changes to a line are not ignored. See also\n               git-diff(1) -b, -w, --ignore-space-at-eol, and\n               --ignore-cr-at-eol.\n\n               o   If their version only introduces whitespace changes to a\n                   line, our version is used;\n\n               o   If our version introduces whitespace changes but their\n                   version includes a substantial change, their version is\n                   used;\n\n               o   Otherwise, the merge proceeds in the usual way.\n\n           renormalize\n               This runs a virtual check-out and check-in of all three stages\n               of a file when resolving a three-way merge. This option is\n               meant to be used when merging branches with different clean\n               filters or end-of-line normalization rules. See "Merging\n               branches with differing checkin/checkout attributes" in\n               gitattributes(5) for details.\n\n           no-renormalize\n               Disables the renormalize option. This overrides the\n               merge.renormalize configuration variable.\n\n           no-renames\n               Turn off rename detection. This overrides the merge.renames\n               configuration variable. See also git-diff(1) --no-renames.\n\n           find-renames[=<n>]\n               Turn on rename detection, optionally setting the similarity\n               threshold. This is the default. This overrides the\n               merge.renames configuration variable. See also git-diff(1)\n               --find-renames.\n\n           rename-threshold=<n>\n               Deprecated synonym for find-renames=<n>.\n\n           subtree[=<path>]\n               This option is a more advanced form of subtree strategy, where\n               the strategy makes a guess on how two trees must be shifted to\n               match with each other when merging. Instead, the specified path\n               is prefixed (or stripped from the beginning) to make the shape\n               of two trees to match.\n\n       octopus\n           This resolves cases with more than two heads, but refuses to do a\n           complex merge that needs manual resolution. It is primarily meant\n           to be used for bundling topic branch heads together. This is the\n           default merge strategy when pulling or merging more than one\n           branch.\n\n       ours\n           This resolves any number of heads, but the resulting tree of the\n           merge is always that of the current branch head, effectively\n           ignoring all changes from all other branches. It is meant to be\n           used to supersede old development history of side branches. Note\n           that this is different from the -Xours option to the recursive\n           merge strategy.\n\n       subtree\n           This is a modified recursive strategy. When merging trees A and B,\n           if B corresponds to a subtree of A, B is first adjusted to match\n           the tree structure of A, instead of reading the trees at the same\n           level. This adjustment is also done to the common ancestor tree.\n\n       With the strategies that use 3-way merge (including the default,\n       recursive), if a change is made on both branches, but later reverted on\n       one of the branches, that change will be present in the merged result;\n       some people find this behavior confusing. It occurs because only the\n       heads and the merge base are considered when performing a merge, not\n       the individual commits. The merge algorithm therefore considers the\n       reverted change as no change at all, and substitutes the changed\n       version instead.\n\nNOTES\n       You should understand the implications of using git rebase on a\n       repository that you share. See also RECOVERING FROM UPSTREAM REBASE\n       below.\n\n       When the git-rebase command is run, it will first execute a\n       "pre-rebase" hook if one exists. You can use this hook to do sanity\n       checks and reject the rebase if it isn\'t appropriate. Please see the\n       template pre-rebase hook script for an example.\n\n       Upon completion, <branch> will be the current branch.\n\nINTERACTIVE MODE\n       Rebasing interactively means that you have a chance to edit the commits\n       which are rebased. You can reorder the commits, and you can remove them\n       (weeding out bad or otherwise unwanted patches).\n\n       The interactive mode is meant for this type of workflow:\n\n        1. have a wonderful idea\n\n        2. hack on the code\n\n        3. prepare a series for submission\n\n        4. submit\n\n       where point 2. consists of several instances of\n\n       a) regular use\n\n        1. finish something worthy of a commit\n\n        2. commit\n\n       b) independent fixup\n\n        1. realize that something does not work\n\n        2. fix that\n\n        3. commit it\n\n       Sometimes the thing fixed in b.2. cannot be amended to the not-quite\n       perfect commit it fixes, because that commit is buried deeply in a\n       patch series. That is exactly what interactive rebase is for: use it\n       after plenty of "a"s and "b"s, by rearranging and editing commits, and\n       squashing multiple commits into one.\n\n       Start it with the last commit you want to retain as-is:\n\n           git rebase -i <after-this-commit>\n\n       An editor will be fired up with all the commits in your current branch\n       (ignoring merge commits), which come after the given commit. You can\n       reorder the commits in this list to your heart\'s content, and you can\n       remove them. The list looks more or less like this:\n\n           pick deadbee The oneline of this commit\n           pick fa1afe1 The oneline of the next commit\n           ...\n\n\n       The oneline descriptions are purely for your pleasure; git rebase will\n       not look at them but at the commit names ("deadbee" and "fa1afe1" in\n       this example), so do not delete or edit the names.\n\n       By replacing the command "pick" with the command "edit", you can tell\n       git rebase to stop after applying that commit, so that you can edit the\n       files and/or the commit message, amend the commit, and continue\n       rebasing.\n\n       To interrupt the rebase (just like an "edit" command would do, but\n       without cherry-picking any commit first), use the "break" command.\n\n       If you just want to edit the commit message for a commit, replace the\n       command "pick" with the command "reword".\n\n       To drop a commit, replace the command "pick" with "drop", or just\n       delete the matching line.\n\n       If you want to fold two or more commits into one, replace the command\n       "pick" for the second and subsequent commits with "squash" or "fixup".\n       If the commits had different authors, the folded commit will be\n       attributed to the author of the first commit. The suggested commit\n       message for the folded commit is the concatenation of the commit\n       messages of the first commit and of those with the "squash" command,\n       but omits the commit messages of commits with the "fixup" command.\n\n       git rebase will stop when "pick" has been replaced with "edit" or when\n       a command fails due to merge errors. When you are done editing and/or\n       resolving conflicts you can continue with git rebase --continue.\n\n       For example, if you want to reorder the last 5 commits, such that what\n       was HEAD~4 becomes the new HEAD. To achieve that, you would call git\n       rebase like this:\n\n           $ git rebase -i HEAD~5\n\n\n       And move the first patch to the end of the list.\n\n       You might want to recreate merge commits, e.g. if you have a history\n       like this:\n\n                      X\n                       \\\n                    A---M---B\n                   /\n           ---o---O---P---Q\n\n\n       Suppose you want to rebase the side branch starting at "A" to "Q". Make\n       sure that the current HEAD is "B", and call\n\n           $ git rebase -i -r --onto Q O\n\n\n       Reordering and editing commits usually creates untested intermediate\n       steps. You may want to check that your history editing did not break\n       anything by running a test, or at least recompiling at intermediate\n       points in history by using the "exec" command (shortcut "x"). You may\n       do so by creating a todo list like this one:\n\n           pick deadbee Implement feature XXX\n           fixup f1a5c00 Fix to feature XXX\n           exec make\n           pick c0ffeee The oneline of the next commit\n           edit deadbab The oneline of the commit after\n           exec cd subdir; make test\n           ...\n\n\n       The interactive rebase will stop when a command fails (i.e. exits with\n       non-0 status) to give you an opportunity to fix the problem. You can\n       continue with git rebase --continue.\n\n       The "exec" command launches the command in a shell (the one specified\n       in $SHELL, or the default shell if $SHELL is not set), so you can use\n       shell features (like "cd", ">", ";" ...). The command is run from the\n       root of the working tree.\n\n           $ git rebase -i --exec "make test"\n\n\n       This command lets you check that intermediate commits are compilable.\n       The todo list becomes like that:\n\n           pick 5928aea one\n           exec make test\n           pick 04d0fda two\n           exec make test\n           pick ba46169 three\n           exec make test\n           pick f4593f9 four\n           exec make test\n\n\nSPLITTING COMMITS\n       In interactive mode, you can mark commits with the action "edit".\n       However, this does not necessarily mean that git rebase expects the\n       result of this edit to be exactly one commit. Indeed, you can undo the\n       commit, or you can add other commits. This can be used to split a\n       commit into two:\n\n       o   Start an interactive rebase with git rebase -i <commit>^, where\n           <commit> is the commit you want to split. In fact, any commit range\n           will do, as long as it contains that commit.\n\n       o   Mark the commit you want to split with the action "edit".\n\n       o   When it comes to editing that commit, execute git reset HEAD^. The\n           effect is that the HEAD is rewound by one, and the index follows\n           suit. However, the working tree stays the same.\n\n       o   Now add the changes to the index that you want to have in the first\n           commit. You can use git add (possibly interactively) or git gui (or\n           both) to do that.\n\n       o   Commit the now-current index with whatever commit message is\n           appropriate now.\n\n       o   Repeat the last two steps until your working tree is clean.\n\n       o   Continue the rebase with git rebase --continue.\n\n       If you are not absolutely sure that the intermediate revisions are\n       consistent (they compile, pass the testsuite, etc.) you should use git\n       stash to stash away the not-yet-committed changes after each commit,\n       test, and amend the commit if fixes are necessary.\n\nRECOVERING FROM UPSTREAM REBASE\n       Rebasing (or any other form of rewriting) a branch that others have\n       based work on is a bad idea: anyone downstream of it is forced to\n       manually fix their history. This section explains how to do the fix\n       from the downstream\'s point of view. The real fix, however, would be to\n       avoid rebasing the upstream in the first place.\n\n       To illustrate, suppose you are in a situation where someone develops a\n       subsystem branch, and you are working on a topic that is dependent on\n       this subsystem. You might end up with a history like the following:\n\n               o---o---o---o---o---o---o---o  main\n                    \\\n                     o---o---o---o---o  subsystem\n                                      \\\n                                       *---*---*  topic\n\n\n       If subsystem is rebased against main, the following happens:\n\n               o---o---o---o---o---o---o---o  main\n                    \\                       \\\n                     o---o---o---o---o       o\'--o\'--o\'--o\'--o\'  subsystem\n                                      \\\n                                       *---*---*  topic\n\n\n       If you now continue development as usual, and eventually merge topic to\n       subsystem, the commits from subsystem will remain duplicated forever:\n\n               o---o---o---o---o---o---o---o  main\n                    \\                       \\\n                     o---o---o---o---o       o\'--o\'--o\'--o\'--o\'--M  subsystem\n                                      \\                         /\n                                       *---*---*-..........-*--*  topic\n\n\n       Such duplicates are generally frowned upon because they clutter up\n       history, making it harder to follow. To clean things up, you need to\n       transplant the commits on topic to the new subsystem tip, i.e., rebase\n       topic. This becomes a ripple effect: anyone downstream from topic is\n       forced to rebase too, and so on!\n\n       There are two kinds of fixes, discussed in the following subsections:\n\n       Easy case: The changes are literally the same.\n           This happens if the subsystem rebase was a simple rebase and had no\n           conflicts.\n\n       Hard case: The changes are not the same.\n           This happens if the subsystem rebase had conflicts, or used\n           --interactive to omit, edit, squash, or fixup commits; or if the\n           upstream used one of commit --amend, reset, or a full history\n           rewriting command like filter-repo[2].\n\n   The easy case\n       Only works if the changes (patch IDs based on the diff contents) on\n       subsystem are literally the same before and after the rebase subsystem\n       did.\n\n       In that case, the fix is easy because git rebase knows to skip changes\n       that are already present in the new upstream (unless\n       --reapply-cherry-picks is given). So if you say (assuming you\'re on\n       topic)\n\n               $ git rebase subsystem\n\n\n       you will end up with the fixed history\n\n               o---o---o---o---o---o---o---o  main\n                                            \\\n                                             o\'--o\'--o\'--o\'--o\'  subsystem\n                                                              \\\n                                                               *---*---*  topic\n\n\n   The hard case\n       Things get more complicated if the subsystem changes do not exactly\n       correspond to the ones before the rebase.\n\n           Note\n           While an "easy case recovery" sometimes appears to be successful\n           even in the hard case, it may have unintended consequences. For\n           example, a commit that was removed via git rebase --interactive\n           will be resurrected!\n\n       The idea is to manually tell git rebase "where the old subsystem ended\n       and your topic began", that is, what the old merge base between them\n       was. You will have to find a way to name the last commit of the old\n       subsystem, for example:\n\n       o   With the subsystem reflog: after git fetch, the old tip of\n           subsystem is at subsystem@{1}. Subsequent fetches will increase the\n           number. (See git-reflog(1).)\n\n       o   Relative to the tip of topic: knowing that your topic has three\n           commits, the old tip of subsystem must be topic~3.\n\n       You can then transplant the old subsystem..topic to the new tip by\n       saying (for the reflog case, and assuming you are on topic already):\n\n               $ git rebase --onto subsystem subsystem@{1}\n\n\n       The ripple effect of a "hard case" recovery is especially bad: everyone\n       downstream from topic will now have to perform a "hard case" recovery\n       too!\n\nREBASING MERGES\n       The interactive rebase command was originally designed to handle\n       individual patch series. As such, it makes sense to exclude merge\n       commits from the todo list, as the developer may have merged the\n       then-current main while working on the branch, only to rebase all the\n       commits onto main eventually (skipping the merge commits).\n\n       However, there are legitimate reasons why a developer may want to\n       recreate merge commits: to keep the branch structure (or "commit\n       topology") when working on multiple, inter-related branches.\n\n       In the following example, the developer works on a topic branch that\n       refactors the way buttons are defined, and on another topic branch that\n       uses that refactoring to implement a "Report a bug" button. The output\n       of git log --graph --format=%s -5 may look like this:\n\n           *   Merge branch \'report-a-bug\'\n           |\\\n           | * Add the feedback button\n           * | Merge branch \'refactor-button\'\n           |\\ \\\n           | |/\n           | * Use the Button class for all buttons\n           | * Extract a generic Button class from the DownloadButton one\n\n\n       The developer might want to rebase those commits to a newer main\n       while keeping the branch topology, for example when the first topic\n       branch is expected to be integrated into main much earlier than the\n       second one, say, to resolve merge conflicts with changes to the\n       DownloadButton class that made it into main.\n\n       This rebase can be performed using the --rebase-merges option. It will\n       generate a todo list looking like this:\n\n           label onto\n\n           # Branch: refactor-button\n           reset onto\n           pick 123456 Extract a generic Button class from the DownloadButton one\n           pick 654321 Use the Button class for all buttons\n           label refactor-button\n\n           # Branch: report-a-bug\n           reset refactor-button # Use the Button class for all buttons\n           pick abcdef Add the feedback button\n           label report-a-bug\n\n           reset onto\n           merge -C a1b2c3 refactor-button # Merge \'refactor-button\'\n           merge -C 6f5e4d report-a-bug # Merge \'report-a-bug\'\n\n\n       In contrast to a regular interactive rebase, there are label, reset and\n       merge commands in addition to pick ones.\n\n       The label command associates a label with the current HEAD when that\n       command is executed. These labels are created as worktree-local refs\n       (refs/rewritten/<label>) that will be deleted when the rebase finishes.\n       That way, rebase operations in multiple worktrees linked to the same\n       repository do not interfere with one another. If the label command\n       fails, it is rescheduled immediately, with a helpful message how to\n       proceed.\n\n       The reset command resets the HEAD, index and worktree to the specified\n       revision. It is similar to an exec git reset --hard <label>, but\n       refuses to overwrite untracked files. If the reset command fails, it is\n       rescheduled immediately, with a helpful message how to edit the todo\n       list (this typically happens when a reset command was inserted into the\n       todo list manually and contains a typo).\n\n       The merge command will merge the specified revision(s) into whatever is\n       HEAD at that time. With -C <original-commit>, the commit message of the\n       specified merge commit will be used. When the -C is changed to a\n       lower-case -c, the message will be opened in an editor after a\n       successful merge so that the user can edit the message.\n\n       If a merge command fails for any reason other than merge conflicts\n       (i.e. when the merge operation did not even start), it is rescheduled\n       immediately.\n\n       At this time, the merge command will always use the recursive merge\n       strategy for regular merges, and octopus for octopus merges, with no\n       way to choose a different one. To work around this, an exec command can\n       be used to call git merge explicitly, using the fact that the labels\n       are worktree-local refs (the ref refs/rewritten/onto would correspond\n       to the label onto, for example).\n\n       Note: the first command (label onto) labels the revision onto which the\n       commits are rebased; The name onto is just a convention, as a nod to\n       the --onto option.\n\n       It is also possible to introduce completely new merge commits from\n       scratch by adding a command of the form merge <merge-head>. This form\n       will generate a tentative commit message and always open an editor to\n       let the user edit it. This can be useful e.g. when a topic branch turns\n       out to address more than a single concern and wants to be split into\n       two or even more topic branches. Consider this todo list:\n\n           pick 192837 Switch from GNU Makefiles to CMake\n           pick 5a6c7e Document the switch to CMake\n           pick 918273 Fix detection of OpenSSL in CMake\n           pick afbecd http: add support for TLS v1.3\n           pick fdbaec Fix detection of cURL in CMake on Windows\n\n\n       The one commit in this list that is not related to CMake may very well\n       have been motivated by working on fixing all those bugs introduced by\n       switching to CMake, but it addresses a different concern. To split this\n       branch into two topic branches, the todo list could be edited like\n       this:\n\n           label onto\n\n           pick afbecd http: add support for TLS v1.3\n           label tlsv1.3\n\n           reset onto\n           pick 192837 Switch from GNU Makefiles to CMake\n           pick 918273 Fix detection of OpenSSL in CMake\n           pick fdbaec Fix detection of cURL in CMake on Windows\n           pick 5a6c7e Document the switch to CMake\n           label cmake\n\n           reset onto\n           merge tlsv1.3\n           merge cmake\n\n\nBUGS\n       The todo list presented by the deprecated --preserve-merges\n       --interactive does not represent the topology of the revision graph\n       (use --rebase-merges instead). Editing commits and rewording their\n       commit messages should work fine, but attempts to reorder commits tend\n       to produce counterintuitive results. Use --rebase-merges in such\n       scenarios instead.\n\n       For example, an attempt to rearrange\n\n           1 --- 2 --- 3 --- 4 --- 5\n\n\n       to\n\n           1 --- 2 --- 4 --- 3 --- 5\n\n\n       by moving the "pick 4" line will result in the following history:\n\n                   3\n                  /\n           1 --- 2 --- 4 --- 5\n\n\nGIT\n       Part of the git(1) suite\n\nNOTES\n        1. revert-a-faulty-merge How-To\n           git-htmldocs/howto/revert-a-faulty-merge.html\n\n        2. filter-repo\n           https://github.com/newren/git-filter-repo\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                     GIT-REBASE(1)\n')),(0,a.kt)("h2",{id:"reset"},(0,a.kt)("inlineCode",{parentName:"h2"},"reset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-RESET(1)                      Git Manual                      GIT-RESET(1)\n\n\n\nNAME\n       git-reset - \u73fe\u5728\u306eHEAD\u3092\u6307\u5b9a\u3055\u308c\u305f\u72b6\u614b\u306b\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n\nSYNOPSIS\n       git reset [-q] [<tree-ish>] [--] <pathspec>...\n       git reset [-q] [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]\n       git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>...]\n       git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]\n\n\nDESCRIPTION\n       \u6700\u521d\u306e3\u3064\u306e\u5f62\u5f0f\u3067\u3001\u30a8\u30f3\u30c8\u30ea\u3092 <tree-ish> \u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n       \u6700\u5f8c\u306e\u5f62\u5f0f\u3067\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\uff08HEAD\uff09\u3092 <commit> \u306b\u8a2d\u5b9a\u3057\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\n       \u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n       <tree-ish>/<commit> \u306f\u3001\u3059\u3079\u3066\u306e\u5f62\u5f0f\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 HEAD\u306b\u306a\u308a\u307e\u3059\u3002\n\n       git reset [-q] [<tree-ish>] [--] <pathspec>..., git reset [-q]\n       [--pathspec-from-file=<file> [--pathspec-file-nul]] [<tree-ish>]\n           These forms reset the index entries for all paths that match the\n           <pathspec> to their state at <tree-ish>. (It does not affect the\n           working tree or the current branch.)\n\n           This means that git reset <pathspec> is the opposite of git add\n           <pathspec>. This command is equivalent to git restore\n           [--source=<tree-ish>] --staged <pathspec>....\n\n           After running git reset <pathspec> to update the index entry, you\n           can use git-restore(1) to check the contents out of the index to\n           the working tree. Alternatively, using git-restore(1) and\n           specifying a commit with --source, you can copy the contents of a\n           path out of a commit to the index and to the working tree in one\n           go.\n\n       git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>...]\n           Interactively select hunks in the difference between the index and\n           <tree-ish> (defaults to HEAD). The chosen hunks are applied in\n           reverse to the index.\n\n           This means that git reset -p is the opposite of git add -p, i.e.\n           you can use it to selectively reset hunks. See the "Interactive\n           Mode" section of git-add(1) to learn how to operate the --patch\n           mode.\n\n       git reset [<mode>] [<commit>]\n           This form resets the current branch head to <commit> and possibly\n           updates the index (resetting it to the tree of <commit>) and the\n           working tree depending on <mode>. If <mode> is omitted, defaults to\n           --mixed. The <mode> must be one of the following:\n\n           --soft\n               Does not touch the index file or the working tree at all (but\n               resets the head to <commit>, just like all modes do). This\n               leaves all your changed files "Changes to be committed", as git\n               status would put it.\n\n           --mixed\n               Resets the index but not the working tree (i.e., the changed\n               files are preserved but not marked for commit) and reports what\n               has not been updated. This is the default action.\n\n               If -N is specified, removed paths are marked as intent-to-add\n               (see git-add(1)).\n\n           --hard\n               Resets the index and working tree. Any changes to tracked files\n               in the working tree since <commit> are discarded.\n\n           --merge\n               Resets the index and updates the files in the working tree that\n               are different between <commit> and HEAD, but keeps those which\n               are different between the index and working tree (i.e. which\n               have changes which have not been added). If a file that is\n               different between <commit> and the index has unstaged changes,\n               reset is aborted.\n\n               In other words, --merge does something like a git read-tree -u\n               -m <commit>, but carries forward unmerged index entries.\n\n           --keep\n               Resets index entries and updates files in the working tree that\n               are different between <commit> and HEAD. If a file that is\n               different between <commit> and HEAD has local changes, reset is\n               aborted.\n\n           --[no-]recurse-submodules\n               When the working tree is updated, using --recurse-submodules\n               will also recursively reset the working tree of all active\n               submodules according to the commit recorded in the\n               superproject, also setting the submodules\' HEAD to be detached\n               at that commit.\n\n       See "Reset, restore and revert" in git(1) for the differences between\n       the three commands.\n\nOPTIONS\n       -q, --quiet, --no-quiet\n           Be quiet, only report errors. The default behavior is set by the\n           reset.quiet config option.  --quiet and --no-quiet will override\n           the default behavior.\n\n       --pathspec-from-file=<file>\n           Pathspec is passed in <file> instead of commandline args. If <file>\n           is exactly - then standard input is used. Pathspec elements are\n           separated by LF or CR/LF. Pathspec elements can be quoted as\n           explained for the configuration variable core.quotePath (see git-\n           config(1)). See also --pathspec-file-nul and global\n           --literal-pathspecs.\n\n       --pathspec-file-nul\n           Only meaningful with --pathspec-from-file. Pathspec elements are\n           separated with NUL character and all other characters are taken\n           literally (including newlines and quotes).\n\n       --\n           Do not interpret any more arguments as options.\n\n       <pathspec>...\n           Limits the paths affected by the operation.\n\n           For more details, see the pathspec entry in gitglossary(7).\n\nEXAMPLES\n       Undo add\n\n               $ edit                                     (1)\n               $ git add frotz.c filfre.c\n               $ mailx                                    (2)\n               $ git reset                                (3)\n               $ git pull git://info.example.com/ nitfol  (4)\n\n           1. You are happily working on something, and find the changes in\n           these files are in good order. You do not want to see them when you\n           run git diff, because you plan to work on other files and changes\n           with these files are distracting.\n           2. Somebody asks you to pull, and the changes sound worthy of\n           merging.\n           3. However, you already dirtied the index (i.e. your index does not\n           match the HEAD commit). But you know the pull you are going to make\n           does not affect frotz.c or filfre.c, so you revert the index\n           changes for these two files. Your changes in working tree remain\n           there.\n           4. Then you can pull and merge, leaving frotz.c and filfre.c\n           changes still in the working tree.\n\n       Undo a commit and redo\n\n               $ git commit ...\n               $ git reset --soft HEAD^      (1)\n               $ edit                        (2)\n               $ git commit -a -c ORIG_HEAD  (3)\n\n           1. This is most often done when you remembered what you just\n           committed is incomplete, or you misspelled your commit message, or\n           both. Leaves working tree as it was before "reset".\n           2. Make corrections to working tree files.\n           3. "reset" copies the old head to .git/ORIG_HEAD; redo the commit\n           by starting with its log message. If you do not need to edit the\n           message further, you can give -C option instead.\n\n           See also the --amend option to git-commit(1).\n\n       Undo a commit, making it a topic branch\n\n               $ git branch topic/wip          (1)\n               $ git reset --hard HEAD~3       (2)\n               $ git switch topic/wip          (3)\n\n           1. You have made some commits, but realize they were premature to\n           be in the main branch. You want to continue polishing them in a\n           topic branch, so create topic/wip branch off of the current HEAD.\n           2. Rewind the main branch to get rid of those three commits.\n           3. Switch to topic/wip branch and keep working.\n\n       Undo commits permanently\n\n               $ git commit ...\n               $ git reset --hard HEAD~3   (1)\n\n           1. The last three commits (HEAD, HEAD^, and HEAD~2) were bad and\n           you do not want to ever see them again. Do not do this if you have\n           already given these commits to somebody else. (See the "RECOVERING\n           FROM UPSTREAM REBASE" section in git-rebase(1) for the implications\n           of doing so.)\n\n       Undo a merge or pull\n\n               $ git pull                         (1)\n               Auto-merging nitfol\n               CONFLICT (content): Merge conflict in nitfol\n               Automatic merge failed; fix conflicts and then commit the result.\n               $ git reset --hard                 (2)\n               $ git pull . topic/branch          (3)\n               Updating from 41223... to 13134...\n               Fast-forward\n               $ git reset --hard ORIG_HEAD       (4)\n\n           1. Try to update from the upstream resulted in a lot of conflicts;\n           you were not ready to spend a lot of time merging right now, so you\n           decide to do that later.\n           2. "pull" has not made merge commit, so git reset --hard which is a\n           synonym for git reset --hard HEAD clears the mess from the index\n           file and the working tree.\n           3. Merge a topic branch into the current branch, which resulted in\n           a fast-forward.\n           4. But you decided that the topic branch is not ready for public\n           consumption yet. "pull" or "merge" always leaves the original tip\n           of the current branch in ORIG_HEAD, so resetting hard to it brings\n           your index file and the working tree back to that state, and resets\n           the tip of the branch to that commit.\n\n       Undo a merge or pull inside a dirty working tree\n\n               $ git pull                         (1)\n               Auto-merging nitfol\n               Merge made by recursive.\n                nitfol                |   20 +++++----\n                ...\n               $ git reset --merge ORIG_HEAD      (2)\n\n           1. Even if you may have local modifications in your working tree,\n           you can safely say git pull when you know that the change in the\n           other branch does not overlap with them.\n           2. After inspecting the result of the merge, you may find that the\n           change in the other branch is unsatisfactory. Running git reset\n           --hard ORIG_HEAD will let you go back to where you were, but it\n           will discard your local changes, which you do not want.  git reset\n           --merge keeps your local changes.\n\n       Interrupted workflow\n           Suppose you are interrupted by an urgent fix request while you are\n           in the middle of a large change. The files in your working tree are\n           not in any shape to be committed yet, but you need to get to the\n           other branch for a quick bugfix.\n\n               $ git switch feature  ;# you were working in "feature" branch and\n               $ work work work      ;# got interrupted\n               $ git commit -a -m "snapshot WIP"                 (1)\n               $ git switch main\n               $ fix fix fix\n               $ git commit ;# commit with real log\n               $ git switch feature\n               $ git reset --soft HEAD^ ;# go back to WIP state  (2)\n               $ git reset                                       (3)\n\n           1. This commit will get blown away so a throw-away log message is\n           OK.\n           2. This removes the WIP commit from the commit history, and sets\n           your working tree to the state just before you made that snapshot.\n           3. At this point the index file still has all the WIP changes you\n           committed as snapshot WIP. This updates the index to show your WIP\n           files as uncommitted.\n\n           See also git-stash(1).\n\n       Reset a single file in the index\n           Suppose you have added a file to your index, but later decide you\n           do not want to add it to your commit. You can remove the file from\n           the index while keeping your changes with git reset.\n\n               $ git reset -- frotz.c                      (1)\n               $ git commit -m "Commit files in index"     (2)\n               $ git add frotz.c                           (3)\n\n           1. This removes the file from the index while keeping it in the\n           working directory.\n           2. This commits all other changes in the index.\n           3. Adds the file to the index again.\n\n       Keep changes in working tree while discarding some previous commits\n           Suppose you are working on something and you commit it, and then\n           you continue working a bit more, but now you think that what you\n           have in your working tree should be in another branch that has\n           nothing to do with what you committed previously. You can start a\n           new branch and reset it while keeping the changes in your working\n           tree.\n\n               $ git tag start\n               $ git switch -c branch1\n               $ edit\n               $ git commit ...                            (1)\n               $ edit\n               $ git switch -c branch2                     (2)\n               $ git reset --keep start                    (3)\n\n           1. This commits your first edits in branch1.\n           2. In the ideal world, you could have realized that the earlier\n           commit did not belong to the new topic when you created and\n           switched to branch2 (i.e.  git switch -c branch2 start), but nobody\n           is perfect.\n           3. But you can use reset --keep to remove the unwanted commit after\n           you switched to branch2.\n\n       Split a commit apart into a sequence of commits\n           Suppose that you have created lots of logically separate changes\n           and committed them together. Then, later you decide that it might\n           be better to have each logical chunk associated with its own\n           commit. You can use git reset to rewind history without changing\n           the contents of your local files, and then successively use git add\n           -p to interactively select which hunks to include into each commit,\n           using git commit -c to pre-populate the commit message.\n\n               $ git reset -N HEAD^                        (1)\n               $ git add -p                                (2)\n               $ git diff --cached                         (3)\n               $ git commit -c HEAD@{1}                    (4)\n               ...                                         (5)\n               $ git add ...                               (6)\n               $ git diff --cached                         (7)\n               $ git commit ...                            (8)\n\n           1. First, reset the history back one commit so that we remove the\n           original commit, but leave the working tree with all the changes.\n           The -N ensures that any new files added with HEAD are still marked\n           so that git add -p will find them.\n           2. Next, we interactively select diff hunks to add using the git\n           add -p facility. This will ask you about each diff hunk in sequence\n           and you can use simple commands such as "yes, include this", "No\n           don\'t include this" or even the very powerful "edit" facility.\n           3. Once satisfied with the hunks you want to include, you should\n           verify what has been prepared for the first commit by using git\n           diff --cached. This shows all the changes that have been moved into\n           the index and are about to be committed.\n           4. Next, commit the changes stored in the index. The -c option\n           specifies to pre-populate the commit message from the original\n           message that you started with in the first commit. This is helpful\n           to avoid retyping it. The HEAD@{1} is a special notation for the\n           commit that HEAD used to be at prior to the original reset commit\n           (1 change ago). See git-reflog(1) for more details. You may also\n           use any other valid commit reference.\n           5. You can repeat steps 2-4 multiple times to break the original\n           code into any number of commits.\n           6. Now you\'ve split out many of the changes into their own commits,\n           and might no longer use the patch mode of git add, in order to\n           select all remaining uncommitted changes.\n           7. Once again, check to verify that you\'ve included what you want\n           to. You may also wish to verify that git diff doesn\'t show any\n           remaining changes to be committed later.\n           8. And finally create the final commit.\n\nDISCUSSION\n       The tables below show what happens when running:\n\n           git reset --option target\n\n\n       to reset the HEAD to another commit (target) with the different reset\n       options depending on the state of the files.\n\n       In these tables, A, B, C and D are some different states of a file. For\n       example, the first line of the first table means that if a file is in\n       state A in the working tree, in state B in the index, in state C in\n       HEAD and in state D in the target, then git reset --soft target will\n       leave the file in the working tree in state A and in the index in state\n       B. It resets (i.e. moves) the HEAD (i.e. the tip of the current branch,\n       if you are on one) to target (which has the file in state D).\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            A       B     C    D     --soft   A       B     D\n                                     --mixed  A       D     D\n                                     --hard   D       D     D\n                                     --merge (disallowed)\n                                     --keep  (disallowed)\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            A       B     C    C     --soft   A       B     C\n                                     --mixed  A       C     C\n                                     --hard   C       C     C\n                                     --merge (disallowed)\n                                     --keep   A       C     C\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            B       B     C    D     --soft   B       B     D\n                                     --mixed  B       D     D\n                                     --hard   D       D     D\n                                     --merge  D       D     D\n                                     --keep  (disallowed)\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            B       B     C    C     --soft   B       B     C\n                                     --mixed  B       C     C\n                                     --hard   C       C     C\n                                     --merge  C       C     C\n                                     --keep   B       C     C\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            B       C     C    D     --soft   B       C     D\n                                     --mixed  B       D     D\n                                     --hard   D       D     D\n                                     --merge (disallowed)\n                                     --keep  (disallowed)\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            B       C     C    C     --soft   B       C     C\n                                     --mixed  B       C     C\n                                     --hard   C       C     C\n                                     --merge  B       C     C\n                                     --keep   B       C     C\n\n       reset --merge is meant to be used when resetting out of a conflicted\n       merge. Any mergy operation guarantees that the working tree file that\n       is involved in the merge does not have a local change with respect to\n       the index before it starts, and that it writes the result out to the\n       working tree. So if we see some difference between the index and the\n       target and also between the index and the working tree, then it means\n       that we are not resetting out from a state that a mergy operation left\n       after failing with a conflict. That is why we disallow --merge option\n       in this case.\n\n       reset --keep is meant to be used when removing some of the last commits\n       in the current branch while keeping changes in the working tree. If\n       there could be conflicts between the changes in the commit we want to\n       remove and the changes in the working tree we want to keep, the reset\n       is disallowed. That\'s why it is disallowed if there are both changes\n       between the working tree and HEAD, and between HEAD and the target. To\n       be safe, it is also disallowed when there are unmerged entries.\n\n       The following tables show what happens when there are unmerged entries:\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            X       U     A    B     --soft  (disallowed)\n                                     --mixed  X       B     B\n                                     --hard   B       B     B\n                                     --merge  B       B     B\n                                     --keep  (disallowed)\n\n           working index HEAD target         working index HEAD\n           ----------------------------------------------------\n            X       U     A    A     --soft  (disallowed)\n                                     --mixed  X       A     A\n                                     --hard   A       A     A\n                                     --merge  A       A     A\n                                     --keep  (disallowed)\n\n       X means any state and U means an unmerged index.\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                      GIT-RESET(1)\n')),(0,a.kt)("h2",{id:"switch"},(0,a.kt)("inlineCode",{parentName:"h2"},"switch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-SWITCH(1)                     Git Manual                     GIT-SWITCH(1)\n\n\n\nNAME\n       git-switch - \u30d6\u30e9\u30f3\u30c1\u3092\u5207\u308a\u66ff\u3048\u308b\n\nSYNOPSIS\n       git switch [<options>] [--no-guess] <branch>\n       git switch [<options>] --detach [<start-point>]\n       git switch [<options>] (-c|-C) <new-branch> [<start-point>]\n       git switch [<options>] --orphan <new-branch>\n\n\nDESCRIPTION\n       \n       \u6307\u5b9a\u3055\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u306b\u5207\u308a\u66ff\u3048\u307e\u3059\u3002\n       \u4f5c\u696d\u30c4\u30ea\u30fc\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u3001\u30d6\u30e9\u30f3\u30c1\u306b\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\n       \u3059\u3079\u3066\u306e\u65b0\u3057\u3044\u30b3\u30df\u30c3\u30c8\u306f\u3001\u3053\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u5148\u7aef\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n       \n       \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001\u540c\u3058\u540d\u524d\u306e\u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u81ea\u52d5\u7684\u306b -c\u3001-C \u3092\u4f7f\u7528\u3057\u3066\n       \u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3059\u308b\u304b\uff08--guess \u3092\u53c2\u7167\uff09\u3001\u5207\u308a\u66ff\u3048\u3068\u5171\u306b\u3001\n       --detach \u3092\u4f7f\u7528\u3057\u3066\u4efb\u610f\u306e\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u4f5c\u696d\u30c4\u30ea\u30fc\u3092\u30c7\u30bf\u30c3\u30c1\u3067\u304d\u307e\u3059\u3002\n       \n       \u30d6\u30e9\u30f3\u30c1\u3092\u5207\u308a\u66ff\u3048\u308b\u306b\u306f\u3001\u30af\u30ea\u30fc\u30f3\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u4f5c\u696d\u30c4\u30ea\u30fc\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\n       \uff08\u3064\u307e\u308a\u3001HEAD \u3068\u306e\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n       \u305f\u3060\u3057\u3001--discard-changes \u307e\u305f\u306f --merge \u3067\u7279\u306b\u6307\u793a\u3055\u308c\u306a\u3044\u9650\u308a\u3001\n       \u64cd\u4f5c\u306b\u3088\u3063\u3066\u30ed\u30fc\u30ab\u30eb\u5909\u66f4\u304c\u5931\u308f\u308c\u308b\u3068\u3001\u64cd\u4f5c\u306f\u4e2d\u6b62\u3055\u308c\u307e\u3059\u3002\n\n       \u3053\u306e\u30b3\u30de\u30f3\u30c9\u306f\u5b9f\u9a13\u7684\u306a\u3082\u306e\u3067\u3059\u3002\u52d5\u4f5c\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\nOPTIONS\n       <branch>\n           Branch to switch to.\n\n       <new-branch>\n           Name for the new branch.\n\n       <start-point>\n           The starting point for the new branch. Specifying a <start-point>\n           allows you to create a branch based on some other point in history\n           than where HEAD currently points. (Or, in the case of --detach,\n           allows you to inspect and detach from some other point.)\n\n           You can use the @{-N} syntax to refer to the N-th last\n           branch/commit switched to using "git switch" or "git checkout"\n           operation. You may also specify - which is synonymous to @{-1}.\n           This is often used to switch quickly between two branches, or to\n           undo a branch switch by mistake.\n\n           As a special case, you may use A...B as a shortcut for the merge\n           base of A and B if there is exactly one merge base. You can leave\n           out at most one of A and B, in which case it defaults to HEAD.\n\n       -c <new-branch>, --create <new-branch>\n           Create a new branch named <new-branch> starting at <start-point>\n           before switching to the branch. This is a convenient shortcut for:\n\n               $ git branch <new-branch>\n               $ git switch <new-branch>\n\n\n       -C <new-branch>, --force-create <new-branch>\n           Similar to --create except that if <new-branch> already exists, it\n           will be reset to <start-point>. This is a convenient shortcut for:\n\n               $ git branch -f <new-branch>\n               $ git switch <new-branch>\n\n\n       -d, --detach\n           Switch to a commit for inspection and discardable experiments. See\n           the "DETACHED HEAD" section in git-checkout(1) for details.\n\n       --guess, --no-guess\n           If <branch> is not found but there does exist a tracking branch in\n           exactly one remote (call it <remote>) with a matching name, treat\n           as equivalent to\n\n               $ git switch -c <branch> --track <remote>/<branch>\n\n           If the branch exists in multiple remotes and one of them is named\n           by the checkout.defaultRemote configuration variable, we\'ll use\n           that one for the purposes of disambiguation, even if the <branch>\n           isn\'t unique across all remotes. Set it to e.g.\n           checkout.defaultRemote=origin to always checkout remote branches\n           from there if <branch> is ambiguous but exists on the origin\n           remote. See also checkout.defaultRemote in git-config(1).\n\n           --guess is the default behavior. Use --no-guess to disable it.\n\n           The default behavior can be set via the checkout.guess\n           configuration variable.\n\n       -f, --force\n           An alias for --discard-changes.\n\n       --discard-changes\n           Proceed even if the index or the working tree differs from HEAD.\n           Both the index and working tree are restored to match the switching\n           target. If --recurse-submodules is specified, submodule content is\n           also restored to match the switching target. This is used to throw\n           away local changes.\n\n       -m, --merge\n           If you have local modifications to one or more files that are\n           different between the current branch and the branch to which you\n           are switching, the command refuses to switch branches in order to\n           preserve your modifications in context. However, with this option,\n           a three-way merge between the current branch, your working tree\n           contents, and the new branch is done, and you will be on the new\n           branch.\n\n           When a merge conflict happens, the index entries for conflicting\n           paths are left unmerged, and you need to resolve the conflicts and\n           mark the resolved paths with git add (or git rm if the merge should\n           result in deletion of the path).\n\n       --conflict=<style>\n           The same as --merge option above, but changes the way the\n           conflicting hunks are presented, overriding the merge.conflictStyle\n           configuration variable. Possible values are "merge" (default) and\n           "diff3" (in addition to what is shown by "merge" style, shows the\n           original contents).\n\n       -q, --quiet\n           Quiet, suppress feedback messages.\n\n       --progress, --no-progress\n           Progress status is reported on the standard error stream by default\n           when it is attached to a terminal, unless --quiet is specified.\n           This flag enables progress reporting even if not attached to a\n           terminal, regardless of --quiet.\n\n       -t, --track\n           When creating a new branch, set up "upstream" configuration.  -c is\n           implied. See --track in git-branch(1) for details.\n\n           If no -c option is given, the name of the new branch will be\n           derived from the remote-tracking branch, by looking at the local\n           part of the refspec configured for the corresponding remote, and\n           then stripping the initial part up to the "*". This would tell us\n           to use hack as the local branch when branching off of origin/hack\n           (or remotes/origin/hack, or even refs/remotes/origin/hack). If the\n           given name has no slash, or the above guessing results in an empty\n           name, the guessing is aborted. You can explicitly give a name with\n           -c in such a case.\n\n       --no-track\n           Do not set up "upstream" configuration, even if the\n           branch.autoSetupMerge configuration variable is true.\n\n       --orphan <new-branch>\n           Create a new orphan branch, named <new-branch>. All tracked files\n           are removed.\n\n       --ignore-other-worktrees\n           git switch refuses when the wanted ref is already checked out by\n           another worktree. This option makes it check the ref out anyway. In\n           other words, the ref can be held by more than one worktree.\n\n       --recurse-submodules, --no-recurse-submodules\n           Using --recurse-submodules will update the content of all active\n           submodules according to the commit recorded in the superproject. If\n           nothing (or --no-recurse-submodules) is used, submodules working\n           trees will not be updated. Just like git-submodule(1), this will\n           detach HEAD of the submodules.\n\nEXAMPLES\n       The following command switches to the "main" branch:\n\n           $ git switch main\n\n\n       After working in the wrong branch, switching to the correct branch\n       would be done using:\n\n           $ git switch mytopic\n\n\n       However, your "wrong" branch and correct "mytopic" branch may differ in\n       files that you have modified locally, in which case the above switch\n       would fail like this:\n\n           $ git switch mytopic\n           error: You have local changes to \'frotz\'; not switching branches.\n\n\n       You can give the -m flag to the command, which would try a three-way\n       merge:\n\n           $ git switch -m mytopic\n           Auto-merging frotz\n\n\n       After this three-way merge, the local modifications are not registered\n       in your index file, so git diff would show you what changes you made\n       since the tip of the new branch.\n\n       To switch back to the previous branch before we switched to mytopic\n       (i.e. "main" branch):\n\n           $ git switch -\n\n\n       You can grow a new branch from any commit. For example, switch to\n       "HEAD~3" and create branch "fixup":\n\n           $ git switch -c fixup HEAD~3\n           Switched to a new branch \'fixup\'\n\n\n       If you want to start a new branch from a remote branch of the same\n       name:\n\n           $ git switch new-topic\n           Branch \'new-topic\' set up to track remote branch \'new-topic\' from \'origin\'\n           Switched to a new branch \'new-topic\'\n\n\n       To check out commit HEAD~3 for temporary inspection or experiment\n       without creating a new branch:\n\n           $ git switch --detach HEAD~3\n           HEAD is now at 9fc9555312 Merge branch \'cc/shared-index-permbits\'\n\n\n       If it turns out whatever you have done is worth keeping, you can always\n       create a new name for it (without switching away):\n\n           $ git switch -c good-surprises\n\n\nSEE ALSO\n       git-checkout(1), git-branch(1)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                     GIT-SWITCH(1)\n')),(0,a.kt)("h2",{id:"tag"},(0,a.kt)("inlineCode",{parentName:"h2"},"tag")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-TAG(1)                        Git Manual                        GIT-TAG(1)\n\n\n\nNAME\n       git-tag - GPG \u3067\u7f72\u540d\u3055\u308c\u305f\u30bf\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3001\u4e00\u89a7\u8868\u793a\u3001\u524a\u9664\u3001\u307e\u305f\u306f\u691c\u8a3c\u3059\u308b\n\nSYNOPSIS\n       git tag [-a | -s | -u <keyid>] [-f] [-m <msg> | -F <file>] [-e]\n               <tagname> [<commit> | <object>]\n       git tag -d <tagname>...\n       git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n               [--points-at <object>] [--column[=<options>] | --no-column]\n               [--create-reflog] [--sort=<key>] [--format=<format>]\n               [--merged <commit>] [--no-merged <commit>] [<pattern>...]\n       git tag -v [--format=<format>] <tagname>...\n\n\nDESCRIPTION\n       \u30bf\u30b0\u306e\u524a\u9664\u3001\u4e00\u89a7\u8868\u793a\u3001\u307e\u305f\u306f\u691c\u8a3c\u306b -d/-l/-v \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001\n       refs/tags/ \u306b\u30bf\u30b0\u53c2\u7167\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n       -f \u3092\u6307\u5b9a\u3057\u306a\u3044\u9650\u308a\u3001\u540d\u524d\u4ed8\u304d\u30bf\u30b0\u306f\u307e\u3060\u5b58\u5728\u3057\u3066\u3044\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n       \n       -a\u3001-s\u3001\u307e\u305f\u306f -u <keyid> \u306e\u3044\u305a\u308c\u304b\u304c\u6e21\u3055\u308c\u308b\u3068\u3001\u30b3\u30de\u30f3\u30c9\u306f\u30bf\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\n       \u30bf\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n       -m <msg> \u307e\u305f\u306f -F <file> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u30bf\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\n       \u5165\u529b\u3059\u308b\u305f\u3081\u306e\u30a8\u30c7\u30a3\u30bf\u30fc\u304c\u8d77\u52d5\u3057\u307e\u3059\u3002\n       \n       -m <msg> \u307e\u305f\u306f -F <file> \u304c\u6307\u5b9a\u3055\u308c\u3001-a\u3001-s\u3001\u304a\u3088\u3073 -u <keyid> \u304c\u7121\u3044\u5834\u5408\u3001\n       -a \u304c\u6697\u9ed9\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\n       \n       \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u76f4\u63a5\u6307\u3059\u30bf\u30b0\u53c2\u7167\n       \uff08\u3064\u307e\u308a\u3001\u8efd\u91cf\u30bf\u30b0\uff09\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n       \n       -s \u307e\u305f\u306f -u <keyid> \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001GnuPG \u7f72\u540d\u4ed8\u304d\u30bf\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n       -u <keyid> \u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u73fe\u5728\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u30b3\u30df\u30c3\u30bf\u30fc ID \u3092\u4f7f\u7528\u3057\u3066\u3001\n       \u7f72\u540d\u7528\u306e GnuPG \u30ad\u30fc\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n       \u69cb\u6210\u5909\u6570 gpg.program \u306f\u3001\u30ab\u30b9\u30bf\u30e0 GnuPG \u30d0\u30a4\u30ca\u30ea\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n       \u30bf\u30b0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08-a\u3001-s\u3001\u307e\u305f\u306f-u\u3067\u4f5c\u6210\uff09\u306f\u300c\u6ce8\u91c8\u4ed8\u304d\u300d\u30bf\u30b0\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n       \u3053\u308c\u3089\u306b\u306f\u3001\u4f5c\u6210\u65e5\u3001\u30bf\u30ac\u30fc\u540d\u3068\u96fb\u5b50\u30e1\u30fc\u30eb\u3001\u30bf\u30b0\u4ed8\u3051\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u304a\u3088\u3073\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\n       GnuPG \u7f72\u540d\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n       \u4e00\u65b9\u3001\u300c\u8efd\u91cf\u300d\u30bf\u30b0\u306f\u5358\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u901a\u5e38\u306f\u30b3\u30df\u30c3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u540d\u524d\u3067\u3059\u3002\n       \n       \u6ce8\u91c8\u4ed8\u304d\u30bf\u30b0\u306f\u30ea\u30ea\u30fc\u30b9\u7528\u3067\u3042\u308a\u3001\u8efd\u91cf\u30bf\u30b0\u306f\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u307e\u305f\u306f\u4e00\u6642\u7684\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30e9\u30d9\u30eb\u7528\u3067\u3059\u3002\n       \u3053\u306e\u305f\u3081\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b\u305f\u3081\u306e\u4e00\u90e8\u306e git \u30b3\u30de\u30f3\u30c9\uff08git describe\u306a\u3069\uff09\u306f\u3001\n       \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8efd\u91cf\u30bf\u30b0\u3092\u7121\u8996\u3057\u307e\u3059\u3002\n\nOPTIONS\n       -a, --annotate\n           Make an unsigned, annotated tag object\n\n       -s, --sign\n           Make a GPG-signed tag, using the default e-mail address\'s key. The\n           default behavior of tag GPG-signing is controlled by tag.gpgSign\n           configuration variable if it exists, or disabled otherwise. See\n           git-config(1).\n\n       --no-sign\n           Override tag.gpgSign configuration variable that is set to force\n           each and every tag to be signed.\n\n       -u <keyid>, --local-user=<keyid>\n           Make a GPG-signed tag, using the given key.\n\n       -f, --force\n           Replace an existing tag with the given name (instead of failing)\n\n       -d, --delete\n           Delete existing tags with the given names.\n\n       -v, --verify\n           Verify the GPG signature of the given tag names.\n\n       -n<num>\n           <num> specifies how many lines from the annotation, if any, are\n           printed when using -l. Implies --list.\n\n           The default is not to print any annotation lines. If no number is\n           given to -n, only the first line is printed. If the tag is not\n           annotated, the commit message is displayed instead.\n\n       -l, --list\n           List tags. With optional <pattern>..., e.g.  git tag --list \'v-*\',\n           list only the tags that match the pattern(s).\n\n           Running "git tag" without arguments also lists all tags. The\n           pattern is a shell wildcard (i.e., matched using fnmatch(3)).\n           Multiple patterns may be given; if any of them matches, the tag is\n           shown.\n\n           This option is implicitly supplied if any other list-like option\n           such as --contains is provided. See the documentation for each of\n           those options for details.\n\n       --sort=<key>\n           Sort based on the key given. Prefix - to sort in descending order\n           of the value. You may use the --sort=<key> option multiple times,\n           in which case the last key becomes the primary key. Also supports\n           "version:refname" or "v:refname" (tag names are treated as\n           versions). The "version:refname" sort order can also be affected by\n           the "versionsort.suffix" configuration variable. The keys supported\n           are the same as those in git for-each-ref. Sort order defaults to\n           the value configured for the tag.sort variable if it exists, or\n           lexicographic order otherwise. See git-config(1).\n\n       --color[=<when>]\n           Respect any colors specified in the --format option. The <when>\n           field must be one of always, never, or auto (if <when> is absent,\n           behave as if always was given).\n\n       -i, --ignore-case\n           Sorting and filtering tags are case insensitive.\n\n       --column[=<options>], --no-column\n           Display tag listing in columns. See configuration variable\n           column.tag for option syntax.--column and --no-column without\n           options are equivalent to always and never respectively.\n\n           This option is only applicable when listing tags without annotation\n           lines.\n\n       --contains [<commit>]\n           Only list tags which contain the specified commit (HEAD if not\n           specified). Implies --list.\n\n       --no-contains [<commit>]\n           Only list tags which don\'t contain the specified commit (HEAD if\n           not specified). Implies --list.\n\n       --merged [<commit>]\n           Only list tags whose commits are reachable from the specified\n           commit (HEAD if not specified).\n\n       --no-merged [<commit>]\n           Only list tags whose commits are not reachable from the specified\n           commit (HEAD if not specified).\n\n       --points-at <object>\n           Only list tags of the given object (HEAD if not specified). Implies\n           --list.\n\n       -m <msg>, --message=<msg>\n           Use the given tag message (instead of prompting). If multiple -m\n           options are given, their values are concatenated as separate\n           paragraphs. Implies -a if none of -a, -s, or -u <keyid> is given.\n\n       -F <file>, --file=<file>\n           Take the tag message from the given file. Use - to read the message\n           from the standard input. Implies -a if none of -a, -s, or -u\n           <keyid> is given.\n\n       -e, --edit\n           The message taken from file with -F and command line with -m are\n           usually used as the tag message unmodified. This option lets you\n           further edit the message taken from these sources.\n\n       --cleanup=<mode>\n           This option sets how the tag message is cleaned up. The <mode> can\n           be one of verbatim, whitespace and strip. The strip mode is\n           default. The verbatim mode does not change message at all,\n           whitespace removes just leading/trailing whitespace lines and strip\n           removes both whitespace and commentary.\n\n       --create-reflog\n           Create a reflog for the tag. To globally enable reflogs for tags,\n           see core.logAllRefUpdates in git-config(1). The negated form\n           --no-create-reflog only overrides an earlier --create-reflog, but\n           currently does not negate the setting of core.logAllRefUpdates.\n\n       --format=<format>\n           A string that interpolates %(fieldname) from a tag ref being shown\n           and the object it points at. The format is the same as that of git-\n           for-each-ref(1). When unspecified, defaults to %(refname:strip=2).\n\n       <tagname>\n           The name of the tag to create, delete, or describe. The new tag\n           name must pass all checks defined by git-check-ref-format(1). Some\n           of these checks may restrict the characters allowed in a tag name.\n\n       <commit>, <object>\n           The object that the new tag will refer to, usually a commit.\n           Defaults to HEAD.\n\nCONFIGURATION\n       By default, git tag in sign-with-default mode (-s) will use your\n       committer identity (of the form Your Name <your@email.address>) to find\n       a key. If you want to use a different default key, you can specify it\n       in the repository configuration as follows:\n\n           [user]\n               signingKey = <gpg-keyid>\n\n\n       pager.tag is only respected when listing tags, i.e., when -l is used or\n       implied. The default is to use a pager. See git-config(1).\n\nDISCUSSION\n   On Re-tagging\n       What should you do when you tag a wrong commit and you would want to\n       re-tag?\n\n       If you never pushed anything out, just re-tag it. Use "-f" to replace\n       the old one. And you\'re done.\n\n       But if you have pushed things out (or others could just read your\n       repository directly), then others will have already seen the old tag.\n       In that case you can do one of two things:\n\n        1. The sane thing. Just admit you screwed up, and use a different\n           name. Others have already seen one tag-name, and if you keep the\n           same name, you may be in the situation that two people both have\n           "version X", but they actually have different "X"\'s. So just call\n           it "X.1" and be done with it.\n\n        2. The insane thing. You really want to call the new version "X" too,\n           even though others have already seen the old one. So just use git\n           tag -f again, as if you hadn\'t already published the old one.\n\n       However, Git does not (and it should not) change tags behind users\n       back. So if somebody already got the old tag, doing a git pull on your\n       tree shouldn\'t just make them overwrite the old one.\n\n       If somebody got a release tag from you, you cannot just change the tag\n       for them by updating your own one. This is a big security issue, in\n       that people MUST be able to trust their tag-names. If you really want\n       to do the insane thing, you need to just fess up to it, and tell people\n       that you messed up. You can do that by making a very public\n       announcement saying:\n\n           Ok, I messed up, and I pushed out an earlier version tagged as X. I\n           then fixed something, and retagged the *fixed* tree as X again.\n\n           If you got the wrong tag, and want the new one, please delete\n           the old one and fetch the new one by doing:\n\n                   git tag -d X\n                   git fetch origin tag X\n\n           to get my updated tag.\n\n           You can test which tag you have by doing\n\n                   git rev-parse X\n\n           which should return 0123456789abcdef.. if you have the new version.\n\n           Sorry for the inconvenience.\n\n\n       Does this seem a bit complicated? It should be. There is no way that it\n       would be correct to just "fix" it automatically. People need to know\n       that their tags might have been changed.\n\n   On Automatic following\n       If you are following somebody else\'s tree, you are most likely using\n       remote-tracking branches (eg. refs/remotes/origin/main). You usually\n       want the tags from the other end.\n\n       On the other hand, if you are fetching because you would want a\n       one-shot merge from somebody else, you typically do not want to get\n       tags from there. This happens more often for people near the toplevel\n       but not limited to them. Mere mortals when pulling from each other do\n       not necessarily want to automatically get private anchor point tags\n       from the other person.\n\n       Often, "please pull" messages on the mailing list just provide two\n       pieces of information: a repo URL and a branch name; this is designed\n       to be easily cut&pasted at the end of a git fetch command line:\n\n           Linus, please pull from\n\n                   git://git..../proj.git main\n\n           to get the following updates...\n\n\n       becomes:\n\n           $ git pull git://git..../proj.git main\n\n\n       In such a case, you do not want to automatically follow the other\n       person\'s tags.\n\n       One important aspect of Git is its distributed nature, which largely\n       means there is no inherent "upstream" or "downstream" in the system. On\n       the face of it, the above example might seem to indicate that the tag\n       namespace is owned by the upper echelon of people and that tags only\n       flow downwards, but that is not the case. It only shows that the usage\n       pattern determines who are interested in whose tags.\n\n       A one-shot pull is a sign that a commit history is now crossing the\n       boundary between one circle of people (e.g. "people who are primarily\n       interested in the networking part of the kernel") who may have their\n       own set of tags (e.g. "this is the third release candidate from the\n       networking group to be proposed for general consumption with 2.6.21\n       release") to another circle of people (e.g. "people who integrate\n       various subsystem improvements"). The latter are usually not interested\n       in the detailed tags used internally in the former group (that is what\n       "internal" means). That is why it is desirable not to follow tags\n       automatically in this case.\n\n       It may well be that among networking people, they may want to exchange\n       the tags internal to their group, but in that workflow they are most\n       likely tracking each other\'s progress by having remote-tracking\n       branches. Again, the heuristic to automatically follow such tags is a\n       good thing.\n\n   On Backdating Tags\n       If you have imported some changes from another VCS and would like to\n       add tags for major releases of your work, it is useful to be able to\n       specify the date to embed inside of the tag object; such data in the\n       tag object affects, for example, the ordering of tags in the gitweb\n       interface.\n\n       To set the date used in future tag objects, set the environment\n       variable GIT_COMMITTER_DATE (see the later discussion of possible\n       values; the most common form is "YYYY-MM-DD HH:MM").\n\n       For example:\n\n           $ GIT_COMMITTER_DATE="2006-10-02 10:31" git tag -s v1.0.1\n\n\nDATE FORMATS\n       The GIT_AUTHOR_DATE, GIT_COMMITTER_DATE environment variables support\n       the following date formats:\n\n       Git internal format\n           It is <unix timestamp> <time zone offset>, where <unix timestamp>\n           is the number of seconds since the UNIX epoch.  <time zone offset>\n           is a positive or negative offset from UTC. For example CET (which\n           is 1 hour ahead of UTC) is +0100.\n\n       RFC 2822\n           The standard email format as described by RFC 2822, for example\n           Thu, 07 Apr 2005 22:13:13 +0200.\n\n       ISO 8601\n           Time and date specified by the ISO 8601 standard, for example\n           2005-04-07T22:13:13. The parser accepts a space instead of the T\n           character as well. Fractional parts of a second will be ignored,\n           for example 2005-04-07T22:13:13.019 will be treated as\n           2005-04-07T22:13:13.\n\n               Note\n               In addition, the date part is accepted in the following\n               formats: YYYY.MM.DD, MM/DD/YYYY and DD.MM.YYYY.\n\nNOTES\n       When combining multiple --contains and --no-contains filters, only\n       references that contain at least one of the --contains commits and\n       contain none of the --no-contains commits are shown.\n\n       When combining multiple --merged and --no-merged filters, only\n       references that are reachable from at least one of the --merged commits\n       and from none of the --no-merged commits are shown.\n\nSEE ALSO\n       git-check-ref-format(1). git-config(1).\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                        GIT-TAG(1)\n')),(0,a.kt)("h2",{id:"fetch"},(0,a.kt)("inlineCode",{parentName:"h2"},"fetch")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-FETCH(1)                      Git Manual                      GIT-FETCH(1)\n\n\n\nNAME\n       git-fetch - \u5225\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u53c2\u7167\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\nSYNOPSIS\n       git fetch [<options>] [<repository> [<refspec>...]]\n       git fetch [<options>] <group>\n       git fetch --multiple [<options>] [(<repository> | <group>)...]\n       git fetch --all [<options>]\n\n\nDESCRIPTION\n       \u5c65\u6b74\u3092\u5b8c\u6210\u3055\u305b\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u5171\u306b\u30011\u3064\u4ee5\u4e0a\u306e\u4ed6\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\n       \u30d6\u30e9\u30f3\u30c1\u3084\u30bf\u30b0\uff08\u7dcf\u79f0\u3057\u3066\u300crefs\u300d\uff09\u3092\u30d5\u30a7\u30c3\u30c1\u3057\u307e\u3059\u3002\n       \u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\uff08\u3053\u306e\u52d5\u4f5c\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\n       \u4ee5\u4e0b\u306e <refspec> \u306e\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n       \n       \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u30d5\u30a7\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u5c65\u6b74\u3092\u6307\u3059\u30bf\u30b0\u3082\u30d5\u30a7\u30c3\u30c1\u3055\u308c\u307e\u3059\u3002\n       \u305d\u306e\u52b9\u679c\u306f\u3001\u95a2\u5fc3\u306e\u3042\u308b\u30d6\u30e9\u30f3\u30c1\u3092\u6307\u3059\u30bf\u30b0\u3092\u30d5\u30a7\u30c3\u30c1\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n       \u3053\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u306f\u3001-tags \u307e\u305f\u306f --no-tags \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\n       remote.<name>.tagOpt \u3092\u69cb\u6210\u3059\u308b\u3053\u3068\u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n       \u30bf\u30b0\u3092\u660e\u793a\u7684\u306b\u30d5\u30a7\u30c3\u30c1\u3059\u308brefspec\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u5fc3\u306e\u3042\u308b\u30d6\u30e9\u30f3\u30c1\u3092\u6307\u3057\u3066\u3044\u306a\u3044\u30bf\u30b0\u3082\n       \u30d5\u30a7\u30c3\u30c1\u3067\u304d\u307e\u3059\u3002\n       \n       git fetch \u306f\u3001\u5358\u4e00\u306e\u540d\u524d\u4ed8\u304d\u30ea\u30dd\u30b8\u30c8\u30ea\u307e\u305f\u306f URL \u304b\u3089\u3001\u307e\u305f\u306f <group> \u304c\u6307\u5b9a\u3055\u308c\u3001\n       \u69cb\u6210\u30d5\u30a1\u30a4\u30eb\u306b remotes.<group> \u30a8\u30f3\u30c8\u30ea\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\n       \u30d5\u30a7\u30c3\u30c1\u3067\u304d\u307e\u3059\u3002\uff08git-config(1) \u3092\u53c2\u7167\uff09\u3002\n       \n       \u30ea\u30e2\u30fc\u30c8\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u7528\u306b\u30a2\u30c3\u30d7\u30b9\u30c8\u30ea\u30fc\u30e0\u30d6\u30e9\u30f3\u30c1\u304c\u69cb\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u9650\u308a\u3001\n       \u30c7\u30d5\u30a9\u30eb\u30c8\u3067 origin \u30ea\u30e2\u30fc\u30c8\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n       \n       \u30d5\u30a7\u30c3\u30c1\u3055\u308c\u305f\u53c2\u7167\u306e\u540d\u524d\u306f\u3001\u305d\u308c\u3089\u304c\u6307\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u540d\u3068\u3068\u3082\u306b\u3001.git/FETCH_HEAD \u306b\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\n       \u3053\u306e\u60c5\u5831\u306f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u307e\u305f\u306f git-pull(1) \u306a\u3069\u306e\u4ed6\u306e git \u30b3\u30de\u30f3\u30c9\u3067\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\nOPTIONS\n       --all\n           Fetch all remotes.\n\n       -a, --append\n           Append ref names and object names of fetched refs to the existing\n           contents of .git/FETCH_HEAD. Without this option old data in\n           .git/FETCH_HEAD will be overwritten.\n\n       --atomic\n           Use an atomic transaction to update local refs. Either all refs are\n           updated, or on error, no refs are updated.\n\n       --depth=<depth>\n           Limit fetching to the specified number of commits from the tip of\n           each remote branch history. If fetching to a shallow repository\n           created by git clone with --depth=<depth> option (see git-\n           clone(1)), deepen or shorten the history to the specified number of\n           commits. Tags for the deepened commits are not fetched.\n\n       --deepen=<depth>\n           Similar to --depth, except it specifies the number of commits from\n           the current shallow boundary instead of from the tip of each remote\n           branch history.\n\n       --shallow-since=<date>\n           Deepen or shorten the history of a shallow repository to include\n           all reachable commits after <date>.\n\n       --shallow-exclude=<revision>\n           Deepen or shorten the history of a shallow repository to exclude\n           commits reachable from a specified remote branch or tag. This\n           option can be specified multiple times.\n\n       --unshallow\n           If the source repository is complete, convert a shallow repository\n           to a complete one, removing all the limitations imposed by shallow\n           repositories.\n\n           If the source repository is shallow, fetch as much as possible so\n           that the current repository has the same history as the source\n           repository.\n\n       --update-shallow\n           By default when fetching from a shallow repository, git fetch\n           refuses refs that require updating .git/shallow. This option\n           updates .git/shallow and accept such refs.\n\n       --negotiation-tip=<commit|glob>\n           By default, Git will report, to the server, commits reachable from\n           all local refs to find common commits in an attempt to reduce the\n           size of the to-be-received packfile. If specified, Git will only\n           report commits reachable from the given tips. This is useful to\n           speed up fetches when the user knows which local ref is likely to\n           have commits in common with the upstream ref being fetched.\n\n           This option may be specified more than once; if so, Git will report\n           commits reachable from any of the given commits.\n\n           The argument to this option may be a glob on ref names, a ref, or\n           the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is\n           equivalent to specifying this option multiple times, one for each\n           matching ref name.\n\n           See also the fetch.negotiationAlgorithm configuration variable\n           documented in git-config(1).\n\n       --dry-run\n           Show what would be done, without making any changes.\n\n       --[no-]write-fetch-head\n           Write the list of remote refs fetched in the FETCH_HEAD file\n           directly under $GIT_DIR. This is the default. Passing\n           --no-write-fetch-head from the command line tells Git not to write\n           the file. Under --dry-run option, the file is never written.\n\n       -f, --force\n           When git fetch is used with <src>:<dst> refspec it may refuse to\n           update the local branch as discussed in the <refspec> part below.\n           This option overrides that check.\n\n       -k, --keep\n           Keep downloaded pack.\n\n       --multiple\n           Allow several <repository> and <group> arguments to be specified.\n           No <refspec>s may be specified.\n\n       --[no-]auto-maintenance, --[no-]auto-gc\n           Run git maintenance run --auto at the end to perform automatic\n           repository maintenance if needed. (--[no-]auto-gc is a synonym.)\n           This is enabled by default.\n\n       --[no-]write-commit-graph\n           Write a commit-graph after fetching. This overrides the config\n           setting fetch.writeCommitGraph.\n\n       -p, --prune\n           Before fetching, remove any remote-tracking references that no\n           longer exist on the remote. Tags are not subject to pruning if they\n           are fetched only because of the default tag auto-following or due\n           to a --tags option. However, if tags are fetched due to an explicit\n           refspec (either on the command line or in the remote configuration,\n           for example if the remote was cloned with the --mirror option),\n           then they are also subject to pruning. Supplying --prune-tags is a\n           shorthand for providing the tag refspec.\n\n           See the PRUNING section below for more details.\n\n       -P, --prune-tags\n           Before fetching, remove any local tags that no longer exist on the\n           remote if --prune is enabled. This option should be used more\n           carefully, unlike --prune it will remove any local references\n           (local tags) that have been created. This option is a shorthand for\n           providing the explicit tag refspec along with --prune, see the\n           discussion about that in its documentation.\n\n           See the PRUNING section below for more details.\n\n       -n, --no-tags\n           By default, tags that point at objects that are downloaded from the\n           remote repository are fetched and stored locally. This option\n           disables this automatic tag following. The default behavior for a\n           remote may be specified with the remote.<name>.tagOpt setting. See\n           git-config(1).\n\n       --refmap=<refspec>\n           When fetching refs listed on the command line, use the specified\n           refspec (can be given more than once) to map the refs to\n           remote-tracking branches, instead of the values of remote.*.fetch\n           configuration variables for the remote repository. Providing an\n           empty <refspec> to the --refmap option causes Git to ignore the\n           configured refspecs and rely entirely on the refspecs supplied as\n           command-line arguments. See section on "Configured Remote-tracking\n           Branches" for details.\n\n       -t, --tags\n           Fetch all tags from the remote (i.e., fetch remote tags refs/tags/*\n           into local tags with the same name), in addition to whatever else\n           would otherwise be fetched. Using this option alone does not\n           subject tags to pruning, even if --prune is used (though tags may\n           be pruned anyway if they are also the destination of an explicit\n           refspec; see --prune).\n\n       --recurse-submodules[=yes|on-demand|no]\n           This option controls if and under what conditions new commits of\n           populated submodules should be fetched too. It can be used as a\n           boolean option to completely disable recursion when set to no or to\n           unconditionally recurse into all populated submodules when set to\n           yes, which is the default when this option is used without any\n           value. Use on-demand to only recurse into a populated submodule\n           when the superproject retrieves a commit that updates the\n           submodule\'s reference to a commit that isn\'t already in the local\n           submodule clone. By default, on-demand is used, unless\n           fetch.recurseSubmodules is set (see git-config(1)).\n\n       -j, --jobs=<n>\n           Number of parallel children to be used for all forms of fetching.\n\n           If the --multiple option was specified, the different remotes will\n           be fetched in parallel. If multiple submodules are fetched, they\n           will be fetched in parallel. To control them independently, use the\n           config settings fetch.parallel and submodule.fetchJobs (see git-\n           config(1)).\n\n           Typically, parallel recursive and multi-remote fetches will be\n           faster. By default fetches are performed sequentially, not in\n           parallel.\n\n       --no-recurse-submodules\n           Disable recursive fetching of submodules (this has the same effect\n           as using the --recurse-submodules=no option).\n\n       --set-upstream\n           If the remote is fetched successfully, add upstream (tracking)\n           reference, used by argument-less git-pull(1) and other commands.\n           For more information, see branch.<name>.merge and\n           branch.<name>.remote in git-config(1).\n\n       --submodule-prefix=<path>\n           Prepend <path> to paths printed in informative messages such as\n           "Fetching submodule foo". This option is used internally when\n           recursing over submodules.\n\n       --recurse-submodules-default=[yes|on-demand]\n           This option is used internally to temporarily provide a\n           non-negative default value for the --recurse-submodules option. All\n           other methods of configuring fetch\'s submodule recursion (such as\n           settings in gitmodules(5) and git-config(1)) override this option,\n           as does specifying --[no-]recurse-submodules directly.\n\n       -u, --update-head-ok\n           By default git fetch refuses to update the head which corresponds\n           to the current branch. This flag disables the check. This is purely\n           for the internal use for git pull to communicate with git fetch,\n           and unless you are implementing your own Porcelain you are not\n           supposed to use it.\n\n       --upload-pack <upload-pack>\n           When given, and the repository to fetch from is handled by git\n           fetch-pack, --exec=<upload-pack> is passed to the command to\n           specify non-default path for the command run on the other end.\n\n       -q, --quiet\n           Pass --quiet to git-fetch-pack and silence any other internally\n           used git commands. Progress is not reported to the standard error\n           stream.\n\n       -v, --verbose\n           Be verbose.\n\n       --progress\n           Progress status is reported on the standard error stream by default\n           when it is attached to a terminal, unless -q is specified. This\n           flag forces progress status even if the standard error stream is\n           not directed to a terminal.\n\n       -o <option>, --server-option=<option>\n           Transmit the given string to the server when communicating using\n           protocol version 2. The given string must not contain a NUL or LF\n           character. The server\'s handling of server options, including\n           unknown ones, is server-specific. When multiple\n           --server-option=<option> are given, they are all sent to the other\n           side in the order listed on the command line.\n\n       --show-forced-updates\n           By default, git checks if a branch is force-updated during fetch.\n           This can be disabled through fetch.showForcedUpdates, but the\n           --show-forced-updates option guarantees this check occurs. See git-\n           config(1).\n\n       --no-show-forced-updates\n           By default, git checks if a branch is force-updated during fetch.\n           Pass --no-show-forced-updates or set fetch.showForcedUpdates to\n           false to skip this check for performance reasons. If used during\n           git-pull the --ff-only option will still check for forced updates\n           before attempting a fast-forward update. See git-config(1).\n\n       -4, --ipv4\n           Use IPv4 addresses only, ignoring IPv6 addresses.\n\n       -6, --ipv6\n           Use IPv6 addresses only, ignoring IPv4 addresses.\n\n       <repository>\n           The "remote" repository that is the source of a fetch or pull\n           operation. This parameter can be either a URL (see the section GIT\n           URLS below) or the name of a remote (see the section REMOTES\n           below).\n\n       <group>\n           A name referring to a list of repositories as the value of\n           remotes.<group> in the configuration file. (See git-config(1)).\n\n       <refspec>\n           Specifies which refs to fetch and which local refs to update. When\n           no <refspec>s appear on the command line, the refs to fetch are\n           read from remote.<repository>.fetch variables instead (see\n           CONFIGURED REMOTE-TRACKING BRANCHES below).\n\n           The format of a <refspec> parameter is an optional plus +, followed\n           by the source <src>, followed by a colon :, followed by the\n           destination ref <dst>. The colon can be omitted when <dst> is\n           empty. <src> is typically a ref, but it can also be a fully spelled\n           hex object name.\n\n           A <refspec> may contain a * in its <src> to indicate a simple\n           pattern match. Such a refspec functions like a glob that matches\n           any ref with the same prefix. A pattern <refspec> must have a * in\n           both the <src> and <dst>. It will map refs to the destination by\n           replacing the * with the contents matched from the source.\n\n           If a refspec is prefixed by ^, it will be interpreted as a negative\n           refspec. Rather than specifying which refs to fetch or which local\n           refs to update, such a refspec will instead specify refs to\n           exclude. A ref will be considered to match if it matches at least\n           one positive refspec, and does not match any negative refspec.\n           Negative refspecs can be useful to restrict the scope of a pattern\n           refspec so that it will not include specific refs. Negative\n           refspecs can themselves be pattern refspecs. However, they may only\n           contain a <src> and do not specify a <dst>. Fully spelled out hex\n           object names are also not supported.\n\n           tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it\n           requests fetching everything up to the given tag.\n\n           The remote ref that matches <src> is fetched, and if <dst> is not\n           an empty string, an attempt is made to update the local ref that\n           matches it.\n\n           Whether that update is allowed without --force depends on the ref\n           namespace it\'s being fetched to, the type of object being fetched,\n           and whether the update is considered to be a fast-forward.\n           Generally, the same rules apply for fetching as when pushing, see\n           the <refspec>...  section of git-push(1) for what those are.\n           Exceptions to those rules particular to git fetch are noted below.\n\n           Until Git version 2.20, and unlike when pushing with git-push(1),\n           any updates to refs/tags/* would be accepted without + in the\n           refspec (or --force). When fetching, we promiscuously considered\n           all tag updates from a remote to be forced fetches. Since Git\n           version 2.20, fetching to update refs/tags/* works the same way as\n           when pushing. I.e. any updates will be rejected without + in the\n           refspec (or --force).\n\n           Unlike when pushing with git-push(1), any updates outside of\n           refs/{tags,heads}/* will be accepted without + in the refspec (or\n           --force), whether that\'s swapping e.g. a tree object for a blob, or\n           a commit for another commit that\'s doesn\'t have the previous commit\n           as an ancestor etc.\n\n           Unlike when pushing with git-push(1), there is no configuration\n           which\'ll amend these rules, and nothing like a pre-fetch hook\n           analogous to the pre-receive hook.\n\n           As with pushing with git-push(1), all of the rules described above\n           about what\'s not allowed as an update can be overridden by adding\n           an the optional leading + to a refspec (or using --force command\n           line option). The only exception to this is that no amount of\n           forcing will make the refs/heads/* namespace accept a non-commit\n           object.\n\n               Note\n               When the remote branch you want to fetch is known to be rewound\n               and rebased regularly, it is expected that its new tip will not\n               be descendant of its previous tip (as stored in your\n               remote-tracking branch the last time you fetched). You would\n               want to use the + sign to indicate non-fast-forward updates\n               will be needed for such branches. There is no way to determine\n               or declare that a branch will be made available in a repository\n               with this behavior; the pulling user simply must know this is\n               the expected usage pattern for a branch.\n\n       --stdin\n           Read refspecs, one per line, from stdin in addition to those\n           provided as arguments. The "tag <name>" format is not supported.\n\nGIT URLS\n       In general, URLs contain information about the transport protocol, the\n       address of the remote server, and the path to the repository. Depending\n       on the transport protocol, some of this information may be absent.\n\n       Git supports ssh, git, http, and https protocols (in addition, ftp, and\n       ftps can be used for fetching, but this is inefficient and deprecated;\n       do not use it).\n\n       The native transport (i.e. git:// URL) does no authentication and\n       should be used with caution on unsecured networks.\n\n       The following syntaxes may be used with them:\n\n       o   ssh://[user@]host.xz[:port]/path/to/repo.git/\n\n       o   git://host.xz[:port]/path/to/repo.git/\n\n       o   http[s]://host.xz[:port]/path/to/repo.git/\n\n       o   ftp[s]://host.xz[:port]/path/to/repo.git/\n\n       An alternative scp-like syntax may also be used with the ssh protocol:\n\n       o   [user@]host.xz:path/to/repo.git/\n\n       This syntax is only recognized if there are no slashes before the first\n       colon. This helps differentiate a local path that contains a colon. For\n       example the local path foo:bar could be specified as an absolute path\n       or ./foo:bar to avoid being misinterpreted as an ssh url.\n\n       The ssh and git protocols additionally support ~username expansion:\n\n       o   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/\n\n       o   git://host.xz[:port]/~[user]/path/to/repo.git/\n\n       o   [user@]host.xz:/~[user]/path/to/repo.git/\n\n       For local repositories, also supported by Git natively, the following\n       syntaxes may be used:\n\n       o   /path/to/repo.git/\n\n       o   file:///path/to/repo.git/\n\n       These two syntaxes are mostly equivalent, except when cloning, when the\n       former implies --local option. See git-clone(1) for details.\n\n       git clone, git fetch and git pull, but not git push, will also accept a\n       suitable bundle file. See git-bundle(1).\n\n       When Git doesn\'t know how to handle a certain transport protocol, it\n       attempts to use the remote-<transport> remote helper, if one exists. To\n       explicitly request a remote helper, the following syntax may be used:\n\n       o   <transport>::<address>\n\n       where <address> may be a path, a server and path, or an arbitrary\n       URL-like string recognized by the specific remote helper being invoked.\n       See gitremote-helpers(7) for details.\n\n       If there are a large number of similarly-named remote repositories and\n       you want to use a different format for them (such that the URLs you use\n       will be rewritten into URLs that work), you can create a configuration\n       section of the form:\n\n                   [url "<actual url base>"]\n                           insteadOf = <other url base>\n\n\n       For example, with this:\n\n                   [url "git://git.host.xz/"]\n                           insteadOf = host.xz:/path/to/\n                           insteadOf = work:\n\n\n       a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be\n       rewritten in any context that takes a URL to be\n       "git://git.host.xz/repo.git".\n\n       If you want to rewrite URLs for push only, you can create a\n       configuration section of the form:\n\n                   [url "<actual url base>"]\n                           pushInsteadOf = <other url base>\n\n\n       For example, with this:\n\n                   [url "ssh://example.org/"]\n                           pushInsteadOf = git://example.org/\n\n\n       a URL like "git://example.org/path/to/repo.git" will be rewritten to\n       "ssh://example.org/path/to/repo.git" for pushes, but pulls will still\n       use the original URL.\n\nREMOTES\n       The name of one of the following can be used instead of a URL as\n       <repository> argument:\n\n       o   a remote in the Git configuration file: $GIT_DIR/config,\n\n       o   a file in the $GIT_DIR/remotes directory, or\n\n       o   a file in the $GIT_DIR/branches directory.\n\n       All of these also allow you to omit the refspec from the command line\n       because they each contain a refspec which git will use by default.\n\n   Named remote in configuration file\n       You can choose to provide the name of a remote which you had previously\n       configured using git-remote(1), git-config(1) or even by a manual edit\n       to the $GIT_DIR/config file. The URL of this remote will be used to\n       access the repository. The refspec of this remote will be used by\n       default when you do not provide a refspec on the command line. The\n       entry in the config file would appear like this:\n\n                   [remote "<name>"]\n                           url = <url>\n                           pushurl = <pushurl>\n                           push = <refspec>\n                           fetch = <refspec>\n\n\n       The <pushurl> is used for pushes only. It is optional and defaults to\n       <url>.\n\n   Named file in $GIT_DIR/remotes\n       You can choose to provide the name of a file in $GIT_DIR/remotes. The\n       URL in this file will be used to access the repository. The refspec in\n       this file will be used as default when you do not provide a refspec on\n       the command line. This file should have the following format:\n\n                   URL: one of the above URL format\n                   Push: <refspec>\n                   Pull: <refspec>\n\n\n       Push: lines are used by git push and Pull: lines are used by git pull\n       and git fetch. Multiple Push: and Pull: lines may be specified for\n       additional branch mappings.\n\n   Named file in $GIT_DIR/branches\n       You can choose to provide the name of a file in $GIT_DIR/branches. The\n       URL in this file will be used to access the repository. This file\n       should have the following format:\n\n                   <url>#<head>\n\n\n       <url> is required; #<head> is optional.\n\n       Depending on the operation, git will use one of the following refspecs,\n       if you don\'t provide one on the command line. <branch> is the name of\n       this file in $GIT_DIR/branches and <head> defaults to main.\n\n       git fetch uses:\n\n                   refs/heads/<head>:refs/heads/<branch>\n\n\n       git push uses:\n\n                   HEAD:refs/heads/<head>\n\n\nCONFIGURED REMOTE-TRACKING BRANCHES\n       You often interact with the same remote repository by regularly and\n       repeatedly fetching from it. In order to keep track of the progress of\n       such a remote repository, git fetch allows you to configure\n       remote.<repository>.fetch configuration variables.\n\n       Typically such a variable may look like this:\n\n           [remote "origin"]\n                   fetch = +refs/heads/*:refs/remotes/origin/*\n\n\n       This configuration is used in two ways:\n\n       o   When git fetch is run without specifying what branches and/or tags\n           to fetch on the command line, e.g.  git fetch origin or git fetch,\n           remote.<repository>.fetch values are used as the refspecs--they\n           specify which refs to fetch and which local refs to update. The\n           example above will fetch all branches that exist in the origin\n           (i.e. any ref that matches the left-hand side of the value,\n           refs/heads/*) and update the corresponding remote-tracking branches\n           in the refs/remotes/origin/* hierarchy.\n\n       o   When git fetch is run with explicit branches and/or tags to fetch\n           on the command line, e.g.  git fetch origin main, the <refspec>s\n           given on the command line determine what are to be fetched (e.g.\n           main in the example, which is a short-hand for main:, which in\n           turn means "fetch the main branch but I do not explicitly say\n           what remote-tracking branch to update with it from the command\n           line"), and the example command will fetch only the main branch.\n           The remote.<repository>.fetch values determine which\n           remote-tracking branch, if any, is updated. When used in this way,\n           the remote.<repository>.fetch values do not have any effect in\n           deciding what gets fetched (i.e. the values are not used as\n           refspecs when the command-line lists refspecs); they are only used\n           to decide where the refs that are fetched are stored by acting as a\n           mapping.\n\n       The latter use of the remote.<repository>.fetch values can be\n       overridden by giving the --refmap=<refspec> parameter(s) on the command\n       line.\n\nPRUNING\n       Git has a default disposition of keeping data unless it\'s explicitly\n       thrown away; this extends to holding onto local references to branches\n       on remotes that have themselves deleted those branches.\n\n       If left to accumulate, these stale references might make performance\n       worse on big and busy repos that have a lot of branch churn, and e.g.\n       make the output of commands like git branch -a --contains <commit>\n       needlessly verbose, as well as impacting anything else that\'ll work\n       with the complete set of known references.\n\n       These remote-tracking references can be deleted as a one-off with\n       either of:\n\n           # While fetching\n           $ git fetch --prune <name>\n\n           # Only prune, don\'t fetch\n           $ git remote prune <name>\n\n\n       To prune references as part of your normal workflow without needing to\n       remember to run that, set fetch.prune globally, or remote.<name>.prune\n       per-remote in the config. See git-config(1).\n\n       Here\'s where things get tricky and more specific. The pruning feature\n       doesn\'t actually care about branches, instead it\'ll prune local <->\n       remote-references as a function of the refspec of the remote (see\n       <refspec> and CONFIGURED REMOTE-TRACKING BRANCHES above).\n\n       Therefore if the refspec for the remote includes e.g.\n       refs/tags/*:refs/tags/*, or you manually run e.g. git fetch --prune\n       <name> "refs/tags/*:refs/tags/*" it won\'t be stale remote tracking\n       branches that are deleted, but any local tag that doesn\'t exist on the\n       remote.\n\n       This might not be what you expect, i.e. you want to prune remote\n       <name>, but also explicitly fetch tags from it, so when you fetch from\n       it you delete all your local tags, most of which may not have come from\n       the <name> remote in the first place.\n\n       So be careful when using this with a refspec like\n       refs/tags/*:refs/tags/*, or any other refspec which might map\n       references from multiple remotes to the same local namespace.\n\n       Since keeping up-to-date with both branches and tags on the remote is a\n       common use-case the --prune-tags option can be supplied along with\n       --prune to prune local tags that don\'t exist on the remote, and\n       force-update those tags that differ. Tag pruning can also be enabled\n       with fetch.pruneTags or remote.<name>.pruneTags in the config. See git-\n       config(1).\n\n       The --prune-tags option is equivalent to having refs/tags/*:refs/tags/*\n       declared in the refspecs of the remote. This can lead to some seemingly\n       strange interactions:\n\n           # These both fetch tags\n           $ git fetch --no-tags origin \'refs/tags/*:refs/tags/*\'\n           $ git fetch --no-tags --prune-tags origin\n\n\n       The reason it doesn\'t error out when provided without --prune or its\n       config versions is for flexibility of the configured versions, and to\n       maintain a 1=1 mapping between what the command line flags do, and what\n       the configuration versions do.\n\n       It\'s reasonable to e.g. configure fetch.pruneTags=true in ~/.gitconfig\n       to have tags pruned whenever git fetch --prune is run, without making\n       every invocation of git fetch without --prune an error.\n\n       Pruning tags with --prune-tags also works when fetching a URL instead\n       of a named remote. These will all prune tags not found on origin:\n\n           $ git fetch origin --prune --prune-tags\n           $ git fetch origin --prune \'refs/tags/*:refs/tags/*\'\n           $ git fetch <url of origin> --prune --prune-tags\n           $ git fetch <url of origin> --prune \'refs/tags/*:refs/tags/*\'\n\n\nOUTPUT\n       The output of "git fetch" depends on the transport method used; this\n       section describes the output when fetching over the Git protocol\n       (either locally or via ssh) and Smart HTTP protocol.\n\n       The status of the fetch is output in tabular form, with each line\n       representing the status of a single ref. Each line is of the form:\n\n            <flag> <summary> <from> -> <to> [<reason>]\n\n\n       The status of up-to-date refs is shown only if the --verbose option is\n       used.\n\n       In compact output mode, specified with configuration variable\n       fetch.output, if either entire <from> or <to> is found in the other\n       string, it will be substituted with * in the other string. For example,\n       main -> origin/main becomes main -> origin/*.\n\n       flag\n           A single character indicating the status of the ref:\n\n           (space)\n               for a successfully fetched fast-forward;\n\n           +\n               for a successful forced update;\n\n           -\n               for a successfully pruned ref;\n\n           t\n               for a successful tag update;\n\n           *\n               for a successfully fetched new ref;\n\n           !\n               for a ref that was rejected or failed to update; and\n\n           =\n               for a ref that was up to date and did not need fetching.\n\n       summary\n           For a successfully fetched ref, the summary shows the old and new\n           values of the ref in a form suitable for using as an argument to\n           git log (this is <old>..<new> in most cases, and <old>...<new> for\n           forced non-fast-forward updates).\n\n       from\n           The name of the remote ref being fetched from, minus its\n           refs/<type>/ prefix. In the case of deletion, the name of the\n           remote ref is "(none)".\n\n       to\n           The name of the local ref being updated, minus its refs/<type>/\n           prefix.\n\n       reason\n           A human-readable explanation. In the case of successfully fetched\n           refs, no explanation is needed. For a failed ref, the reason for\n           failure is described.\n\nEXAMPLES\n       o   Update the remote-tracking branches:\n\n               $ git fetch origin\n\n           The above command copies all branches from the remote refs/heads/\n           namespace and stores them to the local refs/remotes/origin/\n           namespace, unless the branch.<name>.fetch option is used to specify\n           a non-default refspec.\n\n       o   Using refspecs explicitly:\n\n               $ git fetch origin +seen:seen maint:tmp\n\n           This updates (or creates, as necessary) branches seen and tmp in\n           the local repository by fetching from the branches (respectively)\n           seen and maint from the remote repository.\n\n           The seen branch will be updated even if it does not fast-forward,\n           because it is prefixed with a plus sign; tmp will not be.\n\n       o   Peek at a remote\'s branch, without configuring the remote in your\n           local repository:\n\n               $ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n               $ git log FETCH_HEAD\n\n           The first command fetches the maint branch from the repository at\n           git://git.kernel.org/pub/scm/git/git.git and the second command\n           uses FETCH_HEAD to examine the branch with git-log(1). The fetched\n           objects will eventually be removed by git\'s built-in housekeeping\n           (see git-gc(1)).\n\nSECURITY\n       The fetch and push protocols are not designed to prevent one side from\n       stealing data from the other repository that was not intended to be\n       shared. If you have private data that you need to protect from a\n       malicious peer, your best option is to store it in another repository.\n       This applies to both clients and servers. In particular, namespaces on\n       a server are not effective for read access control; you should only\n       grant read access to a namespace to clients that you would trust with\n       read access to the entire repository.\n\n       The known attack vectors are as follows:\n\n        1. The victim sends "have" lines advertising the IDs of objects it has\n           that are not explicitly intended to be shared but can be used to\n           optimize the transfer if the peer also has them. The attacker\n           chooses an object ID X to steal and sends a ref to X, but isn\'t\n           required to send the content of X because the victim already has\n           it. Now the victim believes that the attacker has X, and it sends\n           the content of X back to the attacker later. (This attack is most\n           straightforward for a client to perform on a server, by creating a\n           ref to X in the namespace the client has access to and then\n           fetching it. The most likely way for a server to perform it on a\n           client is to "merge" X into a public branch and hope that the user\n           does additional work on this branch and pushes it back to the\n           server without noticing the merge.)\n\n        2. As in #1, the attacker chooses an object ID X to steal. The victim\n           sends an object Y that the attacker already has, and the attacker\n           falsely claims to have X and not Y, so the victim sends Y as a\n           delta against X. The delta reveals regions of X that are similar to\n           Y to the attacker.\n\nBUGS\n       Using --recurse-submodules can only fetch new commits in already\n       checked out submodules right now. When e.g. upstream added a new\n       submodule in the just fetched commits of the superproject the submodule\n       itself cannot be fetched, making it impossible to check out that\n       submodule later without having to do a fetch again. This is expected to\n       be fixed in a future Git version.\n\nSEE ALSO\n       git-pull(1)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                      GIT-FETCH(1)\n')),(0,a.kt)("h2",{id:"pull"},(0,a.kt)("inlineCode",{parentName:"h2"},"pull")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GIT-PULL(1)                       Git Manual                       GIT-PULL(1)\n\n\n\nNAME\n       git-pull - \u5225\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u307e\u305f\u306f\u30ed\u30fc\u30ab\u30eb\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u53d6\u5f97\u3057\u3066\u7d71\u5408\u3059\u308b\n\nSYNOPSIS\n       git pull [<options>] [<repository> [<refspec>...]]\n\n\nDESCRIPTION\n       Incorporates changes from a remote repository into the current branch.\n       In its default mode, git pull is shorthand for git fetch followed by\n       git merge FETCH_HEAD.\n       \n       \u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u306e\u5909\u66f4\u3092\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\n        \u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30fc\u30c9\u3067\u306f\u3001git pull \u306f git fetch \u3068\u305d\u308c\u306b\u7d9a\u304f \n       git merge FETCH_HEAD \u306e\u7701\u7565\u5f62\u3067\u3059\u3002\n       \n       \u3088\u308a\u6b63\u78ba\u306b\u306f\u3001git pull \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\u3057\u3066 git fetch \u3092\u5b9f\u884c\u3057\u3001\n       git merge \u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u53d6\u5f97\u3057\u305f\u30d6\u30e9\u30f3\u30c1\u30d8\u30c3\u30c9\u3092\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\n       --rebase \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001git merge \u306e\u4ee3\u308f\u308a\u306b git rebase \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n       \n       <repository> \u306f\u3001git-fetch(1) \u306b\u6e21\u3055\u308c\u308b\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u540d\u524d\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n       <refspec> \u306f\u3001\u4efb\u610f\u306e\u30ea\u30e2\u30fc\u30c8 ref\uff08\u30bf\u30b0\u306e\u540d\u524d\u306a\u3069\uff09\u307e\u305f\u306f\u5bfe\u5fdc\u3059\u308b\u30ea\u30e2\u30fc\u30c8\u8ffd\u8de1\u30d6\u30e9\u30f3\u30c1\u3092\u6301\u3064\n       ref \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08refs/heads/*:refs/remotes/origin/* \u306a\u3069\uff09\u306b\n       \u540d\u524d\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u901a\u5e38\u3001\u3053\u308c\u306f\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u5185\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u540d\u524d\u3067\u3059\u3002\n       \n       <repository> \u3068 <branch> \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001git-branch (1) --track \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u305f\n       \u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u300cremote\u300d\u304a\u3088\u3073\u300cmerge\u300d\u69cb\u6210\u304b\u3089\u8aad\u307f\u53d6\u3089\u308c\u307e\u3059\u3002\n       \n       \u6b21\u306e\u5c65\u6b74\u304c\u5b58\u5728\u3057\u3001\u73fe\u5728\u306e\u30d6\u30e9\u30f3\u30c1\u304c\u300cmain\u300d\u3067\u3042\u308b\u3068\u60f3\u5b9a\u3057\u307e\u3059\uff1a\n\n                     A---B---C main on origin\n                    /\n               D---E---F---G main\n                   ^\n                   origin/main in your repository\n\n\n       Then "git pull" will fetch and replay the changes from the remote\n       main branch since it diverged from the local main (i.e., E) until\n       its current commit (C) on top of main and record the result in a new\n       commit along with the names of the two parent commits and a log message\n       from the user describing the changes.\n       \n       \u6b21\u306b\u3001\u300cgit pull\u300d\u306f\u3001\u30ed\u30fc\u30ab\u30eb main \uff08\u3064\u307e\u308a E\uff09\u304b\u3089\u5206\u5c90\u3057\u3066\u304b\u3089\u3001\n       main \u4e0a\u306e\u73fe\u5728\u306e\u30b3\u30df\u30c3\u30c8\uff08C\uff09\u307e\u3067\u3001\u30ea\u30e2\u30fc\u30c8 main \u30d6\u30e9\u30f3\u30c1\u304b\u3089\u5909\u66f4\u3092\u30d5\u30a7\u30c3\u30c1\u3057\u3066\u518d\u751f\u3057\u3001\n       \u7d50\u679c\u3092\u30012\u3064\u306e\u89aa\u30b3\u30df\u30c3\u30c8\u306e\u540d\u524d\u3068\u3001\u5909\u66f4\u3092\u8aac\u660e\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3068\u3082\u306b\u3001\n       \u65b0\u3057\u3044\u30b3\u30df\u30c3\u30c8\u306b\u8a18\u9332\u3057\u307e\u3059\u3002\n\n                     A---B---C origin/main\n                    /         \\\n               D---E---F---G---H main\n\n\n      \u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u306e\u8868\u793a\u65b9\u6cd5\u3084\u51e6\u7406\u65b9\u6cd5\u306a\u3069\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001git-merge(1) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n       \n       Git 1.7.0 \u4ee5\u964d\u3067\u306f\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3059\u308b\u30de\u30fc\u30b8\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u306b\u306f\u3001git reset--merge \u3092\n       \u4f7f\u7528\u3057\u307e\u3059\u3002\n       \u8b66\u544a\uff1a\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e Git \u3067\u306f\u3001\u30b3\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u66f4\u3092\u52a0\u3048\u3066 git pull \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u306f\n       \u304a\u52e7\u3081\u3057\u307e\u305b\u3093\u3002\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u7af6\u5408\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u5143\u306b\u623b\u3059\u306e\u304c\u96e3\u3057\u3044\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n       \n       \u30ea\u30e2\u30fc\u30c8\u306e\u5909\u66f4\u306e\u3044\u305a\u308c\u304b\u304c\u30ed\u30fc\u30ab\u30eb\u306e\u30b3\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u66f4\u3068\u91cd\u8907\u3059\u308b\u5834\u5408\u3001\n       \u30de\u30fc\u30b8\u306f\u81ea\u52d5\u7684\u306b\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u3001\u4f5c\u696d\u30c4\u30ea\u30fc\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\u3002\n       \u4e00\u822c\u306b\u3001git-stash(1) \u3092\u4f7f\u7528\u3057\u3066\u30ed\u30fc\u30ab\u30eb\u306e\u5909\u66f4\u3092\u30d7\u30eb\u307e\u305f\u306f\u96a0\u3057\u3066\u304a\u304f\u524d\u306b\u3001\n       \u4f5c\u696d\u9806\u5e8f\u306e\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u66f4\u3092\u53d6\u5f97\u3059\u308b\u306e\u304c\u6700\u5584\u3067\u3059\u3002\n\nOPTIONS\n       -q, --quiet\n           This is passed to both underlying git-fetch to squelch reporting of\n           during transfer, and underlying git-merge to squelch output during\n           merging.\n\n       -v, --verbose\n           Pass --verbose to git-fetch and git-merge.\n\n       --[no-]recurse-submodules[=yes|on-demand|no]\n           This option controls if new commits of populated submodules should\n           be fetched, and if the working trees of active submodules should be\n           updated, too (see git-fetch(1), git-config(1) and gitmodules(5)).\n\n           If the checkout is done via rebase, local submodule commits are\n           rebased as well.\n\n           If the update is done via merge, the submodule conflicts are\n           resolved and checked out.\n\n   Options related to merging\n       --commit, --no-commit\n           Perform the merge and commit the result. This option can be used to\n           override --no-commit.\n\n           With --no-commit perform the merge and stop just before creating a\n           merge commit, to give the user a chance to inspect and further\n           tweak the merge result before committing.\n\n           Note that fast-forward updates do not create a merge commit and\n           therefore there is no way to stop those merges with --no-commit.\n           Thus, if you want to ensure your branch is not changed or updated\n           by the merge command, use --no-ff with --no-commit.\n\n       --edit, -e, --no-edit\n           Invoke an editor before committing successful mechanical merge to\n           further edit the auto-generated merge message, so that the user can\n           explain and justify the merge. The --no-edit option can be used to\n           accept the auto-generated message (this is generally discouraged).\n\n           Older scripts may depend on the historical behaviour of not\n           allowing the user to edit the merge log message. They will see an\n           editor opened when they run git merge. To make it easier to adjust\n           such scripts to the updated behaviour, the environment variable\n           GIT_MERGE_AUTOEDIT can be set to no at the beginning of them.\n\n       --cleanup=<mode>\n           This option determines how the merge message will be cleaned up\n           before committing. See git-commit(1) for more details. In addition,\n           if the <mode> is given a value of scissors, scissors will be\n           appended to MERGE_MSG before being passed on to the commit\n           machinery in the case of a merge conflict.\n\n       --ff, --no-ff, --ff-only\n           Specifies how a merge is handled when the merged-in history is\n           already a descendant of the current history.  --ff is the default\n           unless merging an annotated (and possibly signed) tag that is not\n           stored in its natural place in the refs/tags/ hierarchy, in which\n           case --no-ff is assumed.\n\n           With --ff, when possible resolve the merge as a fast-forward (only\n           update the branch pointer to match the merged branch; do not create\n           a merge commit). When not possible (when the merged-in history is\n           not a descendant of the current history), create a merge commit.\n\n           With --no-ff, create a merge commit in all cases, even when the\n           merge could instead be resolved as a fast-forward.\n\n           With --ff-only, resolve the merge as a fast-forward when possible.\n           When not possible, refuse to merge and exit with a non-zero status.\n\n       -S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign\n           GPG-sign the resulting merge commit. The keyid argument is optional\n           and defaults to the committer identity; if specified, it must be\n           stuck to the option without a space.  --no-gpg-sign is useful to\n           countermand both commit.gpgSign configuration variable, and earlier\n           --gpg-sign.\n\n       --log[=<n>], --no-log\n           In addition to branch names, populate the log message with one-line\n           descriptions from at most <n> actual commits that are being merged.\n           See also git-fmt-merge-msg(1).\n\n           With --no-log do not list one-line descriptions from the actual\n           commits being merged.\n\n       --signoff, --no-signoff\n           Add a Signed-off-by trailer by the committer at the end of the\n           commit log message. The meaning of a signoff depends on the project\n           to which you\'re committing. For example, it may certify that the\n           committer has the rights to submit the work under the project\'s\n           license or agrees to some contributor representation, such as a\n           Developer Certificate of Origin. (See\n           http://developercertificate.org for the one used by the Linux\n           kernel and Git projects.) Consult the documentation or leadership\n           of the project to which you\'re contributing to understand how the\n           signoffs are used in that project.\n\n           The --no-signoff option can be used to countermand an earlier\n           --signoff option on the command line.\n\n       --stat, -n, --no-stat\n           Show a diffstat at the end of the merge. The diffstat is also\n           controlled by the configuration option merge.stat.\n\n           With -n or --no-stat do not show a diffstat at the end of the\n           merge.\n\n       --squash, --no-squash\n           Produce the working tree and index state as if a real merge\n           happened (except for the merge information), but do not actually\n           make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to\n           cause the next git commit command to create a merge commit). This\n           allows you to create a single commit on top of the current branch\n           whose effect is the same as merging another branch (or more in case\n           of an octopus).\n\n           With --no-squash perform the merge and commit the result. This\n           option can be used to override --squash.\n\n           With --squash, --commit is not allowed, and will fail.\n\n       --no-verify\n           This option bypasses the pre-merge and commit-msg hooks. See also\n           githooks(5).\n\n       -s <strategy>, --strategy=<strategy>\n           Use the given merge strategy; can be supplied more than once to\n           specify them in the order they should be tried. If there is no -s\n           option, a built-in list of strategies is used instead (git\n           merge-recursive when merging a single head, git merge-octopus\n           otherwise).\n\n       -X <option>, --strategy-option=<option>\n           Pass merge strategy specific option through to the merge strategy.\n\n       --verify-signatures, --no-verify-signatures\n           Verify that the tip commit of the side branch being merged is\n           signed with a valid key, i.e. a key that has a valid uid: in the\n           default trust model, this means the signing key has been signed by\n           a trusted key. If the tip commit of the side branch is not signed\n           with a valid key, the merge is aborted.\n\n       --summary, --no-summary\n           Synonyms to --stat and --no-stat; these are deprecated and will be\n           removed in the future.\n\n       --autostash, --no-autostash\n           Automatically create a temporary stash entry before the operation\n           begins, and apply it after the operation ends. This means that you\n           can run the operation on a dirty worktree. However, use with care:\n           the final stash application after a successful merge might result\n           in non-trivial conflicts.\n\n       --allow-unrelated-histories\n           By default, git merge command refuses to merge histories that do\n           not share a common ancestor. This option can be used to override\n           this safety when merging histories of two projects that started\n           their lives independently. As that is a very rare occasion, no\n           configuration variable to enable this by default exists and will\n           not be added.\n\n       -r, --rebase[=false|true|merges|preserve|interactive]\n           When true, rebase the current branch on top of the upstream branch\n           after fetching. If there is a remote-tracking branch corresponding\n           to the upstream branch and the upstream branch was rebased since\n           last fetched, the rebase uses that information to avoid rebasing\n           non-local changes.\n\n           When set to merges, rebase using git rebase --rebase-merges so that\n           the local merge commits are included in the rebase (see git-\n           rebase(1) for details).\n\n           When set to preserve (deprecated in favor of merges), rebase with\n           the --preserve-merges option passed to git rebase so that locally\n           created merge commits will not be flattened.\n\n           When false, merge the current branch into the upstream branch.\n\n           When interactive, enable the interactive mode of rebase.\n\n           See pull.rebase, branch.<name>.rebase and branch.autoSetupRebase in\n           git-config(1) if you want to make git pull always use --rebase\n           instead of merging.\n\n               Note\n               This is a potentially dangerous mode of operation. It rewrites\n               history, which does not bode well when you published that\n               history already. Do not use this option unless you have read\n               git-rebase(1) carefully.\n\n       --no-rebase\n           Override earlier --rebase.\n\n   Options related to fetching\n       --all\n           Fetch all remotes.\n\n       -a, --append\n           Append ref names and object names of fetched refs to the existing\n           contents of .git/FETCH_HEAD. Without this option old data in\n           .git/FETCH_HEAD will be overwritten.\n\n       --atomic\n           Use an atomic transaction to update local refs. Either all refs are\n           updated, or on error, no refs are updated.\n\n       --depth=<depth>\n           Limit fetching to the specified number of commits from the tip of\n           each remote branch history. If fetching to a shallow repository\n           created by git clone with --depth=<depth> option (see git-\n           clone(1)), deepen or shorten the history to the specified number of\n           commits. Tags for the deepened commits are not fetched.\n\n       --deepen=<depth>\n           Similar to --depth, except it specifies the number of commits from\n           the current shallow boundary instead of from the tip of each remote\n           branch history.\n\n       --shallow-since=<date>\n           Deepen or shorten the history of a shallow repository to include\n           all reachable commits after <date>.\n\n       --shallow-exclude=<revision>\n           Deepen or shorten the history of a shallow repository to exclude\n           commits reachable from a specified remote branch or tag. This\n           option can be specified multiple times.\n\n       --unshallow\n           If the source repository is complete, convert a shallow repository\n           to a complete one, removing all the limitations imposed by shallow\n           repositories.\n\n           If the source repository is shallow, fetch as much as possible so\n           that the current repository has the same history as the source\n           repository.\n\n       --update-shallow\n           By default when fetching from a shallow repository, git fetch\n           refuses refs that require updating .git/shallow. This option\n           updates .git/shallow and accept such refs.\n\n       --negotiation-tip=<commit|glob>\n           By default, Git will report, to the server, commits reachable from\n           all local refs to find common commits in an attempt to reduce the\n           size of the to-be-received packfile. If specified, Git will only\n           report commits reachable from the given tips. This is useful to\n           speed up fetches when the user knows which local ref is likely to\n           have commits in common with the upstream ref being fetched.\n\n           This option may be specified more than once; if so, Git will report\n           commits reachable from any of the given commits.\n\n           The argument to this option may be a glob on ref names, a ref, or\n           the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is\n           equivalent to specifying this option multiple times, one for each\n           matching ref name.\n\n           See also the fetch.negotiationAlgorithm configuration variable\n           documented in git-config(1).\n\n       --dry-run\n           Show what would be done, without making any changes.\n\n       -f, --force\n           When git fetch is used with <src>:<dst> refspec it may refuse to\n           update the local branch as discussed in the <refspec> part of the\n           git-fetch(1) documentation. This option overrides that check.\n\n       -k, --keep\n           Keep downloaded pack.\n\n       -p, --prune\n           Before fetching, remove any remote-tracking references that no\n           longer exist on the remote. Tags are not subject to pruning if they\n           are fetched only because of the default tag auto-following or due\n           to a --tags option. However, if tags are fetched due to an explicit\n           refspec (either on the command line or in the remote configuration,\n           for example if the remote was cloned with the --mirror option),\n           then they are also subject to pruning. Supplying --prune-tags is a\n           shorthand for providing the tag refspec.\n\n       --no-tags\n           By default, tags that point at objects that are downloaded from the\n           remote repository are fetched and stored locally. This option\n           disables this automatic tag following. The default behavior for a\n           remote may be specified with the remote.<name>.tagOpt setting. See\n           git-config(1).\n\n       --refmap=<refspec>\n           When fetching refs listed on the command line, use the specified\n           refspec (can be given more than once) to map the refs to\n           remote-tracking branches, instead of the values of remote.*.fetch\n           configuration variables for the remote repository. Providing an\n           empty <refspec> to the --refmap option causes Git to ignore the\n           configured refspecs and rely entirely on the refspecs supplied as\n           command-line arguments. See section on "Configured Remote-tracking\n           Branches" for details.\n\n       -t, --tags\n           Fetch all tags from the remote (i.e., fetch remote tags refs/tags/*\n           into local tags with the same name), in addition to whatever else\n           would otherwise be fetched. Using this option alone does not\n           subject tags to pruning, even if --prune is used (though tags may\n           be pruned anyway if they are also the destination of an explicit\n           refspec; see --prune).\n\n       -j, --jobs=<n>\n           Number of parallel children to be used for all forms of fetching.\n\n           If the --multiple option was specified, the different remotes will\n           be fetched in parallel. If multiple submodules are fetched, they\n           will be fetched in parallel. To control them independently, use the\n           config settings fetch.parallel and submodule.fetchJobs (see git-\n           config(1)).\n\n           Typically, parallel recursive and multi-remote fetches will be\n           faster. By default fetches are performed sequentially, not in\n           parallel.\n\n       --set-upstream\n           If the remote is fetched successfully, add upstream (tracking)\n           reference, used by argument-less git-pull(1) and other commands.\n           For more information, see branch.<name>.merge and\n           branch.<name>.remote in git-config(1).\n\n       --upload-pack <upload-pack>\n           When given, and the repository to fetch from is handled by git\n           fetch-pack, --exec=<upload-pack> is passed to the command to\n           specify non-default path for the command run on the other end.\n\n       --progress\n           Progress status is reported on the standard error stream by default\n           when it is attached to a terminal, unless -q is specified. This\n           flag forces progress status even if the standard error stream is\n           not directed to a terminal.\n\n       -o <option>, --server-option=<option>\n           Transmit the given string to the server when communicating using\n           protocol version 2. The given string must not contain a NUL or LF\n           character. The server\'s handling of server options, including\n           unknown ones, is server-specific. When multiple\n           --server-option=<option> are given, they are all sent to the other\n           side in the order listed on the command line.\n\n       --show-forced-updates\n           By default, git checks if a branch is force-updated during fetch.\n           This can be disabled through fetch.showForcedUpdates, but the\n           --show-forced-updates option guarantees this check occurs. See git-\n           config(1).\n\n       --no-show-forced-updates\n           By default, git checks if a branch is force-updated during fetch.\n           Pass --no-show-forced-updates or set fetch.showForcedUpdates to\n           false to skip this check for performance reasons. If used during\n           git-pull the --ff-only option will still check for forced updates\n           before attempting a fast-forward update. See git-config(1).\n\n       -4, --ipv4\n           Use IPv4 addresses only, ignoring IPv6 addresses.\n\n       -6, --ipv6\n           Use IPv6 addresses only, ignoring IPv4 addresses.\n\n       <repository>\n           The "remote" repository that is the source of a fetch or pull\n           operation. This parameter can be either a URL (see the section GIT\n           URLS below) or the name of a remote (see the section REMOTES\n           below).\n\n       <refspec>\n           Specifies which refs to fetch and which local refs to update. When\n           no <refspec>s appear on the command line, the refs to fetch are\n           read from remote.<repository>.fetch variables instead (see the\n           section "CONFIGURED REMOTE-TRACKING BRANCHES" in git-fetch(1)).\n\n           The format of a <refspec> parameter is an optional plus +, followed\n           by the source <src>, followed by a colon :, followed by the\n           destination ref <dst>. The colon can be omitted when <dst> is\n           empty. <src> is typically a ref, but it can also be a fully spelled\n           hex object name.\n\n           A <refspec> may contain a * in its <src> to indicate a simple\n           pattern match. Such a refspec functions like a glob that matches\n           any ref with the same prefix. A pattern <refspec> must have a * in\n           both the <src> and <dst>. It will map refs to the destination by\n           replacing the * with the contents matched from the source.\n\n           If a refspec is prefixed by ^, it will be interpreted as a negative\n           refspec. Rather than specifying which refs to fetch or which local\n           refs to update, such a refspec will instead specify refs to\n           exclude. A ref will be considered to match if it matches at least\n           one positive refspec, and does not match any negative refspec.\n           Negative refspecs can be useful to restrict the scope of a pattern\n           refspec so that it will not include specific refs. Negative\n           refspecs can themselves be pattern refspecs. However, they may only\n           contain a <src> and do not specify a <dst>. Fully spelled out hex\n           object names are also not supported.\n\n           tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag>; it\n           requests fetching everything up to the given tag.\n\n           The remote ref that matches <src> is fetched, and if <dst> is not\n           an empty string, an attempt is made to update the local ref that\n           matches it.\n\n           Whether that update is allowed without --force depends on the ref\n           namespace it\'s being fetched to, the type of object being fetched,\n           and whether the update is considered to be a fast-forward.\n           Generally, the same rules apply for fetching as when pushing, see\n           the <refspec>...  section of git-push(1) for what those are.\n           Exceptions to those rules particular to git fetch are noted below.\n\n           Until Git version 2.20, and unlike when pushing with git-push(1),\n           any updates to refs/tags/* would be accepted without + in the\n           refspec (or --force). When fetching, we promiscuously considered\n           all tag updates from a remote to be forced fetches. Since Git\n           version 2.20, fetching to update refs/tags/* works the same way as\n           when pushing. I.e. any updates will be rejected without + in the\n           refspec (or --force).\n\n           Unlike when pushing with git-push(1), any updates outside of\n           refs/{tags,heads}/* will be accepted without + in the refspec (or\n           --force), whether that\'s swapping e.g. a tree object for a blob, or\n           a commit for another commit that\'s doesn\'t have the previous commit\n           as an ancestor etc.\n\n           Unlike when pushing with git-push(1), there is no configuration\n           which\'ll amend these rules, and nothing like a pre-fetch hook\n           analogous to the pre-receive hook.\n\n           As with pushing with git-push(1), all of the rules described above\n           about what\'s not allowed as an update can be overridden by adding\n           an the optional leading + to a refspec (or using --force command\n           line option). The only exception to this is that no amount of\n           forcing will make the refs/heads/* namespace accept a non-commit\n           object.\n\n               Note\n               When the remote branch you want to fetch is known to be rewound\n               and rebased regularly, it is expected that its new tip will not\n               be descendant of its previous tip (as stored in your\n               remote-tracking branch the last time you fetched). You would\n               want to use the + sign to indicate non-fast-forward updates\n               will be needed for such branches. There is no way to determine\n               or declare that a branch will be made available in a repository\n               with this behavior; the pulling user simply must know this is\n               the expected usage pattern for a branch.\n\n               Note\n               There is a difference between listing multiple <refspec>\n               directly on git pull command line and having multiple\n               remote.<repository>.fetch entries in your configuration for a\n               <repository> and running a git pull command without any\n               explicit <refspec> parameters. <refspec>s listed explicitly on\n               the command line are always merged into the current branch\n               after fetching. In other words, if you list more than one\n               remote ref, git pull will create an Octopus merge. On the other\n               hand, if you do not list any explicit <refspec> parameter on\n               the command line, git pull will fetch all the <refspec>s it\n               finds in the remote.<repository>.fetch configuration and merge\n               only the first <refspec> found into the current branch. This is\n               because making an Octopus from remote refs is rarely done,\n               while keeping track of multiple remote heads in one-go by\n               fetching more than one is often useful.\n\nGIT URLS\n       In general, URLs contain information about the transport protocol, the\n       address of the remote server, and the path to the repository. Depending\n       on the transport protocol, some of this information may be absent.\n\n       Git supports ssh, git, http, and https protocols (in addition, ftp, and\n       ftps can be used for fetching, but this is inefficient and deprecated;\n       do not use it).\n\n       The native transport (i.e. git:// URL) does no authentication and\n       should be used with caution on unsecured networks.\n\n       The following syntaxes may be used with them:\n\n       o   ssh://[user@]host.xz[:port]/path/to/repo.git/\n\n       o   git://host.xz[:port]/path/to/repo.git/\n\n       o   http[s]://host.xz[:port]/path/to/repo.git/\n\n       o   ftp[s]://host.xz[:port]/path/to/repo.git/\n\n       An alternative scp-like syntax may also be used with the ssh protocol:\n\n       o   [user@]host.xz:path/to/repo.git/\n\n       This syntax is only recognized if there are no slashes before the first\n       colon. This helps differentiate a local path that contains a colon. For\n       example the local path foo:bar could be specified as an absolute path\n       or ./foo:bar to avoid being misinterpreted as an ssh url.\n\n       The ssh and git protocols additionally support ~username expansion:\n\n       o   ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/\n\n       o   git://host.xz[:port]/~[user]/path/to/repo.git/\n\n       o   [user@]host.xz:/~[user]/path/to/repo.git/\n\n       For local repositories, also supported by Git natively, the following\n       syntaxes may be used:\n\n       o   /path/to/repo.git/\n\n       o   file:///path/to/repo.git/\n\n       These two syntaxes are mostly equivalent, except when cloning, when the\n       former implies --local option. See git-clone(1) for details.\n\n       git clone, git fetch and git pull, but not git push, will also accept a\n       suitable bundle file. See git-bundle(1).\n\n       When Git doesn\'t know how to handle a certain transport protocol, it\n       attempts to use the remote-<transport> remote helper, if one exists. To\n       explicitly request a remote helper, the following syntax may be used:\n\n       o   <transport>::<address>\n\n       where <address> may be a path, a server and path, or an arbitrary\n       URL-like string recognized by the specific remote helper being invoked.\n       See gitremote-helpers(7) for details.\n\n       If there are a large number of similarly-named remote repositories and\n       you want to use a different format for them (such that the URLs you use\n       will be rewritten into URLs that work), you can create a configuration\n       section of the form:\n\n                   [url "<actual url base>"]\n                           insteadOf = <other url base>\n\n\n       For example, with this:\n\n                   [url "git://git.host.xz/"]\n                           insteadOf = host.xz:/path/to/\n                           insteadOf = work:\n\n\n       a URL like "work:repo.git" or like "host.xz:/path/to/repo.git" will be\n       rewritten in any context that takes a URL to be\n       "git://git.host.xz/repo.git".\n\n       If you want to rewrite URLs for push only, you can create a\n       configuration section of the form:\n\n                   [url "<actual url base>"]\n                           pushInsteadOf = <other url base>\n\n\n       For example, with this:\n\n                   [url "ssh://example.org/"]\n                           pushInsteadOf = git://example.org/\n\n\n       a URL like "git://example.org/path/to/repo.git" will be rewritten to\n       "ssh://example.org/path/to/repo.git" for pushes, but pulls will still\n       use the original URL.\n\nREMOTES\n       The name of one of the following can be used instead of a URL as\n       <repository> argument:\n\n       o   a remote in the Git configuration file: $GIT_DIR/config,\n\n       o   a file in the $GIT_DIR/remotes directory, or\n\n       o   a file in the $GIT_DIR/branches directory.\n\n       All of these also allow you to omit the refspec from the command line\n       because they each contain a refspec which git will use by default.\n\n   Named remote in configuration file\n       You can choose to provide the name of a remote which you had previously\n       configured using git-remote(1), git-config(1) or even by a manual edit\n       to the $GIT_DIR/config file. The URL of this remote will be used to\n       access the repository. The refspec of this remote will be used by\n       default when you do not provide a refspec on the command line. The\n       entry in the config file would appear like this:\n\n                   [remote "<name>"]\n                           url = <url>\n                           pushurl = <pushurl>\n                           push = <refspec>\n                           fetch = <refspec>\n\n\n       The <pushurl> is used for pushes only. It is optional and defaults to\n       <url>.\n\n   Named file in $GIT_DIR/remotes\n       You can choose to provide the name of a file in $GIT_DIR/remotes. The\n       URL in this file will be used to access the repository. The refspec in\n       this file will be used as default when you do not provide a refspec on\n       the command line. This file should have the following format:\n\n                   URL: one of the above URL format\n                   Push: <refspec>\n                   Pull: <refspec>\n\n\n       Push: lines are used by git push and Pull: lines are used by git pull\n       and git fetch. Multiple Push: and Pull: lines may be specified for\n       additional branch mappings.\n\n   Named file in $GIT_DIR/branches\n       You can choose to provide the name of a file in $GIT_DIR/branches. The\n       URL in this file will be used to access the repository. This file\n       should have the following format:\n\n                   <url>#<head>\n\n\n       <url> is required; #<head> is optional.\n\n       Depending on the operation, git will use one of the following refspecs,\n       if you don\'t provide one on the command line. <branch> is the name of\n       this file in $GIT_DIR/branches and <head> defaults to main.\n\n       git fetch uses:\n\n                   refs/heads/<head>:refs/heads/<branch>\n\n\n       git push uses:\n\n                   HEAD:refs/heads/<head>\n\n\nMERGE STRATEGIES\n       The merge mechanism (git merge and git pull commands) allows the\n       backend merge strategies to be chosen with -s option. Some strategies\n       can also take their own options, which can be passed by giving\n       -X<option> arguments to git merge and/or git pull.\n\n       resolve\n           This can only resolve two heads (i.e. the current branch and\n           another branch you pulled from) using a 3-way merge algorithm. It\n           tries to carefully detect criss-cross merge ambiguities and is\n           considered generally safe and fast.\n\n       recursive\n           This can only resolve two heads using a 3-way merge algorithm. When\n           there is more than one common ancestor that can be used for 3-way\n           merge, it creates a merged tree of the common ancestors and uses\n           that as the reference tree for the 3-way merge. This has been\n           reported to result in fewer merge conflicts without causing\n           mismerges by tests done on actual merge commits taken from Linux\n           2.6 kernel development history. Additionally this can detect and\n           handle merges involving renames, but currently cannot make use of\n           detected copies. This is the default merge strategy when pulling or\n           merging one branch.\n\n           The recursive strategy can take the following options:\n\n           ours\n               This option forces conflicting hunks to be auto-resolved\n               cleanly by favoring our version. Changes from the other tree\n               that do not conflict with our side are reflected in the merge\n               result. For a binary file, the entire contents are taken from\n               our side.\n\n               This should not be confused with the ours merge strategy, which\n               does not even look at what the other tree contains at all. It\n               discards everything the other tree did, declaring our history\n               contains all that happened in it.\n\n           theirs\n               This is the opposite of ours; note that, unlike ours, there is\n               no theirs merge strategy to confuse this merge option with.\n\n           patience\n               With this option, merge-recursive spends a little extra time to\n               avoid mismerges that sometimes occur due to unimportant\n               matching lines (e.g., braces from distinct functions). Use this\n               when the branches to be merged have diverged wildly. See also\n               git-diff(1) --patience.\n\n           diff-algorithm=[patience|minimal|histogram|myers]\n               Tells merge-recursive to use a different diff algorithm, which\n               can help avoid mismerges that occur due to unimportant matching\n               lines (such as braces from distinct functions). See also git-\n               diff(1) --diff-algorithm.\n\n           ignore-space-change, ignore-all-space, ignore-space-at-eol,\n           ignore-cr-at-eol\n               Treats lines with the indicated type of whitespace change as\n               unchanged for the sake of a three-way merge. Whitespace changes\n               mixed with other changes to a line are not ignored. See also\n               git-diff(1) -b, -w, --ignore-space-at-eol, and\n               --ignore-cr-at-eol.\n\n               o   If their version only introduces whitespace changes to a\n                   line, our version is used;\n\n               o   If our version introduces whitespace changes but their\n                   version includes a substantial change, their version is\n                   used;\n\n               o   Otherwise, the merge proceeds in the usual way.\n\n           renormalize\n               This runs a virtual check-out and check-in of all three stages\n               of a file when resolving a three-way merge. This option is\n               meant to be used when merging branches with different clean\n               filters or end-of-line normalization rules. See "Merging\n               branches with differing checkin/checkout attributes" in\n               gitattributes(5) for details.\n\n           no-renormalize\n               Disables the renormalize option. This overrides the\n               merge.renormalize configuration variable.\n\n           no-renames\n               Turn off rename detection. This overrides the merge.renames\n               configuration variable. See also git-diff(1) --no-renames.\n\n           find-renames[=<n>]\n               Turn on rename detection, optionally setting the similarity\n               threshold. This is the default. This overrides the\n               merge.renames configuration variable. See also git-diff(1)\n               --find-renames.\n\n           rename-threshold=<n>\n               Deprecated synonym for find-renames=<n>.\n\n           subtree[=<path>]\n               This option is a more advanced form of subtree strategy, where\n               the strategy makes a guess on how two trees must be shifted to\n               match with each other when merging. Instead, the specified path\n               is prefixed (or stripped from the beginning) to make the shape\n               of two trees to match.\n\n       octopus\n           This resolves cases with more than two heads, but refuses to do a\n           complex merge that needs manual resolution. It is primarily meant\n           to be used for bundling topic branch heads together. This is the\n           default merge strategy when pulling or merging more than one\n           branch.\n\n       ours\n           This resolves any number of heads, but the resulting tree of the\n           merge is always that of the current branch head, effectively\n           ignoring all changes from all other branches. It is meant to be\n           used to supersede old development history of side branches. Note\n           that this is different from the -Xours option to the recursive\n           merge strategy.\n\n       subtree\n           This is a modified recursive strategy. When merging trees A and B,\n           if B corresponds to a subtree of A, B is first adjusted to match\n           the tree structure of A, instead of reading the trees at the same\n           level. This adjustment is also done to the common ancestor tree.\n\n       With the strategies that use 3-way merge (including the default,\n       recursive), if a change is made on both branches, but later reverted on\n       one of the branches, that change will be present in the merged result;\n       some people find this behavior confusing. It occurs because only the\n       heads and the merge base are considered when performing a merge, not\n       the individual commits. The merge algorithm therefore considers the\n       reverted change as no change at all, and substitutes the changed\n       version instead.\n\nDEFAULT BEHAVIOUR\n       Often people use git pull without giving any parameter. Traditionally,\n       this has been equivalent to saying git pull origin. However, when\n       configuration branch.<name>.remote is present while on branch <name>,\n       that value is used instead of origin.\n\n       In order to determine what URL to use to fetch from, the value of the\n       configuration remote.<origin>.url is consulted and if there is not any\n       such variable, the value on the URL: line in $GIT_DIR/remotes/<origin>\n       is used.\n\n       In order to determine what remote branches to fetch (and optionally\n       store in the remote-tracking branches) when the command is run without\n       any refspec parameters on the command line, values of the configuration\n       variable remote.<origin>.fetch are consulted, and if there aren\'t any,\n       $GIT_DIR/remotes/<origin> is consulted and its Pull: lines are used. In\n       addition to the refspec formats described in the OPTIONS section, you\n       can have a globbing refspec that looks like this:\n\n           refs/heads/*:refs/remotes/origin/*\n\n\n       A globbing refspec must have a non-empty RHS (i.e. must store what were\n       fetched in remote-tracking branches), and its LHS and RHS must end with\n       /*. The above specifies that all remote branches are tracked using\n       remote-tracking branches in refs/remotes/origin/ hierarchy under the\n       same name.\n\n       The rule to determine which remote branch to merge after fetching is a\n       bit involved, in order not to break backward compatibility.\n\n       If explicit refspecs were given on the command line of git pull, they\n       are all merged.\n\n       When no refspec was given on the command line, then git pull uses the\n       refspec from the configuration or $GIT_DIR/remotes/<origin>. In such\n       cases, the following rules apply:\n\n        1. If branch.<name>.merge configuration for the current branch <name>\n           exists, that is the name of the branch at the remote site that is\n           merged.\n\n        2. If the refspec is a globbing one, nothing is merged.\n\n        3. Otherwise the remote branch of the first refspec is merged.\n\nEXAMPLES\n       o   Update the remote-tracking branches for the repository you cloned\n           from, then merge one of them into your current branch:\n\n               $ git pull\n               $ git pull origin\n\n           Normally the branch merged in is the HEAD of the remote repository,\n           but the choice is determined by the branch.<name>.remote and\n           branch.<name>.merge options; see git-config(1) for details.\n\n       o   Merge into the current branch the remote branch next:\n\n               $ git pull origin next\n\n           This leaves a copy of next temporarily in FETCH_HEAD, and updates\n           the remote-tracking branch origin/next. The same can be done by\n           invoking fetch and merge:\n\n               $ git fetch origin\n               $ git merge origin/next\n\n\n       If you tried a pull which resulted in complex conflicts and would want\n       to start over, you can recover with git reset.\n\nSECURITY\n       The fetch and push protocols are not designed to prevent one side from\n       stealing data from the other repository that was not intended to be\n       shared. If you have private data that you need to protect from a\n       malicious peer, your best option is to store it in another repository.\n       This applies to both clients and servers. In particular, namespaces on\n       a server are not effective for read access control; you should only\n       grant read access to a namespace to clients that you would trust with\n       read access to the entire repository.\n\n       The known attack vectors are as follows:\n\n        1. The victim sends "have" lines advertising the IDs of objects it has\n           that are not explicitly intended to be shared but can be used to\n           optimize the transfer if the peer also has them. The attacker\n           chooses an object ID X to steal and sends a ref to X, but isn\'t\n           required to send the content of X because the victim already has\n           it. Now the victim believes that the attacker has X, and it sends\n           the content of X back to the attacker later. (This attack is most\n           straightforward for a client to perform on a server, by creating a\n           ref to X in the namespace the client has access to and then\n           fetching it. The most likely way for a server to perform it on a\n           client is to "merge" X into a public branch and hope that the user\n           does additional work on this branch and pushes it back to the\n           server without noticing the merge.)\n\n        2. As in #1, the attacker chooses an object ID X to steal. The victim\n           sends an object Y that the attacker already has, and the attacker\n           falsely claims to have X and not Y, so the victim sends Y as a\n           delta against X. The delta reveals regions of X that are similar to\n           Y to the attacker.\n\nBUGS\n       Using --recurse-submodules can only fetch new commits in already\n       checked out submodules right now. When e.g. upstream added a new\n       submodule in the just fetched commits of the superproject the submodule\n       itself cannot be fetched, making it impossible to check out that\n       submodule later without having to do a fetch again. This is expected to\n       be fixed in a future Git version.\n\nSEE ALSO\n       git-fetch(1), git-merge(1), git-config(1)\n\nGIT\n       Part of the git(1) suite\n\n\n\nGit 2.30.1.378.g1d4f23            02/08/2021                       GIT-PULL(1)\n')))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||s;return n?a.createElement(k,l(l({ref:t},o),{},{components:n})):a.createElement(k,l({ref:t},o))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const s={slug:"/rust-test",sidebar_label:"\u30c6\u30b9\u30c8"},l="\u3010Rust\u3011\u30c6\u30b9\u30c8",i={unversionedId:"technology/rust/spec/rust-test",id:"technology/rust/spec/rust-test",title:"\u3010Rust\u3011\u30c6\u30b9\u30c8",description:"\u30c6\u30b9\u30c8\u306e\u5224\u5b9a",source:"@site/notes/technology/rust/spec/rust-test.md",sourceDirName:"technology/rust/spec",slug:"/rust-test",permalink:"/notes/rust-test",draft:!1,editUrl:"https://github.com/NaokiKosuge/NaokiKosuge.github.io/edit/main/notes/technology/rust/spec/rust-test.md",tags:[],version:"current",frontMatter:{slug:"/rust-test",sidebar_label:"\u30c6\u30b9\u30c8"},sidebar:"tutorialSidebar",previous:{title:"\u53c2\u7167",permalink:"/notes/rust-reference"},next:{title:"\u30c8\u30ec\u30a4\u30c8",permalink:"/notes/rust-traits"}},p={},u=[{value:"\u30c6\u30b9\u30c8\u306e\u5224\u5b9a",id:"\u30c6\u30b9\u30c8\u306e\u5224\u5b9a",level:2},{value:"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3",id:"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3",level:3},{value:"\u30d1\u30cb\u30c3\u30af",id:"\u30d1\u30cb\u30c3\u30af",level:3},{value:"<code>Result</code> \u578b",id:"result-\u578b",level:3},{value:"\u5c5e\u6027",id:"\u5c5e\u6027",level:2},{value:"\u30c6\u30b9\u30c8\u4f53\u7cfb",id:"\u30c6\u30b9\u30c8\u4f53\u7cfb",level:2},{value:"\u5358\u4f53\u30c6\u30b9\u30c8",id:"\u5358\u4f53\u30c6\u30b9\u30c8",level:3},{value:"\u7d50\u5408\u30c6\u30b9\u30c8",id:"\u7d50\u5408\u30c6\u30b9\u30c8",level:3},{value:"\u30c9\u30af\u30c6\u30b9\u30c8",id:"\u30c9\u30af\u30c6\u30b9\u30c8",level:3},{value:"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u30b3\u30fc\u30c9",id:"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u30b3\u30fc\u30c9",level:4},{value:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u5b9f\u884c\u3057\u306a\u3044",id:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u5b9f\u884c\u3057\u306a\u3044",level:4},{value:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044",id:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044",level:4},{value:"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c",id:"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c",level:2}],o={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rust\u30c6\u30b9\u30c8"},"\u3010Rust\u3011\u30c6\u30b9\u30c8"),(0,r.kt)("h2",{id:"\u30c6\u30b9\u30c8\u306e\u5224\u5b9a"},"\u30c6\u30b9\u30c8\u306e\u5224\u5b9a"),(0,r.kt)("h3",{id:"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3"},"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3"),(0,r.kt)("p",null,"\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u30013\u7a2e\u985e\u306e ",(0,r.kt)("strong",{parentName:"p"},"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u30de\u30af\u30ed")," \u3092\u7528\u3044\u3066\u5024\u306e\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/macro.assert.html"},(0,r.kt)("inlineCode",{parentName:"a"},"asert!()"))," \u2014 \u5b9f\u884c\u6642\u306b\u30d6\u30fc\u30eb\u5f0f\u304c\u771f\u3067\u3042\u308b\u3053\u3068\u3092\u8868\u660e\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{2,6,10,14}","{2,6,10,14}":!0},'// \u3053\u308c\u3089\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30cb\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u5f0f\u306e\u6587\u5b57\u5217\u5316\u3055\u308c\u305f\u5024\u3067\u3059\u3002\nassert!(true);\n\nfn some_computation() -> bool { true } // \u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u95a2\u6570\n\nassert!(some_computation());\n\n// \u30ab\u30b9\u30bf\u30e0\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u30a2\u30b5\u30fc\u30c8\nlet x = true;\nassert!(x, "x \u306f true \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\uff01");\n\nlet a = 3;\nlet b = 27;\nassert!(a + b == 30, "a = {}, b = {}", a, b);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/macro.assert_eq.html"},(0,r.kt)("inlineCode",{parentName:"a"},"assert_eq!()"))," \u2014 2\u3064\u306e\u5f0f\u304c\u4e92\u3044\u306b\u7b49\u3057\u3044\u3053\u3068\u3092\u8868\u660e\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3,5}","{3,5}":!0},'let a = 3;\nlet b = 1 + 2;\nassert_eq!(a, b);\n\nassert_eq!(a, b, "{} \u3068 {} \u3067\u52a0\u7b97\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059", a, b);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/macro.assert_ne.html"},(0,r.kt)("inlineCode",{parentName:"a"},"assert_ne!()"))," \u2014 2\u3064\u306e\u5f0f\u304c\u4e92\u3044\u306b\u7b49\u3057\u304f\u306a\u3044\u3053\u3068\u3092\u8868\u660e\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3,5}","{3,5}":!0},'let a = 3;\nlet b = 2;\nassert_ne!(a, b);\n\nassert_ne!(a, b, "\u5024\u304c\u7b49\u3057\u304f\u306a\u3044\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059");\n')))),(0,r.kt)("h3",{id:"\u30d1\u30cb\u30c3\u30af"},"\u30d1\u30cb\u30c3\u30af"),(0,r.kt)("p",null,"\u30c6\u30b9\u30c8\u3092\u5931\u6557\u3055\u305b\u308b1\u3064\u306e\u65b9\u6cd5\u306f\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"panic!")," \u30de\u30af\u30ed\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3}","{3}":!0},'#[test]\nfn test() {\n    panic!("\u3053\u306e\u30c6\u30b9\u30c8\u3092\u5931\u6557\u3055\u305b\u308b");\n}\n')),(0,r.kt)("h3",{id:"result-\u578b"},(0,r.kt)("inlineCode",{parentName:"h3"},"Result")," \u578b"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Result")," \u578b\u3092\u7528\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn it_works() -> Result<(), String> {\n    if 2 + 2 == 4 {\n        Ok(())\n    } else {\n        Err(String::from("\u300c2+2\u300d\u306f\u300c4\u300d\u306b\u7b49\u3057\u304f\u306a\u3044"))\n    }\n}\n')),(0,r.kt)("h2",{id:"\u5c5e\u6027"},"\u5c5e\u6027"),(0,r.kt)("p",null,"\u30c6\u30b9\u30c8\u306b\u95a2\u9023\u3057\u305f\u5c5e\u6027\u306f4\u3064\u3042\u308a\u307e\u3059\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg-attribute"},(0,r.kt)("inlineCode",{parentName:"a"},"#[cfg(test)]"))," \u2014 \u30c6\u30b9\u30c8\u6642\u306e\u307f\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{1}","{1}":!0},"#[cfg(test)]\nmod tests {\n    #[test]\n    fn my_test() {\n        // ...\n    }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute"},(0,r.kt)("inlineCode",{parentName:"a"},"#[test]"))," \u2014 \u30c6\u30b9\u30c8\u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3092\u30de\u30fc\u30af\u3057\u307e\u3059\u3002\u95a2\u6570\u306e\u623b\u308a\u5024\u306f\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"()")," \u307e\u305f\u306f ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<(), E> where E: Error")," \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{1}","{1}":!0},"#[test]\nfn test_the_thing() -> io::Result<()> {\n    let state = setup_the_thing()?; // expected to succeed\n    do_the_thing(&state)?;          // expected to succeed\n    Ok(())\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/reference/attributes/testing.html#the-ignore-attribute"},(0,r.kt)("inlineCode",{parentName:"a"},"#[ignore]"))," \u2014 \u30c6\u30b9\u30c8\u6a5f\u80fd\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{2}","{2}":!0},'#[test]\n#[ignore = "\u307e\u3060\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093"]\nfn mytest() {\n  // \u2026\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/reference/attributes/testing.html#the-should_panic-attribute"},(0,r.kt)("inlineCode",{parentName:"a"},"#[should_panic]"))," \u2014 \u30c6\u30b9\u30c8\u3067\u30d1\u30cb\u30c3\u30af\u304c\u767a\u751f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3,10}","{3,10}":!0},'// \u95a2\u6570\u5185\u306e\u30b3\u30fc\u30c9\u304c\u30d1\u30cb\u30c3\u30af\u3057\u305f\u3089\u3001\u30c6\u30b9\u30c8\u3092\u901a\u904e\u3055\u305b\u307e\u3059\u3002\n#[test]\n#[should_panic]\nfn test_panic() {\n    panic!("\u30d1\u30cb\u30c3\u30af\u767a\u751f\uff01");\n}\n\n// \u3053\u3061\u3089\u306f\u3001\u7279\u5b9a\u306e\u30d1\u30cb\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u4e00\u81f4\u3059\u308b\u30d1\u30cb\u30c3\u30af\u304c\u767a\u751f\u3057\u305f\u3089\u3001\u30c6\u30b9\u30c8\u3092\u901a\u904e\u3055\u305b\u307e\u3059\u3002\n#[test]\n#[should_panic(expected = "\u30d1\u30cb\u30c3\u30af\u767a\u751f\uff01")]\nfn test _panic_with_message() {\n    panic!("\u30d1\u30cb\u30c3\u30af\u767a\u751f\uff01")\n}\n')))),(0,r.kt)("h2",{id:"\u30c6\u30b9\u30c8\u4f53\u7cfb"},"\u30c6\u30b9\u30c8\u4f53\u7cfb"),(0,r.kt)("p",null,"Rust \u306b\u304a\u3051\u308b\u30c6\u30b9\u30c8\u306f\u3001 ",(0,r.kt)("strong",{parentName:"p"},"\u5358\u4f53\u30c6\u30b9\u30c8")," \u3068 ",(0,r.kt)("strong",{parentName:"p"},"\u7d50\u5408\u30c6\u30b9\u30c8"),"\u3001\u305d\u3057\u3066 ",(0,r.kt)("strong",{parentName:"p"},"\u30c9\u30af\u30c6\u30b9\u30c8")," \u306b\u5206\u3051\u3089\u308c\u307e\u3059\u3002"),(0,r.kt)("h3",{id:"\u5358\u4f53\u30c6\u30b9\u30c8"},"\u5358\u4f53\u30c6\u30b9\u30c8"),(0,r.kt)("p",null,"\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u76ee\u7684\u306f\u3001\u6b8b\u308a\u306e\u30b3\u30fc\u30c9\u304b\u3089\u5207\u308a\u96e2\u3057\u3066\u5404\u5358\u4f4d\u306e\u30b3\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u3001 \u30b3\u30fc\u30c9\u304c\u60f3\u5b9a\u901a\u308a\u3001\u52d5\u3044\u305f\u308a\u52d5\u3044\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u7b87\u6240\u3092\u8fc5\u901f\u306b\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u4f8b\uff08src/lib.rs\uff09"',title:'"\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u4f8b\uff08src/lib.rs\uff09"'},"pub fn add_two(a: i32) -> i32 {\n    internal_adder(a, 2)\n}\n\nfn internal_adder(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    // \u516c\u958b\u95a2\u6570\u306e\u30c6\u30b9\u30c8\n    #[test]\n    fn external() {\n        assert_eq!(5, add_two(3));\n    }\n\n    // \u975e\u516c\u958b\u95a2\u6570\u306e\u30c6\u30b9\u30c8\n    use super::*;\n    #[test]\n    fn internal() {\n        assert_eq!(4, internal_adder(2, 2));\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5358\u4f53\u30c6\u30b9\u30c8\u306f\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306a\u308b\u30b3\u30fc\u30c9\u3068\u5171\u306b\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"src")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5404\u30d5\u30a1\u30a4\u30eb\u306b\u7f6e\u304d\u307e\u3059\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u305d\u3057\u3066\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u306b\u3001\u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u5c5e\u6027 ",(0,r.kt)("inlineCode",{parentName:"li"},"#[cfg(test)]")," \u3067\u6ce8\u91c8\u3055\u308c\u305f ",(0,r.kt)("inlineCode",{parentName:"li"},"tests")," \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308a\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"#[test]")," \u3067\u6ce8\u91c8\u3055\u308c\u305f\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u542b\u307e\u305b\u307e\u3059\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u975e\u516c\u958b\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u3059\u308b\u304b\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u65b9\u91dd\u6b21\u7b2c\u3067\u3059\u304c\u3001\u884c\u3046\u5834\u5408\u306f\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"use super::*")," \u3067\u30e1\u30f3\u30d0\u30fc\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002")),(0,r.kt)("h3",{id:"\u7d50\u5408\u30c6\u30b9\u30c8"},"\u7d50\u5408\u30c6\u30b9\u30c8"),(0,r.kt)("p",null,"\u7d50\u5408\u30c6\u30b9\u30c8\u306e\u76ee\u7684\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3044\u308d\u3093\u306a\u90e8\u5206\u304c\u5171\u540c\u3067\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30c6\u30b9\u30c8\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5916\u90e8\u3067\u884c\u3044\u307e\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="\u7d50\u5408\u30c6\u30b9\u30c8\u306e\u4f8b\uff08tests/integration_test.rs\uff09"',title:'"\u7d50\u5408\u30c6\u30b9\u30c8\u306e\u4f8b\uff08tests/integration_test.rs\uff09"'},"extern crate adder;\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, adder::add_two(2));\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7d50\u5408\u30c6\u30b9\u30c8\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5916\u90e8\u304b\u3089\u516c\u958b API \u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"src")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u96a3\u306b ",(0,r.kt)("inlineCode",{parentName:"li"},"tests")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u4e2d\u306b\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tests")," \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5404\u30d5\u30a1\u30a4\u30eb\u306f\u305d\u308c\u305e\u308c\u304c\u500b\u5225\u306e\u30af\u30ec\u30fc\u30c8\u3067\u3042\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u5192\u982d\u3067 ",(0,r.kt)("inlineCode",{parentName:"li"},"extern crate")," \u3067\u30c6\u30b9\u30c8\u5bfe\u8c61\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"#[test]")," \u3067\u6ce8\u91c8\u3055\u308c\u305f\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u4e2d\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002")),(0,r.kt)("h3",{id:"\u30c9\u30af\u30c6\u30b9\u30c8"},"\u30c9\u30af\u30c6\u30b9\u30c8"),(0,r.kt)("p",null,"\u30c9\u30af\u30c6\u30b9\u30c8\u306f\u3001\u30c9\u30af\u30b3\u30e1\u30f3\u30c8\u5185\u306b\u66f8\u304b\u308c\u305f Rust \u30b3\u30fc\u30c9\u304c\u30c6\u30b9\u30c8\u3055\u308c\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="\u30c9\u30af\u30c6\u30b9\u30c8\u306e\u4f8b\uff08src/lib.rs\uff09" {5-6,10}',title:'"\u30c9\u30af\u30c6\u30b9\u30c8\u306e\u4f8b\uff08src/lib.rs\uff09"',"{5-6,10}":!0},"use std::ops::Range;\n\n/// 2\u3064\u306e Range \u306b\u91cd\u306a\u308b\u90e8\u5206\u304c\u3042\u308c\u3070 true \u3092\u8fd4\u3059\u3002\n///\n///     assert_eq!(ranges::overlap(0..7, 3..10), true);\n///     assert_eq!(ranges::overlap(1..5, 101..105), false);\n///\n/// \u3069\u3061\u3089\u304b\u306e\u7bc4\u56f2\u304c\u7a7a\u3067\u3042\u308c\u3070\u3001\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u3059\u308b\u3002\n///\n///     assert_eq!(ranges::overlap(0..0, 0..10), false);\n///\npub fn overlap(r1: Range<usize>, r2: Range<usize>) -> bool {\n    r1.start < r1.end && r2.start < r2.end &&\n        r1.start < r2.end && r2.start < r1.end\n}\n")),(0,r.kt)("h4",{id:"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u30b3\u30fc\u30c9"},"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u8868\u793a\u3057\u306a\u3044\u30b3\u30fc\u30c9"),(0,r.kt)("p",null,"\u30c9\u30af\u30b3\u30e1\u30f3\u30c8\u3092\u5143\u306b\u751f\u6210\u3055\u308c\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8868\u793a\u3055\u305b\u305f\u304f\u306a\u3044\u30b3\u30fc\u30c9\u30e9\u30a4\u30f3\u3042\u3042\u308b\u5834\u5408\u3001\u884c\u982d\u306b ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," \u3092\u4ed8\u3051\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c9\u30af\u30c6\u30b9\u30c8\u3067\u306f\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3-5}","{3-5}":!0},"/// \u592a\u967d\u3092\u5149\u3089\u305b\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u6642\u9593\u3060\u3051\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3002\n///\n/// # use fern_sim::Terrarium;\n/// # use std::time::Duration;\n/// # let mut tm = Terrarium::new();\n/// tm.apply_sunlight(Duration::from_secs(60));\n///\npub fn apply_sunlight(&mut self, time: Duration) {\n    /* \u7701\u7565 */\n}\n")),(0,r.kt)("h4",{id:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u5b9f\u884c\u3057\u306a\u3044"},"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u5b9f\u884c\u3057\u306a\u3044"),(0,r.kt)("p",null,"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u4f8b\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u5b9f\u884c\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u30d5\u30a7\u30f3\u30b9\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306b ",(0,r.kt)("inlineCode",{parentName:"p"},"no_run")," \u5c5e\u6027\u3092\u4ed8\u3051\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3-6}","{3-6}":!0},"/// \u3059\u3079\u3066\u306e\u30ed\u30fc\u30ab\u30eb\u306a\u30c6\u30e9\u30ea\u30a6\u30e0\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u30ae\u30e3\u30e9\u30ea\u30fc\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\n///\n/// ```no_run\n/// let mut session = fern_sim::connect();\n/// session.upload_all();\n/// ```\npub fn upload_all(&mut self) {\n    /* \u7701\u7565 */\n}\n")),(0,r.kt)("h4",{id:"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044"},"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044"),(0,r.kt)("p",null,"\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u4f8b\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u30d5\u30a7\u30f3\u30b9\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306b ",(0,r.kt)("inlineCode",{parentName:"p"},"ignore")," \u3092\u4ed8\u3051\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002\u305d\u3082\u305d\u3082 Rust \u30b3\u30fc\u30c9\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u8a00\u8a9e\u306e\u540d\u524d\u304b\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"text")," \u3092\u4ed8\u3051\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"{3-6}","{3-6}":!0},"/// \u3059\u3079\u3066\u306e\u30ed\u30fc\u30ab\u30eb\u306a\u30c6\u30e9\u30ea\u30a6\u30e0\u3092\u30aa\u30f3\u30e9\u30a4\u30f3\u30ae\u30e3\u30e9\u30ea\u30fc\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\n///\n/// ```ignore\n/// let mut session = fern_sim::connect();\n/// session.upload_all();\n/// ```\npub fn upload_all(&mut self) {\n    /* \u7701\u7565 */\n}\n")),(0,r.kt)("h2",{id:"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c"},"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cargo test")," \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u308b\u30c6\u30b9\u30c8\u304c\u5168\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="\u4f8b\uff1a\u30c6\u30b9\u30c8\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c" {1}',title:'"\u4f8b\uff1a\u30c6\u30b9\u30c8\u30b3\u30de\u30f3\u30c9\u306e\u5b9f\u884c"',"{1}":!0},"$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.57s\n     Running target/debug/deps/adder-92948b65e88960b4\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n")))}m.isMDXComponent=!0}}]);